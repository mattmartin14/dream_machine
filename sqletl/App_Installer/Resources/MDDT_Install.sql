	
	
	/*
	*/
	
	
	USE SSISDB

	GO

	-- DISABLE MS TRIGGER ON SSISDB
	
	IF EXiSTS(select * from SSISDB.sys.triggers where name = 'ddl_cleanup_object_permissions')
		BEGIN
			IF EXISTS (SELECT is_disabled from SSISDB.sys.triggers where name = 'ddl_cleanup_object_permissions' and is_disabled = 0)
				BEGIN
					EXEC SSISDB..sp_executesql N'DISABLE TRIGGER ddl_cleanup_object_permissions ON DATABASE'
					--print 'trigger disabled'
				END
		END

	GO

	-- Change DB_OWNER to SA
	IF NOT exists (SELECT 1 from master.sys.databases WHERE name = 'SSISDB' and owner_sid = 0x01)
		BEGIN
			
			declare @sa nvarchar(255) = (select name from sys.server_principals where sid = 0x01)
			--print @sa
			
			exec SSISDB.sys.sp_changedbowner @sa;
				
		END

	GO


	IF NOT EXISTS(SELECT * FROM SSISDB.catalog.folders WHERE NAME = 'SQLETL.COM')
    BEGIN
        EXEC [SSISDB].[catalog].[create_folder] @folder_name= N'SQLETL.COM'
    END  

	GO

	DECLARE @FOLDER_DESC NVARCHAR(MAX) = concat(
'<SQLETL>
	<EDIS>
		<InstallTs>',format(sysdatetime(),'yyyy-MM-dd hh:mm:ss.ffffff'),'</InstallTs>
		<Instance>',@@servername,'</Instance>
		',(select @@version for xml path ('MSSQL_Edition_Snapshot')),'
		<SerialNumber>{EDIS_SERIAL_NO}</SerialNumber>
		<ActivationType>{EDIS_ACTIVATION_TYPE}</ActivationType>
		<BuildVersion>{EDIS_BUILD_VERSION}</BuildVersion>
		<UserVersion>{EDIS_USER_VERSION}</UserVersion>
		',(select SUSER_SNAME(owner_sid) from sys.databases where name = 'SSISDB' for xml path ('SSISDB_Owner_Snapshot')),'
	</EDIS>
</SQLETL>'
)

	EXEC [SSISDB].[catalog].[set_folder_description] @folder_name=N'SQLETL.COM', @folder_description = @FOLDER_DESC

	GO

	-- binaries
	declare @2012_bin varbinary(max) = 
	declare @2014_bin varbinary(max) = 

	declare @2016_bin varbinary(max) = 
	
	declare @2017_bin varbinary(max) = 

	declare @sql_vsn int = 
	(
		select convert(int,left(cast(value_data as varchar(256)),2))
		from sys.dm_server_registry
		where value_name = 'CurrentVersion'
	)
	declare @deploy_bin varbinary(max)


	if @sql_vsn = 11
		begin
			set @deploy_bin = @2012_bin
			print 'deploy 2012'
		end
	else if @sql_vsn = 12
		begin
			set @deploy_bin = @2014_bin
			print 'deploy 2014'
		end
	else if @sql_vsn = 13
		begin
			set @deploy_bin = @2016_bin
			print 'deploy 2016'
		end

	else if @sql_vsn = 14
		begin
			set @deploy_bin = @2017_bin
			print 'deploy 2017'
		end

	--{INSTALL_STEP}Package Deploy{/INSTALL_STEP}

	declare @op_id bigint
	EXEC SSISDB.catalog.deploy_project @folder_name = N'SQLETL.COM'
		,@project_name = 'EDIS'
		,@project_stream = @deploy_bin
		,@operation_id = @op_id out
	;


	GO

	--{INSTALL_STEP}Schema Create{/INSTALL_STEP}

	-- ----------------------------------------------------------------------------------------------------------
	-- SCHEMA

	IF NOT EXISTS(SELECT 1 FROM SYS.SCHEMAS WHERE NAME = 'EDIS')
    BEGIN 
        EXEC SSISDB..sp_executesql N'CREATE SCHEMA [EDIS] AUTHORIZATION [dbo]'
    END    

	GO


	-- ----------------------------------------------------------------------------------------------------------
	-- Base Tables


	--{INSTALL_STEP}Create Table lkup_service_id{/INSTALL_STEP}

	IF NOT EXISTS(SELECT 1 FROM SYS.TABLES WHERE NAME = 'lkup_service_id' and schema_Name(schema_id) = 'EDIS')
		BEGIN
			CREATE TABLE EDIS.lkup_service_id 
			(
				service_id NVARCHAR(250) PRIMARY KEY
				,last_upd_ts DATETIME2 NOT NULL
				,service_type NVARCHAR(250) NOT NULL
				,service_config VARBINARY(MAX) NOT NULL

			)
		END


	--{INSTALL_STEP}Create Table task_logger{/INSTALL_STEP}

	IF NOT EXISTS(SELECT 1 FROM SYS.TABLES WHERE NAME = 'task_logger' and schema_Name(schema_id) = 'EDIS')
		BEGIN
			CREATE TABLE EDIS.task_logger
            (
                 log_id int identity(1,1) primary key
				,exec_id varchar(50) not null
				,crt_ts datetime2 not null
				,log_type varchar(10) not null
				,msg_hdr varchar(250) not null
				,msg_dtl varchar(max)
            )
		END

	GO

	--{INSTALL_STEP}Create Table util_task_params{/INSTALL_STEP}

	IF NOT EXISTS(SELECT 1 FROM SYS.TABLES WHERE NAME = 'util_task_params' and schema_Name(schema_id) = 'EDIS')
		BEGIN
			CREATE TABLE EDIS.util_task_params
            (
				 exec_id varchar(50) not null
				,itemID varchar(1000)
				,itemVal varchar(max)
            )
		END

	GO

	--{INSTALL_STEP}Table Create etl_audit{/INSTALL_STEP}

	IF NOT EXISTS(SELECT 1 FROM SYS.TABLES WHERE NAME = 'etl_audit' and schema_Name(schema_id) = 'EDIS')
		BEGIN
			CREATE TABLE EDIS.etl_audit (
				 exec_id varchar(250) not null primary key clustered
				,task_action nvarchar(250)
				,task_start_ts datetime2
				,task_end_ts datetime2
				,task_duration int
				,task_run_outcome nvarchar(20)
				,usr_login_id nvarchar(250)
				,usr_machine_nm nvarchar(250)
				,ip_adrs nvarchar(250)
				,src_sys nvarchar(1000)
				,dest_sys nvarchar(1000)
				,src_qry nvarchar(max)
				,dest_tbl nvarchar(250)
				,rows_tsfr bigint
				,err_msg nvarchar(max)
				,file_path nvarchar(1000)
				,ftp_id nvarchar(250)
				,ftp_srvr nvarchar(250)
				,ftp_dir nvarchar(1000)
				,ftp_folder_nm nvarchar(250)
				,local_dir nvarchar(1000)
				,file_crit nvarchar(250)
				,file_list nvarchar(4000)
				,svc_id nvarchar(250)
				,[url] nvarchar(4000)
				,process_nm nvarchar(1000)
				,process_args nvarchar(max)
				,soap_envelope nvarchar(max)
				,sys_hb_ts datetime2
				,info_msgs xml
			)
		END
	ELSE
		-- V 1.8 and higher...add service ID column, url, and other stuff
		BEGIN
			IF NOT EXISTS(SELECT 1 FROM SYS.TABLES AS T INNER JOIN SYS.COLUMNS AS C ON T.OBJECT_ID = C.OBJECT_ID WHERE T.NAME = 'etl_audit'
				and schema_name(t.schema_id) = 'EDIS' and c.Name = 'svc_id')
					ALTER TABLE EDIS.etl_audit ADD svc_id nvarchar(250)
			;
			IF NOT EXISTS(SELECT 1 FROM SYS.TABLES AS T INNER JOIN SYS.COLUMNS AS C ON T.OBJECT_ID = C.OBJECT_ID WHERE T.NAME = 'etl_audit'
				and schema_name(t.schema_id) = 'EDIS' and c.Name = 'url')
					ALTER TABLE EDIS.etl_audit ADD [url] nvarchar(4000)
			;
			IF NOT EXISTS(SELECT 1 FROM SYS.TABLES AS T INNER JOIN SYS.COLUMNS AS C ON T.OBJECT_ID = C.OBJECT_ID WHERE T.NAME = 'etl_audit'
				and schema_name(t.schema_id) = 'EDIS' and c.Name = 'process_nm')
					ALTER TABLE EDIS.etl_audit ADD process_nm nvarchar(1000)
			;
			IF NOT EXISTS(SELECT 1 FROM SYS.TABLES AS T INNER JOIN SYS.COLUMNS AS C ON T.OBJECT_ID = C.OBJECT_ID WHERE T.NAME = 'etl_audit'
				and schema_name(t.schema_id) = 'EDIS' and c.Name = 'process_args')
					ALTER TABLE EDIS.etl_audit ADD process_args nvarchar(max)
			;
			IF NOT EXISTS(SELECT 1 FROM SYS.TABLES AS T INNER JOIN SYS.COLUMNS AS C ON T.OBJECT_ID = C.OBJECT_ID WHERE T.NAME = 'etl_audit'
				and schema_name(t.schema_id) = 'EDIS' and c.Name = 'soap_envelope')
					ALTER TABLE EDIS.etl_audit ADD soap_envelope nvarchar(max)
			;

		END

		-- heartbeat timestamp for proxy exec
		IF NOT EXISTS(SELECT 1 FROM SYS.TABLES AS T INNER JOIN SYS.COLUMNS AS C ON T.OBJECT_ID = C.OBJECT_ID WHERE T.NAME = 'etl_audit'
				and schema_name(t.schema_id) = 'EDIS' and c.Name = 'sys_hb_ts')
					ALTER TABLE EDIS.etl_audit ADD sys_hb_ts datetime2
		;

		-- heartbeat timestamp for proxy exec
		IF NOT EXISTS(SELECT 1 FROM SYS.TABLES AS T INNER JOIN SYS.COLUMNS AS C ON T.OBJECT_ID = C.OBJECT_ID WHERE T.NAME = 'etl_audit'
				and schema_name(t.schema_id) = 'EDIS' and c.Name = 'info_msgs')
					ALTER TABLE EDIS.etl_audit ADD info_msgs xml
		;

		-- rename pkg to task in ETL Audit table
		IF EXISTS(SELECT 1 FROM SYS.TABLES AS T INNER JOIN SYS.COLUMNS AS C ON T.OBJECT_ID = C.OBJECT_ID WHERE T.NAME = 'etl_audit'
				and schema_name(t.schema_id) = 'EDIS' and c.Name = 'pkg_action')

				BEGIN

					EXEC SP_RENAME 'EDIS.etl_audit.pkg_action', 'task_action'
					EXEC SP_RENAME 'EDIS.etl_audit.pkg_start_ts', 'task_start_ts'
					EXEC SP_RENAME 'EDIS.etl_audit.pkg_end_ts', 'task_end_ts'
					EXEC SP_RENAME 'EDIS.etl_audit.pkg_duration', 'task_duration'
					EXEC SP_RENAME 'EDIS.etl_audit.pkg_run_outcome', 'task_run_outcome'

				END
			;


	GO



	--{INSTALL_STEP}Update ETL Audit for exec_id as guid{/INSTALL_STEP}

	-- Version 3.1 -- to prepare for exec guids in pk spot
	IF EXISTS(
				SELECT *
				from INFORMATION_SCHEMA.columns
				where TABLE_NAME = 'etl_audit'
					AND TABLE_SCHEMA = 'EDIS'
					and column_name = 'exec_id'
					AND DATA_TYPE = 'bigint')
					-- before 3.1, the datatype was a bigint
			BEGIN
				-- drop the pk
				DECLARE @drop_pk nvarchar(max)
				SELECT @drop_pk = 'ALTER TABLE [EDIS].[etl_audit] DROP CONSTRAINT ['+CONSTRAINT_NAME+']'
				FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
				WHERE TABLE_NAME = 'etl_audit'
					and TABLE_SCHEMA = 'EDIS'
					and CONSTRAINT_TYPE = 'PRIMARY KEY'
				Exec SSISDB..sp_executesql @drop_pk;

				-- alter the column
				EXEC SSISDB..sp_executesql N'ALTER TABLE [EDIS].[etl_audit] ALTER COLUMN exec_id varchar(250) NOT NULL'
				-- Add PK
				EXEC SSISDB..sp_executesql N'ALTER TABLE [EDIS].[etl_audit] ADD PRIMARY KEY (exec_id)'


			END

	GO

	-- Update max width columns for src/dest/tbl

	--{INSTALL_STEP}widen columns for src dest sys and dest tbl in etl audit table{/INSTALL_STEP}
	IF EXISTS(
		SELECT * FROM INFORMATION_SCHEMA.COLUMNS
		WHERE TABLE_NAME = 'etl_audit' and TABLE_SCHEMA = 'EDIS'
			and COLUMN_NAME = 'src_sys'
			and CHARACTER_MAXIMUM_LENGTH < 1000
	)
		BEGIN
			EXEC SSISDB..sp_executesql N'ALTER TABLE EDIS.etl_audit ALTER COLUMN src_sys nvarchar(4000)';
			EXEC SSISDB..sp_executesql N'ALTER TABLE EDIS.etl_audit ALTER COLUMN dest_sys nvarchar(4000)';
			EXEC SSISDB..sp_executesql N'ALTER TABLE EDIS.etl_audit ALTER COLUMN dest_tbl nvarchar(4000)';
		END

	GO

	--{INSTALL_STEP}widen error message{/INSTALL_STEP}
	IF EXISTS(
		SELECT * FROM INFORMATION_SCHEMA.COLUMNS
		WHERE TABLE_NAME = 'etl_audit' and TABLE_SCHEMA = 'EDIS'
			and COLUMN_NAME = 'err_msg'
			and CHARACTER_MAXIMUM_LENGTH <> -1 -- max
	)
		BEGIN
			EXEC SSISDB..sp_executesql N'ALTER TABLE EDIS.etl_audit ALTER COLUMN err_msg nvarchar(MAX)';
	
		END

	GO

	--{INSTALL_STEP}rename pkg sync to task sync{/INSTALL_STEP}

	IF EXISTS(SELECT 1 FROM SYS.TABLES WHERE NAME = 'util_pkg_sync' and schema_Name(schema_id) = 'EDIS')
		EXEC SP_RENAME 'EDIS.util_pkg_sync', 'util_task_sync'

	GO

	--{INSTALL_STEP}Create Table util_task_sync{/INSTALL_STEP}

	IF NOT EXISTS(SELECT 1 FROM SYS.TABLES WHERE NAME = 'util_task_sync' and schema_Name(schema_id) = 'EDIS')
		BEGIN
			CREATE TABLE EDIS.util_task_sync (
				queue_id bigint identity(-9223372036854775808, 1), entry_id bit
			)

		END

	
	
	--{INSTALL_STEP}Create Table lkup_server_id_perm{/INSTALL_STEP}

	IF NOT EXISTS(SELECT 1 FROM SYS.TABLES WHERE NAME = 'lkup_server_id_perm' and schema_Name(schema_id) = 'EDIS')
		BEGIN
			CREATE TABLE EDIS.lkup_server_id_perm (server_id nvarchar(250) not null, usr_id nvarchar(128) not null
				,last_upd_ts datetime2 not null
				,primary key (server_id, usr_id)
			)

		END

	GO

	-- ====================================================================================================================================
	-- ENCRYPTION (DONT DROP IF THEY ALREADY EXIST!!!)

	GO

	--{INSTALL_STEP:}Add SQLETL_EDIS_CERT{/INSTALL_STEP}

	IF NOT EXISTS(SELECT 1 FROM SYS.CERTIFICATES WHERE NAME = 'SQLETL_EDIS_CERT')
        BEGIN
			CREATE CERTIFICATE [SQLETL_EDIS_CERT]
				WITH SUBJECT = 'Certificate for SQLETL EDIS data encryption', EXPIRY_DATE = '2200-01-01'  
        END

	GO

	--{INSTALL_STEP}Add SQLETL_EDIS_SKEY{/INSTALL_STEP}

    IF NOT EXISTS(SELECT 1 FROM SYS.SYMMETRIC_KEYS WHERE NAME = 'SQLETL_EDIS_SKEY')
        BEGIN
			CREATE SYMMETRIC KEY [SQLETL_EDIS_SKEY]
				WITH ALGORITHM = AES_256 ENCRYPTION BY CERTIFICATE [SQLETL_EDIS_CERT] 
        END

	GO
	
	-- ====================================================================================================================================
	-- Procedures

	
	--{INSTALL_STEP}Drop existing Procedures{/INSTALL_STEP}

	-- Drop existing procs and functions
	declare @cmd nvarchar(max)
	select @cmd = isnull(@cmd,'')+
		concat('if object_id(''',object_schema_name(object_id),'.',name,''') is not null drop '
			,case type 
				when 'P'  then 'proc '
				WHEN 'PC' then 'proc '
				when 'FN' then 'function '
				when 'FS' then 'function '
				when 'FT' then 'function '
				WHEN 'V'  then 'View '
				WHEN 'AF' then 'AGGREGATE '
			end
			,object_schema_name(object_id),'.',name
		) +'; '
	from sys.objects
	where OBJECT_SCHEMA_NAME(object_id) = 'EDIS'
		and type in( 'P','FN','V', 'PC', 'FS','FT','AF')
	;

	exec SSISDB..sp_executesql @cmd

	GO

	--{INSTALL_STEP}Drop Types{/INSTALL_STEP}

	-- DROP TYPES
	declare @cmd_types nvarchar(max);

	select @cmd_types = isnull(@cmd_types,'')+'DROP TYPE ['+SCHEMA_NAME(schema_id)+'].['+name+']; '
	from sys.types
	WHERE schema_id = schema_id('EDIS')
	;

	exec SSISDB..sp_executesql @cmd_types

	GO

	-- ====================================================================================================================================
	-- Assembly objects to drop

	--{INSTALL_STEP}Drop Existing Assembly{/INSTALL_STEP}

	IF EXISTS(SELECT * FROM sys.assemblies WHERE NAME = 'SQLETL_EDIS')
		BEGIN
			DROP ASSEMBLY SQLETL_EDIS
		END

	GO

	--{INSTALL_STEP}Drop Existing Assembly Signer{/INSTALL_STEP}

	IF EXISTS(SELECT * FROM SYS.DATABASE_PRINCIPALS WHERE NAME = 'SQLETL_EDIS_AssemblySigner')
		BEGIN
			DROP USER [SQLETL_EDIS_AssemblySigner]
		END

	GO

	--{INSTALL_STEP}Drop existing login for assembly{/INSTALL_STEP}

	-- Assembly Login (New)
	--{CHANGE DATABASE:MASTER}
	IF EXISTS(SELECT * FROM SYS.SERVER_PRINCIPALS WHERE NAME = 'SQLETL_EDIS_AssemblySigner')
		BEGIN
			DROP LOGIN [SQLETL_EDIS_AssemblySigner]
		END

	GO

	--{CHANGE DATABASE:MASTER}
	IF EXISTS(SELECT * FROM sys.asymmetric_keys WHERE NAME = 'SQLETL_EDIS_AssemblyLoadingKey')
		BEGIN
			DROP ASYMMETRIC KEY SQLETL_EDIS_AssemblyLoadingKey
		END

	GO

	-- ====================================================================================================================================
	-- Proxy Encyrption Stuff...wipe/reload

	--{INSTALL_STEP}Drop MSDB usp_MDDataTech_EDIS_run_pkg{/INSTALL_STEP}

	--{CHANGE DATABASE:MSDB}
	IF exists(select * from sys.procedures where OBJECT_SCHEMA_NAME(object_id) = 'dbo' and name = 'isp_SQLETL_EDIS_run_task')
		DROP PROCEDURE dbo.isp_SQLETL_EDIS_run_task
	GO

	--{INSTALL_STEP}Drop MSDB usp_MDDataTech_EDIS_get_sys_info{/INSTALL_STEP}

	--{CHANGE DATABASE:MSDB}
	IF exists(select * from sys.procedures where OBJECT_SCHEMA_NAME(object_id) = 'dbo' and name = 'usp_SQLETL_EDIS_get_sys_info')
		DROP PROCEDURE dbo.usp_SQLETL_EDIS_get_sys_info
	GO

	--{INSTALL_STEP}Drop MSDB isp_SQLETL_EDIS_exec_monitor{/INSTALL_STEP}

	--{CHANGE DATABASE:MSDB}
	IF exists(select * from sys.procedures where OBJECT_SCHEMA_NAME(object_id) = 'dbo' and name = 'isp_SQLETL_EDIS_exec_monitor')
		DROP PROCEDURE dbo.isp_SQLETL_EDIS_exec_monitor
	GO

	--{INSTALL_STEP}Drop MSDB isp_SQLETL_EDIS_setup_proxy_id{/INSTALL_STEP}

	--{CHANGE DATABASE:MSDB}
	IF exists(select * from sys.procedures where OBJECT_SCHEMA_NAME(object_id) = 'dbo' and name = 'isp_SQLETL_EDIS_setup_proxy_id')
		DROP PROCEDURE dbo.isp_SQLETL_EDIS_setup_proxy_id
	GO

	--{INSTALL_STEP}Drop SSISDB EDIS Operator User{/INSTALL_STEP}

	--{CHANGE DATABASE:SSISDB}
	IF EXISTS(SELECT * FROM sys.database_principals where name = 'SQLETL_EDIS_Operator')
		DROP USER SQLETL_EDIS_Operator

	GO

	--{INSTALL_STEP}Drop SSISDB Proxy Certificate{/INSTALL_STEP}

	IF EXISTS(SELECT * FROM sys.certificates WHERE name = 'SQLETL_EDIS_ProxyCert')
		DROP CERTIFICATE SQLETL_EDIS_ProxyCert

	GO

	--{INSTALL_STEP}Drop MSDB EDIS Operator{/INSTALL_STEP}

	--{CHANGE DATABASE:MSDB}
	IF EXISTS(SELECT * FROM sys.database_principals where name = 'SQLETL_EDIS_Operator')
		DROP USER SQLETL_EDIS_Operator

	GO

	--{INSTALL_STEP}Drop Master EDIS Operator User{/INSTALL_STEP}

	--{CHANGE DATABASE:MASTER}
	IF EXISTS(SELECT * FROM sys.database_principals where name = 'SQLETL_EDIS_Operator')
		DROP USER SQLETL_EDIS_Operator

	GO

	

	--{INSTALL_STEP}Drop Master EDIS Operator Login{/INSTALL_STEP}

	--{CHANGE DATABASE:MASTER}
	IF EXISTS(SELECT * FROM sys.server_principals where name = 'SQLETL_EDIS_Operator')
		DROP LOGIN SQLETL_EDIS_Operator

	GO

	--{INSTALL_STEP}Drop Master EDIS master certificate{/INSTALL_STEP}

	--{CHANGE DATABASE:MASTER}
	IF EXISTS(SELECT * FROM sys.certificates WHERE name = 'SQLETL_EDIS_ProxyCert')
		DROP CERTIFICATE SQLETL_EDIS_ProxyCert

	GO

	--{INSTALL_STEP}Create EDIS Proxy Certificate{/INSTALL_STEP}

	-- Proxy Certificate in SSISDB
	CREATE CERTIFICATE SQLETL_EDIS_ProxyCert 
	ENCRYPTION BY PASSWORD = '{PROXY_CERTIFICATE_PASSWORD}'
	WITH SUBJECT = 'SQLETL.COM EDIS Proxy Certificate', EXPIRY_DATE = '20601231'

	GO

	--{INSTALL_STEP}Backup Certificate{/INSTALL_STEP}

	--{ACTION:CLEAR_PROXY_CER_TEMP_PATH}
	BACKUP CERTIFICATE SQLETL_EDIS_ProxyCert 
	TO FILE = '{PROXY_CERTIFICATE_TEMP_PATH}'

	GO

	--{INSTALL_STEP}Create Certificate in Master{/INSTALL_STEP}

	-- load in master
	--{CHANGE DATABASE:MASTER}
	CREATE CERTIFICATE SQLETL_EDIS_ProxyCert 
	FROM FILE =  '{PROXY_CERTIFICATE_TEMP_PATH}'

	GO

	--{INSTALL_STEP}Create operator login{/INSTALL_STEP}

	-- remove the file again once we've loaded it
	--{ACTION:CLEAR_PROXY_CER_TEMP_PATH}
	--{CHANGE DATABASE:MASTER}
	CREATE LOGIN SQLETL_EDIS_Operator
	FROM CERTIFICATE SQLETL_EDIS_ProxyCert

	GO

	--{INSTALL_STEP}Update operator authentication{/INSTALL_STEP}

	--{CHANGE DATABASE:MASTER}
	GRANT AUTHENTICATE SERVER TO SQLETL_EDIS_Operator

	GO

	--{INSTALL_STEP}add operator user{/INSTALL_STEP}

	--{CHANGE DATABASE:MASTER}
	CREATE USER SQLETL_EDIS_Operator FROM LOGIN SQLETL_EDIS_Operator 
	GO

	--{INSTALL_STEP}Add MSDB Operator user{/INSTALL_STEP}

	--{CHANGE DATABASE:MSDB}
	CREATE USER SQLETL_EDIS_Operator FROM LOGIN SQLETL_EDIS_Operator 
	GO

	--{CHANGE DATABASE:SSISDB}
	CREATE USER SQLETL_EDIS_Operator FROM LOGIN SQLETL_EDIS_Operator 
	
	GO

	GRANT SELECT, INSERT, UPDATE, DELETE on EDIS.etl_audit to SQLETL_EDIS_Operator

	GO

	--{INSTALL_STEP}create run package in msdb{/INSTALL_STEP}

	--{CHANGE DATABASE:MSDB}
	CREATE PROC dbo.isp_SQLETL_EDIS_run_task
         @exec_id varchar(50)
		,@logging_level varchar(50)
		,@edis_exec_path varchar(1000)
		,@err_msg nvarchar(max) out
		with execute as OWNER, encryption
	as
		set nocount on;
		-- Copyright Notice
		
		-- Validate that the execute package proc was calling it
		declare @caller_info varchar(max) = isnull(cast(context_info() as varchar(max)),'')
		set context_info 0x01
		if charindex('$-___139ns~#@Fvnc9N@DEDIS_PROXY_CALLER$*%NQNCZGSG(DS)',@caller_info) = 0
			BEGIN
				Raiserror('This procedure is not allowed to be executed directly. It is an internal procedure only to be used directly by EDIS. Please contact your system administrator for help.',16,16) with nowait
				return 16
			END

		--declare @exec_guid varchar(255) = replace(@gtt,'[##_______EDIS_','')
		--set @exec_guid = replace(@exec_guid,']','')

		-- grab the proxy id
		--print 'Getting Proxy'
		declare @proxy_id nvarchar(255)
		--declare @sql nvarchar(max) = 'SET @proxy_id = (SELECT ItemVal FROM [##'+@exec_id+'] WHERE ItemID = ''proxy_id'')'
		declare @sql nvarchar(max) = 'SET @proxy_id = (SELECT ItemVal FROM SSISDB.EDIS.util_task_params WHERE exec_id = @exec_id AND ItemID = ''proxy_id'')'
		exec sp_executesql @sql, N'@proxy_id nvarchar(255) out, @exec_id varchar(250)', @proxy_id = @proxy_id out, @exec_id = @exec_id;
		
		DECLARE @cmdExe nvarchar(max) = @edis_exec_path +' "'+@@servername+'" "'+@exec_id+'" "'+@logging_level+'"';

		--print @cmdExe

		declare @job_nm nvarchar(255) = 'SQLETL_EDIS_'+@exec_id
		--print @job_nm

		declare @sa nvarchar(255) = (select name from sys.server_principals where sid = 0x01);
		declare @job_id uniqueidentifier

		EXEC sp_add_job 
			 @job_name=@job_nm 
			,@job_id = @job_id out
			,@enabled=1
			,@description = N'SQLETL.COM, EDIS Proxy Execution'
			,@owner_login_name=@sa
		;

		EXEC sp_add_jobserver @job_name= @job_nm, @server_name = @@SERVERNAME

		exec sp_add_jobstep 
			 @job_name=@job_nm
			,@step_name=N'step1'
			,@step_id=1 
			,@cmdexec_success_code=0 
			,@on_success_action=1 
			,@on_fail_action=2
			,@subsystem=N'CmdExec'
			,@command= @cmdExe
			,@database_name=N'master' 
			,@proxy_name= @proxy_id
			,@flags=0
		;

		-- ==================================================================================================
		-- Create Monitor Job

		declare @mon_job_nm nvarchar(255) = concat(@job_nm,'_mn')
		declare @mon_job_id uniqueidentifier

		EXEC sp_add_job 
			 @job_name=@mon_job_nm 
			,@job_id = @mon_job_id out
			,@enabled=1
			,@description = N'SQLETL.COM, EDIS Proxy Execution Monitor'
			,@owner_login_name=@sa
			,@delete_level=3 -- delete when done
		;

		EXEC sp_add_jobserver @job_name= @mon_job_nm, @server_name = @@SERVERNAME

		declare @job_mon_sql nvarchar(max) = 'EXEC dbo.isp_SQLETL_EDIS_exec_monitor '''+@exec_id+''';'

		exec sp_add_jobstep 
			 @job_name=@mon_job_nm
			,@step_name=N'step1'
			,@step_id=1 
			,@cmdexec_success_code=0 
			,@on_success_action=1 
			,@on_fail_action=1
			,@subsystem=N'TSQL'
			,@command= @job_mon_sql
			,@database_name= N'msdb'
			,@flags=0
		;

		-- update the heartbeat timestamp for the execution
		EXEC SSISDB.EDIS.isp_log_info @exec_id, 'heartbeat', '';

		-- start monitor job first
		DECLARE @ret_cd int;

		exec @ret_cd = sp_start_job @job_name = @mon_job_nm, @output_flag = 0

		if @ret_cd <> 0
			BEGIN
				set @err_msg = 'Error starting proxy execution monitor job'
				RETURN
			END

		WAITFOR DELAY '00:00:02'
		exec @ret_cd = sp_start_job @job_name = @job_nm, @output_flag = 0
		if @ret_cd <> 0
			BEGIN
				set @err_msg = 'Error starting proxy execution job'
				return;
			END
		WAITFOR DELAY '00:00:02'
		declare @ticks int = 0

		WHILE EXISTS(
			SELECT 1
			FROM msdb.dbo.sysjobs job with (Nolock)
				INNER JOIN msdb.dbo.sysjobactivity activity with (Nolock)
					ON job.job_id = activity.job_id
				INNER JOIN msdb.dbo.syssessions sess with (Nolock)
					ON sess.session_id = activity.session_id
				INNER JOIN
				(
					SELECT
						MAX( agent_start_date ) AS max_agent_start_date
					FROM
						msdb.dbo.syssessions with (Nolock)
				) sess_max
					ON
						sess.agent_start_date = sess_max.max_agent_start_date
				WHERE activity.run_requested_date IS NOT NULL AND activity.stop_execution_date IS NULL
					AND activity.job_id = @job_id
		) 
			BEGIN
				WAITFOR DELAY '00:00:01'
				set @ticks +=1;
				if @ticks >= 2
					BEGIN
						EXEC SSISDB.EDIS.isp_log_info @exec_id, 'heartbeat', '';
					END
			END

		set @err_msg  =
		(
			SELECT message
			FROM dbo.sysjobhistory 
			WHERE job_id = @job_id
				and run_status = 0
				AND step_name <> '(Job Outcome)'
		)

		-- drop the job
		exec sp_delete_job @job_name = @job_nm, @delete_history = 1

		-- ----------------------------------------------------------------------------------------------------------------------
		-- Clear abandoned Jobs

		BEGIN TRY

			if object_id('tempdb..#jobs') is not null drop table #jobs;
			SELECT Distinct j.name
			into #jobs
			FROM msdb.dbo.sysjobactivity AS a 
				INNER JOIN msdb.dbo.sysjobs AS j 
					ON j.job_id = a.job_id
			WHERE j.name LIKE 'SQLETL_EDIS_%'
				AND 
				(
					a.stop_execution_date <= DATEADD(MINUTE,-5,GETDATE())
					OR 
					( DATEDIFF(MINUTE, j.date_created,GETDATE()) >=5 AND a.start_execution_date IS NULL) -- for jobs that never started
				)
			;

			if exists(select * from #jobs)
				BEGIN
					DECLARE @nm NVARCHAR(255)
					DECLARE cs CURSOR LOCAL FAST_FORWARD FOR SELECT name from #jobs
					OPEN cs
					FETCH NEXT FROM cs INTO @nm
					WHILE @@FETCH_STATUS = 0
						BEGIN
							EXEC msdb.dbo.sp_delete_job @job_name = @nm, @delete_history = 1, @delete_unused_schedule = 1
							FETCH NEXT FROM cs INTO @nm
						END
					CLOSE CS
					DEALLOCATE CS

				END

		END TRY
		BEGIN CATCH
		END CATCH


	GO
	--{INSTALL_STEP}create proc usp_SELETL_EDIS_exec_monitor{/INSTALL_STEP}

	--{CHANGE DATABASE:MSDB}
	CREATE proc dbo.isp_SQLETL_EDIS_exec_monitor
		 @exec_id varchar(50)
		WITH ENCRYPTION
	AS
		
		SET NOCOUNT ON;
		-- Copyright Notice

		--declare @sql nvarchar(max) = 'SELECT @curr_ts = sys_hb_ts FROM SSISDB.EDIS.etl_audit WHERE exec_id = @exec_id';
		
		declare @job_nm nvarchar(250) = 'SQLETL_EDIS_'+@exec_id

		WHILE EXISTS(SELECT 1 FROM dbo.sysjobs WITH (NOLOCK) WHERE name = @job_nm)
			BEGIN
				
				declare @curr_ts datetime2 = (SELECT sys_hb_ts from SSISDB.EDIS.etl_audit where exec_id = @exec_id)
				
				--exec sp_executesql @sql, N'@curr_ts datetime2 out, exec_id varchar(250)', @curr_ts = @curr_ts out, @exec_id = @exec_id;
				
				DECLARE @now DATETIME2 = GETDATE()

				-- if longer than 20 seconds, it has been cancelled
				
				if DATEDIFF(second, @curr_ts, @now) >=20
					BEGIN
						-- the sp_stop_job issues a kill command to the cmdexec that launched edis per MSN BOL
						exec sp_stop_job @job_name = @job_nm;
						exec sp_delete_job @job_name = @job_nm, @delete_history = 1;

						UPDATE SSISDB.EDIS.etl_audit
							set task_end_ts = sysdatetime()
								,task_run_outcome = 'ABORTED'
						WHERE exec_id = @exec_id
						OPTION (MAXDOP 1)

						RETURN
					END
				ELSE
					-- delay 5 seconds
					WAITFOR DELAY '00:00:05'
					
			END


GO


	--{INSTALL_STEP}set permission for msdb edis run pkg proc{/INSTALL_STEP}

	--{CHANGE DATABASE:MSDB}
	GRANT EXECUTE ON dbo.isp_SQLETL_EDIS_run_task TO SQLETL_EDIS_Operator
	
	GO

	--{INSTALL_STEP}add permission in master for lookup items{/INSTALL_STEP}
	
	--{CHANGE DATABASE:MASTER}
	GRANT EXECUTE ON sys.xp_regread TO SQLETL_EDIS_Operator


	GO

	--{INSTALL_STEP}add permission in master to read sysprocesses{/INSTALL_STEP}
	
	--{CHANGE DATABASE:MASTER}
	GRANT SELECT ON dbo.sysprocesses TO SQLETL_EDIS_Operator


	GO

	--{INSTALL_STEP}Create proc dbo.isp_SQLETL_EDIS_setup_proxy_id{/INSTALL_STEP}

	--{CHANGE DATABASE:MSDB}

	CREATE PROC dbo.isp_SQLETL_EDIS_setup_proxy_id
		 @login_nm NVARCHAR(128)
		,@login_pwd NVARCHAR(1000)
		,@proxy_id NVARCHAR(128) 
		WITH EXEC AS OWNER, ENCRYPTION
	AS
		SET NOCOUNT ON;
		SET XACT_ABORT ON;

		DECLARE @step NVARCHAR(128)

		BEGIN TRY
			BEGIN TRAN

				IF CHARINDEX('\',@login_nm) = 0
				BEGIN
					RAISERROR('Please provide a domain login account that includes a "\" for the @login_nm parameter',16,16) WITH NOWAIT
					ROLLBACK TRAN;
					RETURN 16
				END

				DECLARE @sql NVARCHAR(MAX)

				SET @step = 'Login Check'

				-- Check Login
				IF NOT EXISTS(SELECT * FROM sys.server_principals WHERE name = @login_nm)
					BEGIN
						SET @sql = N'CREATE LOGIN ['+@login_nm+'] FROM WINDOWS'
						EXEC master..sp_executesql @sql
					END


				-- Create credential set
				DECLARE @cred_nm NVARCHAR(128) 

				SET @step = 'Credential Check'

				-- Check Credential
				IF NOT EXISTS(SELECT * FROM sys.credentials WHERE credential_identity = @login_nm)
					BEGIN
						set @cred_nm = CONCAT('SQLETL_EDIS_CRED_',REPLACE(@login_nm,'\','_'),'_',LEFT(NEWID(),8))
						SET @sql = N'CREATE CREDENTIAL ['+@cred_nm+'] WITH IDENTITY = N'''+@login_nm+''', SECRET = N'''+@login_pwd+''''
						EXEC master..sp_executesql @sql
					END
				ELSE
					BEGIN
						SET @cred_nm = (SELECT name FROM sys.credentials WHERE credential_identity = @login_nm)
						SET @sql = N'ALTER CREDENTIAL ['+@cred_nm+'] WITH IDENTITY = N'''+@login_nm+''', SECRET = N'''+@login_pwd+''''
						EXEC master..sp_executesql @sql
					END

				SET @step = 'Proxy Check'

				-- Create proxy if not exists
				DECLARE @proxy_exists BIT = 0

				IF EXISTS (
					SELECT p.name
					FROM msdb.dbo.sysproxies AS p
						--INNER JOIN master.sys.credentials AS c
						--	ON p.credential_id = c.credential_id
					WHERE p.[name] = @proxy_id
						--AND c.[name] = @cred_nm
                )
					SET @proxy_exists = 1
				;

				IF @proxy_exists = 1
					BEGIN
						SET @sql = N'sp_update_proxy @proxy_name=N'''+@proxy_id+''',@credential_name=N'''+@cred_nm+''', @enabled=1'
						EXEC msdb..sp_executesql @sql;
						
					END
				ELSE
					BEGIN
						SET @sql = N'sp_add_proxy @proxy_name=N'''+@proxy_id+''',@credential_name=N'''+@cred_nm+''', @enabled=1'
						EXEC msdb..sp_executesql @sql;
					END

				SET @step = 'Proxy Subsystem Update'

				-- add to command exec subsystem
				IF NOT EXISTS(
					SELECT *
					FROM msdb.dbo.sysproxysubsystem as ss
						INNER JOIN msdb.dbo.sysproxies as p
							on ss.proxy_id = p.proxy_id
					WHERE ss.subsystem_id = 3
						and p.name = @proxy_id
				)
					BEGIN
						SET @sql = N'sp_grant_proxy_to_subsystem @proxy_name=N'''+@proxy_id+''', @subsystem_id=3'
						EXEC msdb..sp_executesql @sql;
					END

				SET @step = 'SSISDB User Check'

				-- Map to SSISDB
				IF NOT EXISTS(SELECT * FROM SSISDB.sys.database_principals WHERE name = @login_nm)
					BEGIN
						SET @sql = N'CREATE USER ['+@login_nm+'] FOR LOGIN ['+@login_nm+']'
						EXEC SSISDB..sp_executesql @sql
					END

				SET @step = 'SSISDB role add'

				-- map to mddt role
				SET @sql = N'ALTER ROLE [EDIS_Role] ADD MEMBER ['+@login_nm+']'
				EXEC SSISDB..sp_executesql @sql

				declare @success_msg nvarchar(1000) = concat(
					'Proxy ID ['+@proxy_id+'] has been added successfully!',char(13)+char(10)
					,'Ensure the target server you are reading/writing data against for this proxy ID has login [',@login_nm,'] '
					,'mapped to the database with necessary permissions it needs access to.'
				)
				--print @success_msg

			COMMIT TRAN;
			
		END TRY
		BEGIN CATCH
			ROLLBACK TRAN;

			DECLARE @err_msg NVARCHAR(max) = CONCAT('Error setting up proxy ID',CHAR(13)+CHAR(10)
				,'Step: ',@step,CHAR(13)+CHAR(10)
				,'Message: ',ERROR_MESSAGE()
			)
			RAISERROR(@err_msg,16,16) WITH NOWAIT;
			RETURN 16;
		END CATCH

	GO

	--{CHANGE DATABASE:MSDB}
	GRANT EXECUTE ON dbo.isp_SQLETL_EDIS_setup_proxy_id TO SQLETL_EDIS_Operator

	GO

	--{INSTALL_STEP}Create proc usp_MDDataTech_EDIS_get_sys_info{/INSTALL_STEP}

	--{CHANGE DATABASE:MSDB}
	CREATE PROC dbo.usp_SQLETL_EDIS_get_sys_info
		 @info_ind		VARCHAR(250)
		,@info_arg_1	VARCHAR(1000) = NULL
        ,@info_arg_2	VARCHAR(1000) = NULL	
		,@res_msg		VARCHAR(MAX) OUT
        ,@res			BIT OUT

		WITH EXECUTE AS OWNER, ENCRYPTION
    AS
		SET NOCOUNT ON;

		

		IF @info_ind = 'INSTALL_ID'
			BEGIN

				DECLARE @install_id NVARCHAR(1000)
				declare @install_key_path nvarchar(1000) = N'Software\SQLETL.COM\'+replace(@@servername,'\','_')
				EXEC sys.xp_regread
						@rootkey      = N'HKEY_LOCAL_MACHINE'
						,@key          = @install_key_path
						,@value_name   = N'EDIS Install ID'
						,@value        =  @install_id output
						,@no_output	= 'no_output'
				;

				if @install_id is not null
					BEGIN
						set @res_msg = ltrim(rtrim(@install_id))
						set @res = 1
					END
				ELSE
					BEGIN
						set @res_msg = 'EDIS has encountered an internal error while attempting to validate the license. Please contact support@sqletl.com'
						set @res = 0
					END

			END

		

		IF @info_ind = 'CHECK_PROXY'
			BEGIN

				-- Is SQL Agent Running?
				IF NOT EXISTS(SELECT 1
					FROM MASTER.dbo.sysprocesses
					WHERE program_name = N'SQLAgent - Generic Refresher'
				)
					BEGIN
						SET @res_msg = 'In order to run this task, the SQL job agent must be running. Please start SQL Agent before re-running this task.'
						SET @res = 0
						RETURN
					END

				DECLARE @proxy_nm VARCHAR(255) = @info_arg_1

				-- does the proxy exist?
				IF NOT EXISTS(SELECT * FROM DBO.sysproxies WHERE name = @proxy_nm)
					BEGIN
						SET @res_msg = 'Proxy ['+@proxy_nm+'] does not exist. Contact your system administrator for help'
						SET @res = 0
						RETURN
					END	

				-- does it have access to CmdExec?
				IF NOT EXISTS(
					SELECT *
					FROM dbo.sysproxies AS p
						INNER JOIN	dbo.sysproxysubsystem AS sub
							ON sub.proxy_id = p.proxy_id
					WHERE p.name = @proxy_nm
						AND sub.subsystem_id = 3 -- CmdExec
						-- Powershell has security signing issues
						--AND sub.subsystem_id = 12 -- powershell
				)
					BEGIN
						SET @res_msg = 'Proxy ['+@proxy_nm+'] does not have access to subsystem CmdExec.'+CHAR(13)+CHAR(10)
						SET @res_msg += 'In order to use this feature of EDIS, please have your system adminstrator run this code below:'+CHAR(13)+CHAR(10)
						SET @res_msg += CHAR(13)+CHAR(10)
						SET @res_msg += '	-> EXEC msdb.dbo.sp_grant_proxy_to_subsystem @proxy_name=N'''+@proxy_nm+''', @subsystem_id=3'
						SET @res = 0
						RETURN
					END	

				SET @res = 1
				SET @res_msg = 'PROXY_VALID'
	
				-- ------------------------------------------------------------------------------------
				-- Check the credential mapping to MSSQL

				DECLARE @cred_id NVARCHAR(255) = (

				SELECT C.credential_identity
				FROM sys.credentials AS c
					INNER JOIN dbo.sysproxies AS px
						ON c.credential_id = px.credential_id
				WHERE px.name = @proxy_nm
				)

				DECLARE @issue_id INT = 1

				-- is the ID mapped to the server
				IF NOT EXISTS(SELECT * FROM sys.server_principals WHERE name = @cred_id)
					BEGIN
						SET @res = 0
						SET @res_msg += '('+CAST(@issue_id AS VARCHAR(2))+') '+CHAR(13)+CHAR(10)
						SET @res_msg += '		The Credential ID associated with the proxy ['+@cred_id+'] needs to be mapped as a login to the SQL Server'+CHAR(13)+CHAR(10)
						SET @res_msg += '		Please run this SQL to correct: '+CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)
						SET @res_msg += '			USE MASTER'+CHAR(13)+CHAR(10)
						SET @res_msg += '			GO'+CHAR(13)+CHAR(10)
						SET @res_msg += '			CREATE LOGIN ['+@cred_id+'] FROM WINDOWS'+CHAR(13)+CHAR(10)

						SET @issue_id += 1

					END

				DECLARE @sid VARBINARY(128) = (SELECT sid FROM sys.server_principals WHERE name = @cred_id)

				-- are they mapped to SSISDB?
				DECLARE @is_mapped_to_ssisdb BIT = 0
				DECLARE @user_name NVARCHAR(255)
				DECLARE @db_prince_id INT
				IF NOT EXISTS(
					SELECT *
					FROM SSISDB.sys.database_principals
					WHERE sid = (SELECT sid FROM sys.server_principals WHERE name = @cred_id)
				)
					BEGIN
						SET @res = 0
						SET @res_msg += CHAR(13)+CHAR(10)
						SET @res_msg += '('+CAST(@issue_id AS VARCHAR(2))+') '+CHAR(13)+CHAR(10)
						SET @res_msg += '		The Credential ID associated with the proxy ['+@cred_id+'] is not mapped to the SSISDB.'+CHAR(13)+CHAR(10)
						SET @res_msg += '		Please run this SQL to correct: '+CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)
						SET @res_msg += '			USE SSISDB'+CHAR(13)+CHAR(10)
						SET @res_msg += '			GO'+CHAR(13)+CHAR(10)
						SET @res_msg += '			CREATE USER ['+@cred_id+'] FOR LOGIN ['+@cred_id+']'+CHAR(13)+CHAR(10)
						SET @res_msg += '			GO'+CHAR(13)+CHAR(10)
						SET @res_msg += '			ALTER ROLE [EDIS_Role] ADD MEMBER ['+@cred_id+']'+CHAR(13)+CHAR(10)

						SET @issue_id += 1
					END
				ELSE
					BEGIN
						SET @is_mapped_to_ssisdb = 1
						SET @user_name = (SELECT name FROM SSISDB.sys.database_principals WHERE sid = (SELECT sid FROM sys.server_principals WHERE name = @cred_id))
						SET @db_prince_id = (SELECT principal_id FROM SSISDB.sys.database_principals WHERE sid = (SELECT sid FROM sys.server_principals WHERE name = @cred_id))
					END

				DECLARE @edis_role_id INT = (SELECT principal_id FROM SSISDB.sys.database_principals WHERE name = 'EDIS_Role')

				-- are they mapped to the edis role
				IF @is_mapped_to_ssisdb = 1
					BEGIN
						IF NOT EXISTS(SELECT *
							FROM SSISDB.sys.database_role_members
							WHERE role_principal_id = @edis_role_id
								AND member_principal_id = @db_prince_id
						)
						BEGIN
							SET @res = 0
							SET @res_msg += CHAR(13)+CHAR(10)
							SET @res_msg += '('+CAST(@issue_id AS VARCHAR(2))+') '+CHAR(13)+CHAR(10)
							SET @res_msg += '		The Credential ID associated with the proxy ['+@cred_id+'] is not a member of the EDIS_Role. Please run the SQL below to correct:'+CHAR(13)+CHAR(10)
							SET @res_msg += '			USE SSISDB'+CHAR(13)+CHAR(10)
							SET @res_msg += '			GO'+CHAR(13)+CHAR(10)
							SET @res_msg += '			ALTER ROLE [EDIS_Role] ADD MEMBER ['+ISNULL(@user_name,'')+']'

							SET @issue_id += 1
						END
					END
    
				

				IF @res = 1 
					BEGIN
						SET @res_msg = 'PROXY_VALID'
					END
				RETURN

			END

	GO

	--{INSTALL_STEP}set permission: proc usp_MDDataTech_EDIS_get_sys_info{/INSTALL_STEP}

	--{CHANGE DATABASE:MSDB}
	GRANT EXECUTE ON dbo.usp_SQLETL_EDIS_get_sys_info TO SQLETL_EDIS_Operator

	GO

	-- ========================================================================================================================================
	-- Define Types

	--{INSTALL_STEP}Create header type web_request_headers{/INSTALL_STEP}

	CREATE TYPE EDIS.web_request_headers AS TABLE(header_name VARCHAR(250), header_val VARCHAR(MAX))
	
	GO


	-- ========================================================================================================================================
	-- EDIS Assembly

	--{INSTALL_STEP}Load Assembly{/INSTALL_STEP}

	-- Write the DLL to the temp path and load it as an assemtric key
	--{ACTION:ASM_KEY_DELETE_FILE_IF_EXISTS}
	--{ACTION:ASM_KEY_WRITE_FILE}
	--{CHANGE DATABASE:MASTER}
	CREATE ASYMMETRIC KEY SQLETL_EDIS_AssemblyLoadingKey
	FROM EXECUTABLE FILE = '{MDDT_CLR_ASM_PATH}'

	GO

	--{INSTALL_STEP}Create assembly signer login{/INSTALL_STEP}

	--{CHANGE DATABASE:MASTER}
	CREATE LOGIN SQLETL_EDIS_AssemblySigner FROM ASYMMETRIC KEY SQLETL_EDIS_AssemblyLoadingKey

	GO

	--{INSTALL_STEP}set assembly signer permissions{/INSTALL_STEP}

	--{CHANGE DATABASE:MASTER}
	GRANT UNSAFE ASSEMBLY TO SQLETL_EDIS_AssemblySigner

	GO

	--{INSTALL_STEP}Create assembly signer user{/INSTALL_STEP}

	CREATE USER SQLETL_EDIS_AssemblySigner FOR LOGIN SQLETL_EDIS_AssemblySigner

	GO


	--{INSTALL_STEP}Load Assembly{/INSTALL_STEP}

	CREATE ASSEMBLY [SQLETL_EDIS]
	AUTHORIZATION [dbo]
	FROM '{MDDT_CLR_ASM_PATH}'
	WITH PERMISSION_SET = UNSAFE

	GO

	--{ACTION:ASM_KEY_DELETE_FILE_IF_EXISTS}

	GO

	--{INSTALL_STEP}create assembly proc{/INSTALL_STEP}

	CREATE PROCEDURE EDIS.isp_run_asm_proc_internal
		@exec_id nvarchar(255)
		WITH EXECUTE AS CALLER
	AS
		EXTERNAL NAME [SQLETL_EDIS].[EDIS.cEntry].[main]
	GO

	----{INSTALL_STEP}check proxy account{/INSTALL_STEP}

	--CREATE PROCEDURE EDIS.isp_check_proxy_id
	--	 @proxy_id nvarchar(255), @service_id nvarchar(1000)
	--	,@res_msg nvarchar(max) out
	--AS
	--	EXTERNAL NAME [SQLETL_EDIS].[EDIS.cSysTasks].[check_proxy_account]
	--GO

	--{INSTALL_STEP}validate db conn{/INSTALL_STEP}

	CREATE PROCEDURE EDIS.isp_validate_db_conn
		 @cn_str nvarchar(max), @cn_type nvarchar(10), @err_msg nvarchar(max) out
	AS
		EXTERNAL NAME [SQLETL_EDIS].[EDIS.cSysTasks].[validate_db_conn]
	GO

	--{INSTALL_STEP}ufn_concat_list{/INSTALL_STEP}

	CREATE AGGREGATE EDIS.ufn_concat_list
			(@txt [NVARCHAR](MAX), @delim [NVARCHAR](250))
			RETURNS[NVARCHAR](MAX)
	EXTERNAL NAME [SQLETL_EDIS].[EDIS.CONCAT_LIST]

	GO

	--{INSTALL_STEP}check proxy account{/INSTALL_STEP}

	CREATE PROCEDURE EDIS.isp_get_cn_props
		 @service_id nvarchar(1000)
	AS
		EXTERNAL NAME [SQLETL_EDIS].[EDIS.cSysTasks].[get_cn_props]
	GO

	--{INSTALL_STEP}Create function ufn_does_file_exist{/INSTALL_STEP}

	CREATE FUNCTION EDIS.ufn_does_file_exist (@file_path nvarchar(1000))
	returns BIT
		WITH EXECUTE AS CALLER
	AS
		EXTERNAL NAME [SQLETL_EDIS].[EDIS.cSysTasks].[does_file_exist]

	GO

	--{INSTALL_STEP}Create function ufn_does_file_exist{/INSTALL_STEP}

	CREATE FUNCTION EDIS.ufn_read_file_line (@file_path nvarchar(1000), @line_nbr as integer)
	returns nvarchar(max)
		WITH EXECUTE AS CALLER
	AS
		EXTERNAL NAME [SQLETL_EDIS].[EDIS.cFileTasks].[read_line_from_txt_file]

	GO

	--{INSTALL_STEP}Create function ifn_read_file_to_str{/INSTALL_STEP}

	CREATE FUNCTION EDIS.ifn_read_file_to_str (@file_path nvarchar(1000))
	returns nvarchar(max)
		WITH EXECUTE AS CALLER
	AS
		EXTERNAL NAME [SQLETL_EDIS].[EDIS.cSysTasks].[read_file_as_str]

	GO

	--{INSTALL_STEP}Create function ifn_get_ms_ace_version{/INSTALL_STEP}

	CREATE FUNCTION EDIS.ifn_get_ms_ace_version ()
	returns nvarchar(10)
		WITH EXECUTE AS OWNER
	AS
		EXTERNAL NAME [SQLETL_EDIS].[EDIS.cSysTasks].[get_ms_ace_provider]

	GO

	--{INSTALL_STEP}Create function ifn_get_dts_bin_path{/INSTALL_STEP}

	CREATE FUNCTION EDIS.ifn_get_dts_bin_path (@use_32_bit_runtime bit)
	returns nvarchar(1000)
		WITH EXECUTE AS CALLER
	AS
		EXTERNAL NAME [SQLETL_EDIS].[EDIS.cSysTasks].[get_dts_bin_path]

	GO

	--{INSTALL_STEP}Create function ifn_format_qry_as_text{/INSTALL_STEP}

	CREATE FUNCTION EDIS.ifn_format_qry_as_text (@src_qry nvarchar(max))
	returns nvarchar(max)
		WITH EXECUTE AS CALLER
	AS
		EXTERNAL NAME [SQLETL_EDIS].[EDIS.cSysTasks].[format_qry_as_text]

	GO

	--{INSTALL_STEP}Create function ufn_convert_file_to_varbinary{/INSTALL_STEP}

	CREATE FUNCTION EDIS.ufn_convert_file_to_varbinary (@file_path nvarchar(4000))
	returns varbinary(max)
		WITH EXECUTE AS CALLER
	AS
		EXTERNAL NAME [SQLETL_EDIS].[EDIS.cSysTasks].[convert_file_to_varbinary]

	GO

	--{INSTALL_STEP}Create function ufn_convert_file_to_varbinary{/INSTALL_STEP}

	CREATE PROCEDURE EDIS.usp_convert_varbinary_to_file 
		 @bin_data  varbinary(max)
		,@output_file_path  nvarchar(4000)
		WITH EXECUTE AS CALLER
	AS
		EXTERNAL NAME [SQLETL_EDIS].[EDIS.cSysTasks].[convert_varbinary_to_file]

	GO



	--{INSTALL_STEP}Create function ufn_split_string{/INSTALL_STEP}

	CREATE FUNCTION EDIS.ufn_split_string (	
		@str_list nvarchar(max), @delim nvarchar(255)
	)
	RETURNS TABLE (value nvarchar(max))
		WITH EXECUTE AS CALLER
	AS
	EXTERNAL name [SQLETL_EDIS].[EDIS.cSysTasks].[split_string]

	GO

	--{INSTALL_STEP}Create function ufn_get_files{/INSTALL_STEP}

	CREATE FUNCTION EDIS.ufn_get_files (	
		@src_dir nvarchar(1000), @filter nvarchar(500)
	)
	RETURNS TABLE 
		(
			  file_path nvarchar(1000)
			, dir_path nvarchar(1000)
			, file_nm nvarchar(1000)
			, ext nvarchar(250)
			, file_nm_wo_ext nvarchar(1000)
			, root_path nvarchar(250)
			, crt_ts datetime
			, crt_ts_utc datetime
			, last_write_ts datetime
			, last_write_ts_utc datetime
			, is_read_only bit
			, file_size bigint
		)
		WITH EXECUTE AS CALLER
	AS
	EXTERNAL name [SQLETL_EDIS].[EDIS.cFileTasks].[get_files]

	GO

	-- ========================================================================================================================================
	-- Define Functions
	
	--{INSTALL_STEP}Create function fn_check_perm{/INSTALL_STEP}

	CREATE FUNCTION EDIS.fn_check_perm
	(
		@server_id NVARCHAR(50)
	)
	
	RETURNS BIT
	WITH ENCRYPTION
    AS
    BEGIN

		-- 1 means has permissions, 0 means does not

		-- sysadmins get green light
		IF IS_SRVROLEMEMBER('sysadmin') = 1 RETURN 1

		-- db owner gets green light
		IF IS_MEMBER('db_owner') = 1 RETURN 1

		-- if this server is not in the permissions table, no contraint was put on it, so we are good to go
		IF NOT EXISTS(SELECT * FROM EDIS.lkup_server_id_perm WITH (NOLOCK) WHERE server_id = @server_id) RETURN 1;

		-- Does the individual user ID exist in the table?
		IF EXISTS(SELECT * FROM EDIS.lkup_server_id_perm WITH (NOLOCK) WHERE server_id = @server_id AND usr_id = SUSER_NAME()) RETURN 1

		-- Check for active directory group membership
		IF EXISTS(
			SELECT *
			FROM EDIS.lkup_server_id_perm WITH (NOLOCK)
			WHERE server_id = @server_id
				AND ISNULL(IS_MEMBER(usr_id),0) = 1
		) RETURN 1

		-- default
		RETURN 0

	END

	GO

	--{INSTALL_STEP}Create Function ifn_validate_qry{/INSTALL_STEP}


	create function EDIS.ifn_validate_qry
		(@src_qry nvarchar(max))
		Returns varchar(max)
		WITH ENCRYPTION
	as
		begin
			declare @sys_err_msg varchar(max) = (select top 1 error_message	
			from  sys.dm_exec_describe_first_result_set(@src_qry, NULL, 0)
			where error_message is not null
			)

			declare @fmt_err_msg varchar(max)

			if @sys_err_msg is not null
				begin
					declare @crlf char(2) = char(13)+char(10);

					set @fmt_err_msg = CONCAT(
						'The source query provided by parameter @src_qry for host server ['+@@servername+'] has a syntax issue. Below is the error statement',@crlf
						,'Error Message',@crlf
						,'-------------',@crlf,@crlf
						,@sys_err_msg
					)
						
						
					if @sys_err_msg like '%invalid object name%' 
						BEGIN
							set @fmt_err_msg += @crlf
							set @fmt_err_msg += 'When receiving an invalid object name error, please ensure tables and views referenced in the source query are fully qualified ie. [Database].[schema].[table].'
						END

					
				end

				return @fmt_err_msg


		end

	GO

	--{INSTALL_STEP}Create Function ifn_get_svc_config{/INSTALL_STEP}


	create function EDIS.ifn_get_svc_config
		 (@svc_id nvarchar(250))
		
		returns xml

		with execute as owner, encryption
	as
		BEGIN

			--declare @has_perm bit = 0

			---- sysadmins and db_owner get green light
			--IF (IS_SRVROLEMEMBER('sysadmin') = 1 OR IS_MEMBER('db_owner') = 1)
			--	set @has_perm = 1

			---- Does the individual user ID exist for permission on that service id?
			--IF EXISTS(SELECT * FROM EDIS.lkup_server_id_perm WITH (NOLOCK) WHERE server_id = @svc_id AND usr_id = SUSER_NAME()) set @has_perm = 1

			---- Check for active directory group membership
			--IF EXISTS(
			--	SELECT *
			--	FROM EDIS.lkup_server_id_perm WITH (NOLOCK)
			--	WHERE server_id = @svc_id
			--		AND ISNULL(IS_MEMBER(usr_id),0) = 1
			--) set @has_perm = 1

			

			declare @svc_config xml;

			--if @has_perm = 0
			--	BEGIN

			--		declare @not_authorized_msg varchar(max)
			--		declare @crlf char(2) = char(13)+char(10)

			--		set @not_authorized_msg = concat('**AUTHORIZATION ERROR**',@crlf
			--			,'Your User ID is not authorized to view the connection details',@crlf
			--			,'In order to view the connection properties, you need one of the following permissions:',@crlf
			--			,'[1] Be a sysadmin',@crlf
			--			,'[2] DB_owner on SSISDB',@crlf
			--			,'[3] Have explicit permission to the service id. See procedure EDIS.usp_config_svc_id_perm for details'
			--		)

			--		set @svc_config = (select cast(@not_authorized_msg as xml))
				
			--	END
			
			set @svc_config = (
	
				select convert(xml,DECRYPTBYKEYAUTOCERT(cert_id('SQLETL_EDIS_CERT'), null, service_config))
					from edis.lkup_service_id
					where service_id = @svc_id
				)
			;

			return @svc_config;

		END

	GO

	--{INSTALL_STEP}Create Proc usp_config_svc_id_perm{/INSTALL_STEP}

	CREATE PROC EDIS.usp_config_svc_id_perm
		 @svc_id nvarchar(255)
		,@usr_id nvarchar(255)
		,@action nvarchar(10)

		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- Copyright Notice

		declare @msg varchar(max)

		if @action not in ('INSERT','DELETE') 
			BEGIN
				raiserror('Parameter @action only accepts values ''INSERT'' and ''DELETE''', 16,16) with nowait
				return 16
			END

		if @action = 'INSERT'
			BEGIN
				IF NOT EXISTS(SELECT 1 FROM EDIS.lkup_server_id_perm WHERE server_id = @svc_id and usr_id = @usr_id)
					BEGIN
						INSERT EDIS.lkup_server_id_perm VALUES (@svc_id, @usr_id, getdate())
						set @msg = concat('User [',@usr_id,'] has been added successfully to Service ID [',@svc_id,']')
						print @msg
					END
				ELSE	
					BEGIN
						set @msg = concat('Service ID [',@svc_id,'] for User [',@usr_id,'] already exists in base table SSISDB.EDIS.lkup_server_id_perm. No action taken')
						print @msg
					END
			END
		ELSE
			BEGIN
				IF  EXISTS(SELECT 1 FROM EDIS.lkup_server_id_perm WHERE server_id = @svc_id and usr_id = @usr_id)
					BEGIN
						DELETE EDIS.lkup_server_id_perm WHERE server_id = @svc_id and usr_id = @usr_id
						set @msg = concat('User [',@usr_id,'] has been removed successfully from Service ID [',@svc_id,']')
						print @msg
					END
				ELSE	
					BEGIN
						set @msg = concat('Service ID [',@svc_id,'] for User [',@usr_id,'] does not exist in base table SSISDB.EDIS.lkup_server_id_perm. No action taken')
						print @msg
					END

			END


	END

	GO

	--{INSTALL_STEP}Create Proc isp_run_task_via_proxy{/INSTALL_STEP}

	CREATE PROC EDIS.isp_run_task_via_proxy 
		 @exec_id varchar(50)
		,@logging_level varchar(50)
		,@edis_exec_path varchar(1000)
		,@err_msg nvarchar(max) out
		WITH EXECUTE AS OWNER, ENCRYPTION
	AS
		SET NOCOUNT ON;

		declare @bin varbinary(128) = cast('$-___139ns~#@Fvnc9N@DEDIS_PROXY_CALLER$*%NQNCZGSG(DS)' as varbinary(128))
		set context_info @bin

		EXEC MSDB.dbo.isp_SQLETL_EDIS_run_task
			  @exec_id = @exec_id
			 ,@logging_level = @logging_level
			 ,@edis_exec_path = @edis_exec_path
			 ,@err_msg	= @err_msg out
		;


	;
	GO

	--{INSTALL_STEP}Sign Proc isp_run_task_via_proxy{/INSTALL_STEP}

	-- SIGN THIS
	ADD SIGNATURE TO EDIS.isp_run_task_via_proxy BY CERTIFICATE SQLETL_EDIS_ProxyCert
	WITH PASSWORD = '{PROXY_CERTIFICATE_PASSWORD}'

	GO

	--{INSTALL_STEP}Create Proc isp_get_sys_info{/INSTALL_STEP}

	CREATE PROC EDIS.isp_get_sys_info
		  @info_ind VARCHAR(250)
		, @info_arg_1 VARCHAR(1000) = NULL
        , @info_arg_2 VARCHAR(1000) = NULL
		, @res_msg		VARCHAR(MAX) OUT
        , @res BIT OUT
		WITH EXECUTE AS OWNER, ENCRYPTION
	AS
		SET NOCOUNT ON;
		EXEC MSDB.dbo.usp_SQLETL_EDIS_get_sys_info
			@info_ind = @info_ind, @info_arg_1 = @info_arg_1, @info_arg_2 = @info_arg_2
			,@res_msg = @res_msg OUT
            ,@res = @res OUT
        ;

	GO

	--{INSTALL_STEP}Sign Proc isp_get_sys_info{/INSTALL_STEP}

	ADD SIGNATURE TO EDIS.isp_get_sys_info BY CERTIFICATE SQLETL_EDIS_ProxyCert
	WITH PASSWORD = '{PROXY_CERTIFICATE_PASSWORD}'

	GO

	--{INSTALL_STEP}Create Proc isp_run_task{/INSTALL_STEP}

	CREATE PROCEDURE EDIS.[isp_run_task]
		   @args xml
		  ,@exec_id nvarchar(255) = null out
		 WITH ENCRYPTION
	AS
	BEGIN

		SET NOCOUNT ON;
		SET XACT_ABORT ON;
		
		-- Copyright Notice

		declare @crlf char(2) = char(13)+char(10);

		-- Can they run the task?
		if NOT (IS_SRVROLEMEMBER('sysadmin') = 1 or IS_MEMBER('EDIS_Role') = 1)
		begin
			DECLARE @pkg_access_msg varchar(max) = concat(
				 'Please Note: Your user id [',suser_name(),'] does not have access to execute EDIS stored procedures.',@crlf
				,'In order to execute EDIS stored procedures, you need to be added to the SSISDB Database Role "EDIS_Role"',@crlf
				,'using the SQL command below or be a member of the sysadmin role.',@crlf
				,'To add your user ID to SSISDB Database role "EDIS_Role", execute this SQL: ',@crlf,@crlf
				,'	USE SSISDB',@crlf
				,'	GO',@crlf
				,'	ALTER ROLE EDIS_Role ADD MEMBER [',suser_name(),']'
			)

			raiserror(@pkg_access_msg,16,16) with nowait;
			return 16

		end

		-- SQL Login Check
		IF EXISTS(select * from sys.server_principals where name = suser_name() and type_desc = 'SQL_LOGIN')
			begin
				declare @ms_sql_login_err_msg varchar(8000) = concat(
					 'Note: SQL Login [',suser_name(),'] cannot run this program. Only Windows Logins are allowed to run the program.',char(13)+char(10)
					,'This is a Microsoft SSISDB security restriction.'
				)

				raiserror(@ms_sql_login_err_msg,16,16) with nowait
				return 16 
			end
    
		-- Check that caller is one of our stored procs
		declare @caller_auth nvarchar(250) = isnull((select   x.value('caller_auth[1]','nvarchar(250)')  from @args.nodes('/root') as t(x)),'')

		if @caller_auth <> 'MDDT_AUTH_CALLER_#x$^71'
			begin
				declare @caller_msg varchar(max) = 'isp_run_task is not able to be executed directly. Please use an approved procedure.'
				;
				raiserror(@caller_msg,16,16) with nowait
				return 16 
			end
              
		-- Get The EDIS Install ID
		Declare @install_id nvarchar(1000), @install_err_check bit

		-- edit 2/26/2018: removed license check. company closed :(

		set @install_id = 'PRO SITE LICENSE'; goto skip_license_check

		EXEC EDIS.isp_get_sys_info @info_ind = 'INSTALL_ID'
			,@res_msg = @install_id OUT
			,@res = @install_err_check OUT
		;

		IF @install_err_check = 0
			BEGIN
				RAISERROR(@install_id,16,16) WITH NOWAIT
				RETURN 16
			END

		skip_license_check:

		declare @use_32_bit_runtime bit = isnull((select x.value('use_32_bit_runtime[1]','bit') from @args.nodes('/root') as t(x)),0)

		DECLARE @edis_exec_path nvarchar(1000) = EDIS.ifn_get_dts_bin_path(@use_32_bit_runtime)
		--set @edis_exec_path += 'MDDataTechEDIS.exe'
		set @edis_exec_path += 'SQLETL_EDIS.exe'

		--print @edis_exec_path

		-- =========================================================================================================================================
		-- Grab Task and Sub task and route

		-- Set Exec ID
		--declare @exec_id nvarchar(255) = cast(newid() as nvarchar(255))

		set @exec_id = cast(newid() as nvarchar(255))

		declare @prim_task nvarchar(250)= upper((select x.value('primary_task[1]','nvarchar(250)') from @args.nodes('/root') as t(x)))
		declare @sub_task nvarchar(250)= upper((select x.value('sub_task[1]','nvarchar(250)') from @args.nodes('/root') as t(x)))

		declare @use_clr bit = 0
		if @prim_task in ('file_task') -- and @sub_task in ('delete_files','create_dir','delete_dir','get_file_list')
			SET @use_clr = 1
		else if @prim_task = 'web_task' and @sub_task = 'web_req'
			begin
				-- if no tls version was declared, we can use clr
				declare @tls nvarchar(250) = isnull((select x.value('tls_version[1]','nvarchar(250)') from @args.nodes('/root') as t(x)),'')
				if isnull(@tls,'') = '' 
					set @use_clr = 1
			end
		else if @prim_task = 'admin_task'
			set @use_clr = 1
		;

		-- ------------------------------------------------------------------------------------------------------------------------------------------
		-- Load Vars to temp table

		if object_id('tempdb..#edis') is not null drop table #edis;

		create table #edis (itemID varchar(250), itemVal varchar(max));

		insert #edis (itemID, itemVal)
		SELECT
			ItemID = C.value('local-name(.)', 'varchar(250)'),
			ItemVal = C.value('(.)[1]', 'varchar(max)') 
		FROM @args.nodes('/root/*') AS T(C)
		;

		-- remove unecessary params
		delete #edis
		where itemId = 'caller_auth'
		;

		-- Encrypt Sensitive
		update #edis
			set itemVal = ENCRYPTBYPASSPHRASE(cast(@exec_id as varchar(50)),itemVal)
		WHERE itemId in ('src_cn_str','dest_cn_str','cn_str','ftp_uid','ftp_pwd','svc_uid','svc_pwd', 'client_secrets', 'proxy_svc_uid', 'proxy_svc_pwd')
		;


		-- Load additional Vars
		insert #edis values ('install_id', @install_id);


		-- load sql server version
		insert #edis
		SELECT 'SQL_SERVER_VERSION'
			,CASE 
				 WHEN CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) like '8%' THEN 80
				 WHEN CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) like '9%' THEN 90
				 WHEN CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) like '10.0%' THEN 100
				 WHEN CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) like '10.5%' THEN 100
				 WHEN CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) like '11%' THEN 110
				 WHEN CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) like '12%' THEN 120
				 WHEN CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) like '13%' THEN 130
				 WHEN CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) like '14%' THEN 140
				 ELSE 0
			  END
		;
		
		-- ====================================================================================================================
		-- Check for Debugging and Logging flags

		-- default
		declare @logging_level nvarchar(30) = 'none'

		-- debugging
		if charindex('edis_debug_mode_on',cast(context_info() as varchar(128))) > 0 
			begin
				select @args as EDIS_params_xml
				return
			end

		else if charindex('edis_logging_verbose',cast(context_info() as varchar(128))) > 0 
			BEGIN
				set @logging_level = 'verbose';
			END

		INSERT #edis VALUES ('LOGGING_LEVEL', @logging_level)

		-- ----------------------------------------------------------------------------------------------------------------------------
		-- Load the Audit Table

		declare @task_start_ts datetime2 = sysdatetime()

		declare @task_action nvarchar(250);

		set @task_action = upper(@prim_task)
		if @sub_task is not null set @task_action += concat(' - ', upper(@sub_task))
		;

		declare @src_sys nvarchar(250), @dest_sys nvarchar(250), @src_qry nvarchar(max), @dest_tbl nvarchar(250)
			,@file_path nvarchar(1000), @ftp_id nvarchar(250), @ftp_srvr nvarchar(250), @ftp_dir nvarchar(1000)
			,@ftp_folder_nm nvarchar(250), @local_dir nvarchar(1000), @file_crit nvarchar(250), @file_list nvarchar(4000)
			,@svc_id nvarchar(250), @url nvarchar(4000), @process_nm nvarchar(4000), @process_args nvarchar(max), @soap_envelope nvarchar(max)
		;

		select 
			 @src_sys			= x.value('src_sys_nm[1]','nvarchar(250)') 
			,@dest_sys			= x.value('dest_sys_nm[1]','nvarchar(250)')
			,@src_qry			= x.value('src_qry[1]','nvarchar(max)')
			,@dest_tbl			= x.value('dest_tbl[1]','nvarchar(250)')
			,@file_path			= nullif(x.value('file_path[1]','nvarchar(1000)'),'')
			,@ftp_id			= x.value('ftp_id[1]','nvarchar(250)') 
			,@ftp_srvr			= x.value('ftp_srvr[1]','nvarchar(1000)')
			,@ftp_dir			= x.value('ftp_dir[1]','nvarchar(4000)')
			,@ftp_folder_nm		= x.value('folder_nm[1]','nvarchar(250)')
			,@local_dir			= x.value('local_dir[1]', 'nvarchar(1000)')
			,@file_crit			= x.value('file_crit[1]', 'nvarchar(1000)')
			,@file_list			= x.value('file_list_usr[1]', 'nvarchar(4000)')
			,@svc_id			= x.value('svc_id[1]','nvarchar(250)')
			,@url				= x.value('url[1]','nvarchar(4000)')
			,@process_nm		= x.value('process_nm[1]','nvarchar(4000)')
			,@process_args		= x.value('args[1]','nvarchar(max)')
			,@soap_envelope		= x.value('soap_envelope[1]','nvarchar(max)')
		from @args.nodes('/root') as t(x)

		-- get scalar uses different var
		if @src_qry is null
			begin
				set @src_qry = (select x.value('sql_qry[1]','nvarchar(max)') from @args.nodes('/root') as t(x))
			end
		-- sql cmd uses different var
		if @src_qry is null
			begin
				set @src_qry = (select x.value('sql_cmd[1]','nvarchar(max)') from @args.nodes('/root') as t(x))
			end

		set @src_qry = nullif(ltrim(rtrim(@src_qry)),'')

		if @local_dir is null 
			begin
				set @local_dir = (select x.value('folder_path[1]','nvarchar(1000)') from @args.nodes('/root') as t(x))
			end

		set @file_list = nullif(ltrim(rtrim(@file_list)),'')

		if @sub_task = 'RENAME_FILE'
			begin
				declare @curr_path nvarchar(1000) = (select x.value('curr_file_path[1]','nvarchar(1000)') from @args.nodes('/root') as t(x))
				declare @new_path nvarchar(1000) = (select x.value('new_file_path[1]','nvarchar(1000)') from @args.nodes('/root') as t(x))
				set @file_list = concat(@curr_path,' > ', @new_path)
			end

		declare @ip_adrs nvarchar(250) = cast(CONNECTIONPROPERTY('client_net_address') as nvarchar(250))

		if @sub_task = 'RUN_SQL_CMD' set @task_action = 'RUN_SQL_CMD';
		if @sub_task = 'GET_SCALAR' set @task_action = 'GET_SCALAR';


		-- Load Audit Table
		insert EDIS.etl_audit (exec_id, task_action, task_start_ts, usr_login_id, usr_machine_nm, ip_adrs
		,src_sys, dest_sys, src_qry, dest_tbl, file_path, ftp_id, ftp_srvr, ftp_dir, ftp_folder_nm, local_dir, file_crit, file_list
		,svc_id, [url], process_nm, process_args, soap_envelope
		)
		values (@exec_id, @task_action, @task_start_ts, SUSER_NAME(), HOST_NAME(), @ip_adrs
			,@src_sys, @dest_sys, @src_qry, @dest_tbl, @file_path
			,@ftp_id, @ftp_srvr, @ftp_dir, @ftp_folder_nm, @local_dir, @file_crit, @file_list
			,@svc_id, @url, @process_nm, @process_args, @soap_envelope
		)
		option (maxdop 1)
		;         

		-- ----------------------------------------------------------------------------------------------------------------------------
		-- Run the Task

		-- check if this is going proxy execution
		declare @using_proxy bit = 0
		if exists(select 1 from #edis where itemId = 'proxy_id' and isnull(ltrim(rtrim(itemVal)),'') <> '') 
			set @using_proxy = 1
		;

		-- Localize data to global temp if we are going via proxy or ssis
		if @using_proxy = 1 OR @use_clr = 0
			BEGIN
				INSERT SSISDB.EDIS.util_task_params (exec_id, itemID, itemVal)
				SELECT @exec_id, itemID, itemVal
				from #edis
				;
				--exec('SELECT * INTO [##'+@exec_id+'] FROM #edis')
			END

		-- SSIS execution prep
		IF (@use_clr = 0 and @using_proxy = 0)
			BEGIN
				
				--DECLARE @x int;

				--goto skipSSISDB;

				declare @ssis_execution_id bigint

				declare @queue_id bigint
				insert EDIS.util_task_sync (entry_id) values (1);
				set @queue_id = SCOPE_IDENTITY();

				declare @counter int = 1
				while exists(select 1 from EDIS.util_task_sync with (nolock) where queue_id < @queue_id)
					begin
						waitfor delay '00:00:01';
						set @counter +=1;
						-- delay no more than 2 min
						if @counter >= (60 * 2) break
					end

				exec SSISDB.catalog.create_execution 
					 @folder_name		= 'SQLETL.COM'
					,@project_name		= 'EDIS'
					,@package_name		= 'Launcher.dtsx'
					,@execution_id		= @ssis_execution_id out
					,@use32bitruntime	= @use_32_bit_runtime
					
				;   

				-- remove from queue (flush any that were never removed as well)
				delete EDIS.util_task_sync where queue_id <= @queue_id

				-- set ssis package params
				declare @instance nvarchar(255) = cast(@@servername as nvarchar(255))
				declare @ssisdb_execution_id_str nvarchar(50) = cast(@ssis_execution_id as nvarchar(50))
				exec catalog.set_execution_parameter_value @ssis_execution_id, @object_type = 30, @parameter_name = N'mssql_inst', @parameter_value = @instance;
				exec catalog.set_execution_parameter_value @ssis_execution_id, @object_type = 30, @parameter_name = N'exec_id', @parameter_value = @exec_id;
				exec catalog.set_execution_parameter_value @ssis_execution_id, @object_type = 30, @parameter_name = N'edis_logging_level', @parameter_value = @logging_level;
				exec catalog.set_execution_parameter_value @ssis_execution_id, @object_type = 30, @parameter_name = N'edis_exec_path', @parameter_value = @edis_exec_path;
				exec catalog.set_execution_parameter_value @ssis_execution_id, @object_type = 30, @parameter_name = N'ssisdb_execution_id', @parameter_value = @ssisdb_execution_id_str;

				exec catalog.set_execution_parameter_value @ssis_execution_id, @object_type = 50, @parameter_name = N'LOGGING_LEVEL', @parameter_value = 1;
				exec catalog.set_execution_parameter_value @ssis_execution_id, @object_type = 50, @parameter_name = N'SYNCHRONIZED', @parameter_value = 1;  

			END

		
		--skipSSISDB:

		-- Run the task
		DECLARE @err_msg nvarchar(max)



		IF @using_proxy = 1
			BEGIN
				drop table #edis; 
				EXEC EDIS.isp_run_task_via_proxy 
					  @exec_id = @exec_id
					, @logging_level = @logging_level
					, @edis_exec_path = @edis_exec_path
					, @err_msg = @err_msg out
			END
		else if @use_clr = 0
			BEGIN
				drop table #edis; 

				--EXEC EDIS.isp_run_edis_exe 
				--	 @edis_path = @edis_exec_path
				--	,@mssql_inst = @@servername
				--	,@exec_id = @exec_id
				--	,@logging_level = @logging_level
				--;
				

				EXEC catalog.start_execution @ssis_execution_id; 

			END
		ELSE
			BEGIN -- CLR RUN
				EXEC EDIS.isp_run_asm_proc_internal @exec_id
			END
		               
		-- =======================================================================================================================================================================
		-- Get Results

		DECLARE @result bit = 1
		if @use_clr = 1
			BEGIN
				IF exists(select * from EDIS.etl_audit WITH (NOLOCK) where exec_id = @exec_id and err_msg is not null)
					BEGIN
						SET @err_msg = (select err_msg from EDIS.etl_audit WITH (NOLOCK) where exec_id = @exec_id)
						set @result = 0
					END
			END
		ELSE if @using_proxy = 1
			BEGIN
				-- did we log it?
				IF exists(select * from EDIS.etl_audit WITH (NOLOCK) where exec_id = @exec_id and err_msg is not null)
					BEGIN
						set @err_msg = (select err_msg from EDIS.etl_audit WITH (NOLOCK) where exec_id = @exec_id)
						set @result = 0
					END
				-- error message was passed back from job agent
				else if @err_msg is not null
					BEGIN
						set @err_msg = @err_msg
						set @result = 0
					END
			
			END
		ELSE
			BEGIN
				IF (select status from catalog.executions where execution_id = @ssis_execution_id) = 4 
					BEGIN
						set @result = 0
						set @err_msg = (select err_msg from EDIS.etl_audit WITH (NOLOCK) where exec_id = @exec_id)

						if @err_msg is null
							begin
								select @err_msg = coalesce(@err_msg+'','')+ cast(message_time as varchar(50))+' ->	'+replace(message, 'Script Task:Error:','') + char(13)+char(10)
								from catalog.event_messages
								where operation_id = @ssis_execution_id  and event_name = 'OnError'
									and message is not null
									and message not in ('Script Task:Error: The script returned a failure result.')
								order by message_time
							end
					END
			END

		-- -----------------------------------------------------------------------------------------------
		-- Log Finish

		declare @task_end_ts datetime2 = sysdatetime()
		update EDIS.etl_audit
			set 
				  task_end_ts = @task_end_ts
				, task_duration = DATEDIFF(second, @task_start_ts, @task_end_ts)
				, task_run_outcome = CASE WHEN @result = 0 then 'FAILURE' else 'SUCCESS' END
				, err_msg = case when @result = 1 then null else @err_msg END
		WHERE exec_id = @exec_id
		OPTION (MAXDOP 1)
		;

		-- ---------------------------------------------------------------------------------------------------------------------
		-- Raise the error if needed

		declare @err_msg_to_report nvarchar(max)
		if @err_msg is not null
			BEGIN
				set @err_msg_to_report = concat(@task_action, ' failed with the following information:',char(13)+char(10),@err_msg)
				set @err_msg_to_report += concat(char(13)+char(10),'For more information about this error event, run this query: SELECT * FROM SSISDB.EDIS.etl_audit where exec_id = ''',@exec_id,'''')
				RAISERROR(@err_msg_to_report,16,16) with nowait;
			END
		           
				   
		-- Clean up Params
		DELETE p
		from SSISDB.EDIS.util_task_params as p
			inner join SSISDB.EDIS.etl_audit as a
				on p.exec_id = a.exec_id
		WHERE (
			    a.task_end_ts is not NULL
				-- remove old param recs greater than 2 days
				OR DATEDIFF(day,a.task_start_ts, GETDATE()) >=2
			)
		option (maxDOP 1)
		;

		-- return error code
		IF @err_msg IS NOT NULL
			RETURN 16
		ELSE
			RETURN 0 -- isp_run_task
		;
				      
	END

	GO
	--{INSTALL_STEP}Create Proc isp_log_task{/INSTALL_STEP}

	CREATE PROC EDIS.isp_log_task
		  @exec_id varchar(50)
		 ,@log_type varchar(10)
		 ,@msg_hdr varchar(250)
		 ,@msg_dtl varchar(max)
		WITH ENCRYPTION
		AS
			SET NOCOUNT ON;

			INSERT EDIS.task_logger
				(exec_id, crt_ts, log_type, msg_hdr, msg_dtl)
			VALUES (@exec_id, sysdatetime(), @log_type, @msg_hdr, @msg_dtl)

	GO

	--{INSTALL_STEP}Create Proc isp_log_info{/INSTALL_STEP}


	CREATE PROC EDIS.isp_log_info
		 @exec_id varchar(250)
		,@action varchar(50)
		,@val nvarchar(max)
		WITH ENCRYPTION
	as
		set nocount on;

		if @action = 'rows_tsfr'
			BEGIN
				UPDATE EDIS.etl_audit
					set rows_tsfr = cast(@val as bigint)
				where exec_id = @exec_id
				option(maxdop 1)
			END
		else if @action = 'err_msg'
			BEGIN
				UPDATE EDIS.etl_audit
					set err_msg = @val
				where exec_id = @exec_id
				option(maxdop 1)
			END
		else if @action = 'aborted'
			BEGIN
				UPDATE EDIS.etl_audit
					set task_end_ts = sysdatetime(), task_run_outcome = 'ABORTED'
				where exec_id = @exec_id
				option(maxdop 1)
			END
		else if @action = 'heartbeat'
			BEGIN
				UPDATE EDIS.etl_audit
					set sys_hb_ts = sysdatetime()
				where exec_id = @exec_id
				option(maxdop 1)
			END
		else if @action = 'info_msgs'
			BEGIN
				UPDATE EDIS.etl_audit
					set info_msgs = TRY_CONVERT(XML, @val)
				where exec_id = @exec_id
				option(maxdop 1)
			END

	GO

	--{INSTALL_STEP}Create Proc usp_replace_file_content{/INSTALL_STEP}

	CREATE PROC EDIS.usp_replace_file_content
		 @file_path nvarchar(1000)
		,@orig_string nvarchar(1000) 
		,@replace_string  nvarchar(128) 
		,@backup_file_nm nvarchar(255) = null

		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		--	-- Copyright Notice

		if EDIS.ufn_does_file_exist(@file_path) = 0
			BEGIN
				raiserror('File [%s] does not exist.', 16, 16, @file_path) with nowait;
				return 16
			END
		

		declare @xml xml = (
			select 
				  @file_path as file_path
				, @orig_string as orig_string
				, @replace_string as replace_string
				, isnull(@backup_file_nm,'') as backup_file_nm
				, 'file_task' as primary_task
				, 'replace_content' as sub_task
				,'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

	    
		exec EDIS.isp_run_task @xml
    
	END

	GO

	--{INSTALL_STEP}Create Proc usp_delete_loc_files{/INSTALL_STEP}

	CREATE PROC EDIS.usp_delete_loc_files
		 @folder_path nvarchar(1000)
		,@file_crit nvarchar(1000) = ''
		,@file_list_tbl  nvarchar(128) = ''

		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
	--	-- Copyright Notice

		declare @file_list_usr nvarchar(max)

		if object_id('tempdb..'+@file_list_tbl) is not null
			begin
				declare @sql_file_list nvarchar(max) = 'select @file_list_usr = isnull(@file_list_usr+'';'','''')+file_nm from '+@file_list_tbl
				exec sp_executesql @sql_file_list, N'@file_list_usr nvarchar(max) out', @file_list_usr = @file_list_usr out
		
			end

		if @file_list_usr is null set @file_list_usr = ''

		declare @xml xml = (
			select @folder_path as folder_path, @file_crit as file_crit
				, @file_list_usr as 'file_list_usr'
				, 'file_task' as primary_task, 'delete_files' as sub_task
				,'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

	    
		exec EDIS.isp_run_task @xml
    
	END

	GO
	--{INSTALL_STEP}Create Proc usp_watch_for_file{/INSTALL_STEP}

	CREATE PROC EDIS.usp_watch_for_file
		 @folder_path nvarchar(1000)
		,@file_crit nvarchar(1000) = ''
		,@max_timeout int = 2100000000
		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- Copyright Notice

		declare @xml xml = (
			select @folder_path as folder_path
				, @file_crit as file_crit
				, 'file_task' as primary_task, 'watch_for_file' as sub_task
				, isnull(@max_timeout,2100000000) as max_timeout
				,'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

	    
		exec EDIS.isp_run_task @xml
    
	END

	GO

	--{INSTALL_STEP}Create Proc usp_create_loc_dir{/INSTALL_STEP}

	CREATE procedure EDIS.usp_create_loc_dir
		 @folder_path nvarchar(1000)
		--WITH Encryption
	AS

	EXTERNAL NAME [SQLETL_EDIS].[EDIS.cFileTasks].[create_loc_dir]

	GO

	ADD SIGNATURE TO EDIS.usp_create_loc_dir BY CERTIFICATE SQLETL_EDIS_ProxyCert
	WITH PASSWORD = '{PROXY_CERTIFICATE_PASSWORD}'

	GO

	--{INSTALL_STEP}Create Proc usp_delete_loc_dir{/INSTALL_STEP}

	CREATE procedure EDIS.usp_delete_loc_dir
		 @folder_path nvarchar(1000)
		--WITH Encryption
	AS

	EXTERNAL NAME [SQLETL_EDIS].[EDIS.cFileTasks].[delete_loc_dir]

	GO

	ADD SIGNATURE TO EDIS.usp_delete_loc_dir BY CERTIFICATE SQLETL_EDIS_ProxyCert
	WITH PASSWORD = '{PROXY_CERTIFICATE_PASSWORD}'

	GO

	--{INSTALL_STEP}Create Proc usp_ftp_create_dir{/INSTALL_STEP}

	CREATE PROCEDURE EDIS.usp_ftp_create_dir
		 @ftp_id nvarchar(250)
		,@ftp_srvr nvarchar(1000)
		,@ftp_dir nvarchar(4000)
		,@folder_nm nvarchar(250)
		,@use_ssh bit = 0
		,@use_ssl bit = 0
		,@use_passive bit = 1
		,@port_nbr int = 0
		WITH ENCRYPTION
	AS
	BEGIN    
		SET NOCOUNT ON;
		-- Copyright Notice

		IF NOT EXISTS(SELECT 1 FROM EDIS.lkup_service_id where service_id = @ftp_id)
			BEGIN
				RAISERROR('param @ftp_id with value [%s] does not exist. Please see task EDIS.usp_config_ftp_id to create an FTP ID', 16,16,@ftp_id) with nowait;
				return 16;
			END

		if EDIS.fn_check_perm(@ftp_id) = 0
			begin
				DECLARE @lock_msg VARCHAR(MAX) = 
				'Service ID ['+@ftp_id+'] has been locked by an administrator. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'To use this Service ID, you will need an administrator to run the SQL Command below '
				SET @lock_msg += 'with the @usr_id parameter set as a global group or database role that you are a member of. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'You can also set the @usr_id parameter as your individual ID as well ['+SUSER_NAME()+']:'+CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)
				SET @lock_msg += 'EXEC SSISDB.EDIS.usp_config_svc_id_perm @svc_id = '''+@ftp_id+''''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@usr_id = ''DOMAIN\YOUR_GLOBAL_GROUP OR DATABASE ROLE OR YOUR USER ID'''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@action = ''INSERT'''


				RAISERROR(@lock_msg,16,16) WITH NOWAIT

				--DECLARE @access_msg VARCHAR(8000) = 'ID [%s] has been locked by an administrator. Please contact them to obtain access.'
				--RAISERROR(@access_msg,16,16,@ftp_id) WITH NOWAIT
				RETURN 16
			end
    
		select @use_ssl = isnull(@use_ssl,0), @use_passive = isnull(@use_passive,1), @use_ssh = isnull(@use_ssh,0)

		declare @ftp_uid nvarchar(4000), @ftp_pwd nvarchar(4000)

		declare @config xml = EDIS.ifn_get_svc_config(@ftp_id)

		set @ftp_uid = @config.value('(/EDIS_SVC_CONFIG/service_user_id)[1]','nvarchar(250)')
		set @ftp_pwd = @config.value('(/EDIS_SVC_CONFIG/service_password)[1]','nvarchar(250)')

		declare @xml xml = (
			select 
				 @ftp_srvr as ftp_srvr
				,@ftp_id as ftp_id
				,@ftp_dir as ftp_dir
				,@folder_nm as folder_nm
				,@ftp_uid as ftp_uid
				,@ftp_pwd as ftp_pwd
				,@@servername as mssql_inst
				,'ftp_task' as primary_task
				,'create_dir' as sub_task
				,@use_ssh as use_ssh
				,@use_ssl as use_ssl
				,@use_passive as use_passive
				,isnull(@port_nbr,0) as ftp_port_nbr
				,'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path ('root')

		)
    
		exec EDIS.isp_run_task @xml
    
	END

	GO

	--{INSTALL_STEP}Create Proc usp_ftp_delete_files{/INSTALL_STEP}

	CREATE PROCEDURE EDIS.usp_ftp_delete_files
		 @ftp_id nvarchar(250)
		,@ftp_srvr nvarchar(1000)
		,@ftp_dir nvarchar(4000)
		,@file_crit nvarchar(1000) = ''
		,@file_list_tbl  nvarchar(128) = ''
		,@use_ssh bit = 0
		,@use_ssl bit = 0
		,@use_passive bit = 1
		,@port_nbr int = 0
		WITH ENCRYPTION

	AS
	BEGIN
		SET NOCOUNT ON;
		-- Copyright Notice
		
		IF NOT EXISTS(SELECT 1 FROM EDIS.lkup_service_id where service_id = @ftp_id)
			BEGIN
				RAISERROR('param @ftp_id with value [%s] does not exist. Please see task EDIS.usp_config_ftp_id to create an FTP ID', 16,16,@ftp_id) with nowait;
				return 16;
			END

		if EDIS.fn_check_perm(@ftp_id) = 0
			begin
				DECLARE @lock_msg VARCHAR(MAX) = 
				'Service ID ['+@ftp_id+'] has been locked by an administrator. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'To use this Service ID, you will need an administrator to run the SQL Command below '
				SET @lock_msg += 'with the @usr_id parameter set as a global group or database role that you are a member of. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'You can also set the @usr_id parameter as your individual ID as well ['+SUSER_NAME()+']:'+CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)
				SET @lock_msg += 'EXEC SSISDB.EDIS.usp_config_svc_id_perm @svc_id = '''+@ftp_id+''''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@usr_id = ''DOMAIN\YOUR_GLOBAL_GROUP OR DATABASE ROLE OR YOUR USER ID'''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@action = ''INSERT'''


				RAISERROR(@lock_msg,16,16) WITH NOWAIT

				--DECLARE @access_msg VARCHAR(8000) = 'ID [%s] has been locked by an administrator. Please contact them to obtain access.'
				--RAISERROR(@access_msg,16,16,@ftp_id) WITH NOWAIT
				RETURN 16
			end

		-- update defaults if shell proc forces them to null
		select @file_crit = isnull(@file_crit,''),@use_ssl = isnull(@use_ssl,0), @use_passive = isnull(@use_passive,1), @use_ssh = isnull(@use_ssh,0)

		declare @ftp_uid nvarchar(4000), @ftp_pwd nvarchar(4000)

		declare @config xml = EDIS.ifn_get_svc_config(@ftp_id)

		set @ftp_uid = @config.value('(/EDIS_SVC_CONFIG/service_user_id)[1]','nvarchar(250)')
		set @ftp_pwd = @config.value('(/EDIS_SVC_CONFIG/service_password)[1]','nvarchar(250)')
    
		declare @file_list_usr nvarchar(max)

		if object_id('tempdb..'+@file_list_tbl) is not null
			begin
				declare @sql_file_list nvarchar(max) = 'select @file_list_usr = isnull(@file_list_usr+'';'','''')+file_nm from '+@file_list_tbl
				exec sp_executesql @sql_file_list, N'@file_list_usr nvarchar(max) out', @file_list_usr = @file_list_usr out
			end

		if @file_list_usr is null set @file_list_usr = ''

		declare @xml xml = (
			select 
				 @ftp_srvr as ftp_srvr
				,@ftp_id as ftp_id
				,@ftp_dir as ftp_dir
				,@file_crit as file_crit
				,@file_list_usr as file_list_usr
				,@ftp_uid as ftp_uid
				,@ftp_pwd as ftp_pwd
				,@@servername as mssql_inst
				,'ftp_task' as primary_task
				,'delete_files' as sub_task
				,@use_ssh as use_ssh
				,@use_ssl as use_ssl
				,@use_passive as use_passive
				,isnull(@port_nbr,0) as ftp_port_nbr
				,'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path ('root')

		)
   
		exec EDIS.isp_run_task @xml
 

	END
	
	GO

	--{INSTALL_STEP}Create Proc usp_ftp_download_files{/INSTALL_STEP}

	CREATE PROCEDURE EDIS.usp_ftp_download_files
		 @ftp_id nvarchar(250)
		,@ftp_srvr nvarchar(1000)
		,@ftp_dir nvarchar(4000)
		,@local_dir nvarchar(1000)
		,@file_crit nvarchar(1000) = ''
		,@file_list_tbl  nvarchar(128) = ''
		,@use_ssh bit = 0
		,@use_ssl bit = 0
		,@use_passive bit = 1
		,@port_nbr int = 0
		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- Copyright Notice

		IF NOT EXISTS(SELECT 1 FROM EDIS.lkup_service_id where service_id = @ftp_id)
			BEGIN
				RAISERROR('param @ftp_id with value [%s] does not exist. Please see task EDIS.usp_config_ftp_id to create an FTP ID', 16,16,@ftp_id) with nowait;
				return 16;
			END

		if EDIS.fn_check_perm(@ftp_id) = 0
			begin
				DECLARE @lock_msg VARCHAR(MAX) = 
				'Service ID ['+@ftp_id+'] has been locked by an administrator. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'To use this Service ID, you will need an administrator to run the SQL Command below '
				SET @lock_msg += 'with the @usr_id parameter set as a global group or database role that you are a member of. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'You can also set the @usr_id parameter as your individual ID as well ['+SUSER_NAME()+']:'+CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)
				SET @lock_msg += 'EXEC SSISDB.EDIS.usp_config_svc_id_perm @svc_id = '''+@ftp_id+''''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@usr_id = ''DOMAIN\YOUR_GLOBAL_GROUP OR DATABASE ROLE OR YOUR USER ID'''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@action = ''INSERT'''


				RAISERROR(@lock_msg,16,16) WITH NOWAIT
				--DECLARE @access_msg VARCHAR(8000) = 'ID [%s] has been locked by an administrator. Please contact them to obtain access.'
				--RAISERROR(@access_msg,16,16,@ftp_id) WITH NOWAIT
				RETURN 16
			end

		-- update defaults if shell proc forces them to null
		select @file_crit = isnull(@file_crit,''), @use_ssl = isnull(@use_ssl,0), @use_passive = isnull(@use_passive,1), @use_ssh = isnull(@use_ssh,0)

		declare @ftp_uid nvarchar(4000), @ftp_pwd nvarchar(4000)
    
		declare @config xml = EDIS.ifn_get_svc_config(@ftp_id)

		set @ftp_uid = @config.value('(/EDIS_SVC_CONFIG/service_user_id)[1]','nvarchar(250)')
		set @ftp_pwd = @config.value('(/EDIS_SVC_CONFIG/service_password)[1]','nvarchar(250)')

		declare @file_list_usr nvarchar(max)

		if object_id('tempdb..'+@file_list_tbl) is not null
			begin
				declare @sql_file_list nvarchar(max) = 'select @file_list_usr = isnull(@file_list_usr+'';'','''')+file_nm from '+@file_list_tbl
				exec sp_executesql @sql_file_list, N'@file_list_usr nvarchar(max) out', @file_list_usr = @file_list_usr out
			
			end

		if @file_list_usr is null set @file_list_usr = ''

		declare @xml xml = (
			select 
				 @ftp_srvr as ftp_srvr
				,@ftp_id as ftp_id
				,@ftp_dir as ftp_dir
				,@file_crit as file_crit
				,@file_list_usr as file_list_usr
				,@ftp_uid as ftp_uid
				,@ftp_pwd as ftp_pwd
				,@local_dir as local_dir
				,@@servername as mssql_inst
				,'ftp_task' as primary_task
				,'download_files' as sub_task
				,@use_ssh as use_ssh
				,@use_ssl as use_ssl
				,@use_passive as use_passive
				,isnull(@port_nbr,0) as ftp_port_nbr
				,'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path ('root')

		)

   
		exec EDIS.isp_run_task @xml

	END

	GO

	--{INSTALL_STEP}Create Proc usp_config_ftp_id{/INSTALL_STEP}

	create proc EDIS.usp_config_ftp_id
		 @ftp_id nvarchar(250)
		,@uid nvarchar(4000) = null
		,@pwd nvarchar(4000) = null

		WITH EXECUTE AS OWNER, ENCRYPTION
	as
	begin
		SET NOCOUNT ON;
		-- Copyright Notice

		set nocount on;

		declare @msg varchar(max)
		declare @crlf char(2) = char(13)+char(10);

		open symmetric key [SQLETL_EDIS_SKEY]
			decryption by certificate [SQLETL_EDIS_CERT]

			DECLARE @config varbinary(max) = ENCRYPTBYKEY(KEY_GUID('SQLETL_EDIS_SKEY'),CAST(CAST((SELECT 
						    'FTP_CONN' AS service_type
							,@uid as service_user_id
							,@pwd as service_password
						FOR XML PATH ('EDIS_SVC_CONFIG')
					) AS XML) as Nvarchar(max)))
			;

		close symmetric key [SQLETL_EDIS_SKEY];

		if not exists(select 1 from EDIS.lkup_service_id where upper(service_id) = upper(@ftp_id))
			begin

				INSERT EDIS.lkup_service_id (service_id, last_upd_ts, service_type, service_config)

				SELECT @ftp_id as service_id, getdate() as last_upd_ts
					,'FTP_CONN' as service_type
					,@config

				set @msg = concat('FTP Service ID [',upper(@ftp_id),'] added successfully!')
			end
		else
			begin

				UPDATE EDIS.lkup_service_id
					set service_type = 'FTP_CONN', last_upd_ts = getdate()
					,service_config = @config
				WHERE service_id = @ftp_id

				set @msg = concat('FTP Service ID [',upper(@ftp_id),'] updated successfully!')
			end

		
		print @msg

	end

	GO

	--{INSTALL_STEP}Create Proc usp_config_web_svc_id{/INSTALL_STEP}

	create proc EDIS.usp_config_web_svc_id
		 @svc_id nvarchar(250)
		,@uid nvarchar(4000) = null
		,@pwd nvarchar(4000) = null

		WITH EXECUTE AS OWNER, ENCRYPTION
	as
	begin
		SET NOCOUNT ON;
		-- Copyright Notice

		set nocount on;

		declare @msg varchar(max)
		declare @crlf char(2) = char(13)+char(10);

		open symmetric key [SQLETL_EDIS_SKEY]
			decryption by certificate [SQLETL_EDIS_CERT]

			DECLARE @config varbinary(max) = ENCRYPTBYKEY(KEY_GUID('SQLETL_EDIS_SKEY'),CAST(CAST((SELECT 
						    'WEB_SERVICE' AS service_type
							,@uid as service_user_id
							,@pwd as service_password
						FOR XML PATH ('EDIS_SVC_CONFIG')
					) AS XML) as Nvarchar(max)))
			;

		close symmetric key [SQLETL_EDIS_SKEY];

		if not exists(select 1 from EDIS.lkup_service_id where upper(service_id) = upper(@svc_id))
			begin

				INSERT EDIS.lkup_service_id (service_id, last_upd_ts, service_type, service_config)

				SELECT @svc_id as service_id, getdate() as last_upd_ts
					,'WEB_SERVICE' as service_type
					,@config

				set @msg = concat('Web Service ID [',upper(@svc_id),'] added successfully!')
			end
		else
			begin

				UPDATE EDIS.lkup_service_id
					set service_type = 'WEB_SERVICE', last_upd_ts = getdate()
					,service_config = @config
				WHERE service_id = @svc_id

				set @msg = concat('Web Service ID [',upper(@svc_id),'] updated successfully!')
			end

		
		print @msg

	end

	GO

	--{INSTALL_STEP}Create Proc usp_bigquery_update_svc_id{/INSTALL_STEP}

	CREATE proc EDIS.usp_config_bigquery_id
		 @bq_svc_id nvarchar (250)
		,@project_nm nvarchar(128)
		,@project_id nvarchar(128)
		,@creds_file_path nvarchar(1000)
		WITH EXECUTE AS OWNER, ENCRYPTION
	as
	set nocount on;
	-- Copyright Notice

	-- ---------------------------------------------------------------------------------
	-- grab creds

	if EDIS.ufn_does_file_exist(@creds_file_path) = 0
		BEGIN
			RAISERROR('File [%s] does not exist',16,16,@creds_file_path) with Nowait;
			return 16;
		END


	DECLARE @client_secrets NVARCHAR(MAX) = EDIS.ifn_read_file_to_str(@creds_file_path)

	DECLARE @msg varchar(max)

	-- -----------------------------------------------------------------------------------------
	-- Encrypt/Load

	declare @config xml = 
		(
			select 
				   @project_nm as project_nm
				 , @project_id as project_id
				 , @client_secrets as client_secrets
				for xml path ('EDIS_SVC_CONFIG')
		)

		--print cast(@config as nvarchar(max))

		declare @config_enc varbinary(max)

		open symmetric key [SQLETL_EDIS_SKEY]
			decryption by certificate [SQLETL_EDIS_CERT]
				select @config_enc = ENCRYPTBYKEY(KEY_GUID('SQLETL_EDIS_SKEY'),cast(@config as nvarchar(max)))
		close symmetric key [SQLETL_EDIS_SKEY]
		;

		if exists(select 1 FROM EDIS.lkup_service_id where service_id = @bq_svc_id)
			BEGIN

				UPDATE EDIS.lkup_service_id
					set service_config = @config_enc
						,last_upd_ts = getdate()
						,service_type = 'BIGQUERY_CONN'
				WHERE service_id = @bq_svc_id
				;

				set @msg = concat('BigQuery Service ID [',upper(@bq_svc_id),'] updated successfully!')

			END
		ELSE
			BEGIN

				INSERT EDIS.lkup_service_id (service_id, last_upd_ts, service_type, service_config)
				VALUES (@bq_svc_id, getdate(), 'BIGQUERY_CONN', @config_enc)

				set @msg = concat('BigQuery Service ID [',upper(@bq_svc_id),'] added successfully!')
			END

		print @msg

	GO

	--{INSTALL_STEP}Create Proc usp_ftp_upload_files{/INSTALL_STEP}

	CREATE PROCEDURE EDIS.usp_ftp_upload_files
		 @ftp_id nvarchar(250)
		,@ftp_srvr nvarchar(1000)
		,@ftp_dir nvarchar(4000)
		,@local_dir nvarchar(1000)
		,@file_crit nvarchar(1000) = ''
		,@file_list_tbl  nvarchar(128) = ''
		,@archive_flag bit = 0
		,@archive_folder nvarchar(1000) = 'archive'
		,@use_binary bit = 0
		,@use_ssh bit = 0
		,@use_ssl bit = 0
		,@use_passive bit = 1
		,@port_nbr int = 0
		WITH ENCRYPTION

	AS
	BEGIN
		SET NOCOUNT ON;
		-- Copyright Notice

		IF NOT EXISTS(SELECT 1 FROM EDIS.lkup_service_id where service_id = @ftp_id)
			BEGIN
				RAISERROR('param @ftp_id with value [%s] does not exist. Please see task EDIS.usp_config_ftp_id to create an FTP ID', 16,16,@ftp_id) with nowait;
				return 16;
			END

		if EDIS.fn_check_perm(@ftp_id) = 0
			begin
				DECLARE @lock_msg VARCHAR(MAX) = 
				'Service ID ['+@ftp_id+'] has been locked by an administrator. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'To use this Service ID, you will need an administrator to run the SQL Command below '
				SET @lock_msg += 'with the @usr_id parameter set as a global group or database role that you are a member of. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'You can also set the @usr_id parameter as your individual ID as well ['+SUSER_NAME()+']:'+CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)
				SET @lock_msg += 'EXEC SSISDB.EDIS.usp_config_svc_id_perm @svc_id = '''+@ftp_id+''''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@usr_id = ''DOMAIN\YOUR_GLOBAL_GROUP OR DATABASE ROLE OR YOUR USER ID'''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@action = ''INSERT'''


				RAISERROR(@lock_msg,16,16) WITH NOWAIT
				--DECLARE @access_msg VARCHAR(8000) = 'ID [%s] has been locked by an administrator. Please contact them to obtain access.'
				--RAISERROR(@access_msg,16,16,@ftp_id) WITH NOWAIT
				RETURN 16
			end

		-- update defaults if shell proc forces them to null
		select @file_crit = isnull(@file_crit,''), @archive_flag = isnull(@archive_flag,0), @archive_folder = isnull(@archive_folder,'archive')
			,@use_binary = isnull(@use_binary,0)
			,@use_ssl = isnull(@use_ssl,0), @use_passive = isnull(@use_passive,1)
			, @use_ssh = isnull(@use_ssh,0)

		declare @ftp_uid nvarchar(4000), @ftp_pwd nvarchar(4000)
	
		declare @config xml = EDIS.ifn_get_svc_config(@ftp_id)

		set @ftp_uid = @config.value('(/EDIS_SVC_CONFIG/service_user_id)[1]','nvarchar(250)')
		set @ftp_pwd = @config.value('(/EDIS_SVC_CONFIG/service_password)[1]','nvarchar(250)')
    
		declare @file_list_usr nvarchar(max)

		if object_id('tempdb..'+@file_list_tbl) is not null
			begin
				declare @sql_file_list nvarchar(max) = 'select @file_list_usr = isnull(@file_list_usr+'';'','''')+file_nm from '+@file_list_tbl
				exec sp_executesql @sql_file_list, N'@file_list_usr nvarchar(max) out', @file_list_usr = @file_list_usr out
			
			end

		if @file_list_usr is null set @file_list_usr = ''

		declare @xml xml = (
			select 
				 @ftp_srvr as ftp_srvr
				,@ftp_id as ftp_id
				,@ftp_dir as ftp_dir
				,@file_crit as file_crit
				,@file_list_usr as file_list_usr
				,@ftp_uid as ftp_uid
				,@ftp_pwd as ftp_pwd
				,@local_dir as local_dir
				,@archive_flag as archive_flag
				,@archive_folder as archive_folder
				,@@servername as mssql_inst
				,@use_binary as use_binary
				,'ftp_task' as primary_task
				,'upload_files' as sub_task
				,@use_ssh as use_ssh
				,@use_ssl as use_ssl
				,@use_passive as use_passive
				,isnull(@port_nbr,0) as ftp_port_nbr
				,'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path ('root')

		)

		exec EDIS.isp_run_task @xml
  
	END

	GO

	--{INSTALL_STEP}Create Proc usp_get_ftp_file_list{/INSTALL_STEP}

	CREATE PROC EDIS.usp_get_ftp_file_list
		 @ftp_id nvarchar(1000)
		,@ftp_srvr nvarchar(1000)
		,@ftp_dir nvarchar(1000)
		,@file_crit nvarchar(1000) = '*'
		,@tmp_tbl_nm nvarchar(128)
		,@show_details bit = 0
		,@use_ssh bit = 0
		,@use_ssl bit = 0
		,@use_passive bit = 1
		,@port_nbr int = 0

		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- Copyright Notice

		IF NOT EXISTS(SELECT 1 FROM EDIS.lkup_service_id where service_id = @ftp_id)
			BEGIN
				RAISERROR('param @ftp_id with value [%s] does not exist. Please see task EDIS.usp_config_ftp_id to create an FTP ID', 16,16,@ftp_id) with nowait;
				return 16;
			END

		if EDIS.fn_check_perm(@ftp_id) = 0
			begin
				DECLARE @lock_msg VARCHAR(MAX) = 
				'Service ID ['+@ftp_id+'] has been locked by an administrator. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'To use this Service ID, you will need an administrator to run the SQL Command below '
				SET @lock_msg += 'with the @usr_id parameter set as a global group or database role that you are a member of. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'You can also set the @usr_id parameter as your individual ID as well ['+SUSER_NAME()+']:'+CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)
				SET @lock_msg += 'EXEC SSISDB.EDIS.usp_config_svc_id_perm @svc_id = '''+@ftp_id+''''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@usr_id = ''DOMAIN\YOUR_GLOBAL_GROUP OR DATABASE ROLE OR YOUR USER ID'''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@action = ''INSERT'''


				RAISERROR(@lock_msg,16,16) WITH NOWAIT

				--DECLARE @access_msg VARCHAR(8000) = 'ID [%s] has been locked by an administrator. Please contact them to obtain access.'
				--RAISERROR(@access_msg,16,16,@ftp_id) WITH NOWAIT
				RETURN 16
			end

		-- update defaults if shell proc forces them to null
		select @file_crit = isnull(@file_crit,'*'), @show_details = isnull(@show_details,0)
			,@use_ssl = isnull(@use_ssl,0), @use_passive = isnull(@use_passive,1)
			, @use_ssh = isnull(@use_ssh,0)

		declare @err_msg varchar(1000)	

		if not exists(select 1 from SSISDB.EDIS.lkup_service_id where service_id = @ftp_id)

			begin
				set @err_msg = concat(
					'FTP ID [',@ftp_id,'] was not found in reference table SSISDB.EDIS.lkup_service_id.'
					,' Process will not finish'
				)
				raiserror(@err_msg,16,16) with nowait
				return 16
			end 

		if left(@tmp_tbl_nm,2) <> '##'
			begin
				set @err_msg = 'This proc requires a global temp table as the tmp table name'
				raiserror(@err_msg,16,16) with nowait
				return 16
			end

		if object_id('tempdb..'+@tmp_tbl_nm) is not null
			begin
				exec('drop table ['+@tmp_tbl_nm+']')
			end

		if @show_details = 1
			begin
				exec('create table ['+@tmp_tbl_nm+'] 
					(
						file_nm nvarchar(1000)
						,file_size_kb float
						,file_last_mod_ts datetime
					)
				')
			end
		else
			begin
				 exec('create table ['+@tmp_tbl_nm+'] (file_nm nvarchar(1000))')
			end

		declare @ftp_uid nvarchar(4000), @ftp_pwd nvarchar(4000)

		declare @config xml = EDIS.ifn_get_svc_config(@ftp_id)

		set @ftp_uid = @config.value('(/EDIS_SVC_CONFIG/service_user_id)[1]','nvarchar(250)')
		set @ftp_pwd = @config.value('(/EDIS_SVC_CONFIG/service_password)[1]','nvarchar(250)')

		declare @xml xml = (
			select @ftp_srvr as ftp_srvr
				,@ftp_id as ftp_id
				,@ftp_dir as ftp_dir
				,@file_crit as file_crit
				,@ftp_uid as ftp_uid
				,@ftp_pwd as ftp_pwd
				,@show_details as show_details
				,@@servername as mssql_inst
				,@tmp_tbl_nm as tmp_tbl_nm
				,'ftp_task' as primary_task
				,'get_file_list' as sub_task
				,@use_ssh as use_ssh
				,@use_ssl as use_ssl
				,@use_passive as use_passive
				,isnull(@port_nbr,0) as ftp_port_nbr
				,'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path ('root')

		)

		exec EDIS.isp_run_task @xml
    
	END

	GO

	--{INSTALL_STEP}Create Proc usp_get_loc_file_list{/INSTALL_STEP}

	CREATE PROC EDIS.usp_get_loc_file_list
		 @folder_path nvarchar(1000)
		,@file_crit nvarchar(1000) = '*'
		,@show_details bit = 0
		,@tmp_tbl_nm nvarchar(128)

		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- Copyright Notice 
    
		-- update defaults if shell proc forces them to null
		select @file_crit = isnull(@file_crit,'*'), @show_details = isnull(@show_details,0)

		if left(@tmp_tbl_nm,2) <> '##'
			begin
				declare @err_msg varchar(1000) = 'This proc requires a global temp table as the tmp table name'
				raiserror(@err_msg,16,16) with nowait
				return 16
			end
    
		if object_id('tempdb..'+@tmp_tbl_nm) is not null
			begin
				exec('drop table ['+@tmp_tbl_nm+']')
			end

		if @show_details = 1
			begin
				exec('create table ['+@tmp_tbl_nm+'] 
					(
						 file_nm nvarchar(1000)
						,full_nm nvarchar(4000)
						,file_ext nvarchar(250)
						,crt_ts datetime
						,last_axs_ts datetime
						,is_read_only bit
						,file_size_kb float
					)
				')
			end
		else
			begin
				 exec('create table ['+@tmp_tbl_nm+'] (file_nm nvarchar(1000))')
			end
    

    
		declare @xml xml = ( 
			select @folder_path as folder_path, @file_crit as file_crit, @show_details as show_details, @tmp_tbl_nm as tmp_tbl_nm
				,@@SERVERNAME as mssql_inst, 'file_task' as primary_task, 'get_file_list' as sub_task
				,'MDDT_AUTH_CALLER_#x$^71' as caller_auth		
				for xml path('root')
		)
	  
		exec EDIS.isp_run_task @xml
   
	END

	GO

	--{INSTALL_STEP}Create Proc usp_excel_get_sheet_list{/INSTALL_STEP}

	CREATE PROC EDIS.usp_excel_get_sheet_list
		 @file_path nvarchar(1000) 
		,@output_tbl_nm nvarchar(128)
		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- Copyright Notice 

		declare @err_msg varchar(1000)
    
		if EDIS.ufn_does_file_exist(@file_path) = 0 
			BEGIN
				set @err_msg = concat('File Path [',@file_path,'] does not exist.')
				RAISERROR(@err_msg, 16,16) with nowait;
				return 16
			END


		if left(@output_tbl_nm,2) <> '##'
			begin
				set @err_msg = 'This proc requires a global temp table for parameter @output_tbl_nm'
				raiserror(@err_msg,16,16) with nowait
				return 16
			end
    
		if object_id('tempdb..'+@output_tbl_nm) is not null exec('drop table ['+@output_tbl_nm+']')
	
		exec('create table ['+@output_tbl_nm+'] (sheet_nm nvarchar(128))')

		declare @xml xml = ( 
			select @file_path as file_path
				, @output_tbl_nm as output_tbl_nm
				,'excel_task' as primary_task
				, 'get_sheet_list' as sub_task
				,'MDDT_AUTH_CALLER_#x$^71' as caller_auth	
			for xml path('root')
		)
	  
		exec EDIS.isp_run_task @xml
   
	END

	GO

	--{INSTALL_STEP}Create Proc usp_excel_add_worksheet{/INSTALL_STEP}

	CREATE PROC EDIS.usp_excel_add_worksheet
		 @file_path nvarchar(1000) 
		,@sheet_nm nvarchar(50)
		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- Copyright Notice 

		declare @err_msg varchar(1000)
    
		if EDIS.ufn_does_file_exist(@file_path) = 0 
			BEGIN
				set @err_msg = concat('File Path [',@file_path,'] does not exist.')
				RAISERROR(@err_msg, 16,16) with nowait;
				return 16
			END

		declare @xml xml = ( 
			select @file_path as file_path
				, @sheet_nm as sheet_nm
				,'excel_task' as primary_task
				, 'add_worksheet' as sub_task
				,'MDDT_AUTH_CALLER_#x$^71' as caller_auth	
			for xml path('root')
		)
	  
		exec EDIS.isp_run_task @xml
   
	END

	GO

	--{INSTALL_STEP}Create Proc usp_excel_clear_worksheet{/INSTALL_STEP}

	CREATE PROC EDIS.usp_excel_clear_worksheet
		 @file_path nvarchar(1000) 
		,@sheet_nm nvarchar(50)
		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- Copyright Notice 

		declare @err_msg varchar(1000)
    
		if EDIS.ufn_does_file_exist(@file_path) = 0 
			BEGIN
				set @err_msg = concat('File Path [',@file_path,'] does not exist.')
				RAISERROR(@err_msg, 16,16) with nowait;
				return 16
			END

		declare @xml xml = ( 
			select @file_path as file_path
				, @sheet_nm as sheet_nm
				,'excel_task' as primary_task
				, 'clear_worksheet' as sub_task
				,'MDDT_AUTH_CALLER_#x$^71' as caller_auth	
			for xml path('root')
		)
	  
		exec EDIS.isp_run_task @xml
   
	END

	GO

	--{INSTALL_STEP}Create Proc usp_excel_clear_worksheet{/INSTALL_STEP}

	CREATE PROC EDIS.usp_excel_rename_worksheet
		 @file_path nvarchar(1000) 
		,@sheet_nm nvarchar(50)
		,@new_sheet_nm nvarchar(50)
		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- Copyright Notice 

		declare @err_msg varchar(1000)
    
		if EDIS.ufn_does_file_exist(@file_path) = 0 
			BEGIN
				set @err_msg = concat('File Path [',@file_path,'] does not exist.')
				RAISERROR(@err_msg, 16,16) with nowait;
				return 16
			END

		declare @xml xml = ( 
			select @file_path as file_path
				, @sheet_nm as sheet_nm
				, @new_sheet_nm as new_sheet_nm
				, 'excel_task' as primary_task
				, 'rename_worksheet' as sub_task
				,'MDDT_AUTH_CALLER_#x$^71' as caller_auth	
			for xml path('root')
		)
	  
		exec EDIS.isp_run_task @xml
   
	END

	GO

	CREATE proc EDIS.usp_excel_import_data

		  @file_path nvarchar(1000)
		 ,@sheet_nm nvarchar(50)
		 ,@include_headers bit = 1
		 ,@dest_tbl_nm nvarchar(1000)
		 ,@crt_dest_tbl bit = 0
		 ,@load_on_ordinal bit = 0
		 --,@src_row_sample_scan_cnt int = 1000
		 ,@import_all_as_text bit = 0
		 ,@batch_size int = 10000
		 ,@header_rows_to_skip int = 0
		 ,@include_row_id bit = 0

	with encryption 
	as
		set nocount on;
		-- Copyright Notice 

		declare @err_msg varchar(1000)
    
		if EDIS.ufn_does_file_exist(@file_path) = 0 
			BEGIN
				set @err_msg = concat('File Path [',@file_path,'] does not exist.')
				RAISERROR(@err_msg, 16,16) with nowait;
				return 16
			END

		-- XLSB....use data transfer:
		IF lower(right(@file_path,4)) = 'xlsb'
			BEGIN
				
				DECLARE @src_qry nvarchar(max) = 'SELECT * FROM ['+@sheet_nm+'$]'

				EXEC SSISDB.EDIS.usp_run_data_transfer
					 @src_sys = 'EXCEL'
					,@dest_sys = @@servername
					,@src_qry = @src_qry
					,@dest_tbl = @dest_tbl_nm
					,@crt_dest_tbl = @crt_dest_tbl
					,@file_path = @file_path
					,@include_headers = @include_headers
					
				;

				RETURN

			END

		-- this is removed as a user param since it was confusing to people
		declare @src_row_sample_scan_cnt int = @batch_size

		declare @tgt_db nvarchar(255)
		declare @tgt_schema nvarchar(255)
		declare @tgt_tbl nvarchar(255)


		-- Are we creating the destination table?
		if isnull(@crt_dest_tbl,0) = 1
			BEGIN

				declare @ph_col varchar(250) = (select concat('####________________________',replace(newid(),'-','_')))

				if left(@dest_tbl_nm,2) = '##'
					begin
						set @tgt_db = 'tempdb'
						set @tgt_schema = 'dbo'
						set @tgt_tbl = @dest_tbl_nm	
						if OBJECT_ID('tempdb..'+@dest_tbl_nm) is not null exec('drop table ['+@dest_tbl_nm+']');
						exec('create table ['+@dest_tbl_nm+'] ('+@ph_col+' bit)')
					end
				else
					begin
						set @tgt_db = parsename(@dest_tbl_nm,3)
						set @tgt_schema = parsename(@dest_tbl_nm,2)
						set @tgt_tbl = parsename(@dest_tbl_nm,1)
						declare @full_path nvarchar(1000) = concat('[',@tgt_db,'].[',@tgt_schema,'].[',@tgt_tbl,']')

						if DB_ID(@tgt_db) is null
							BEGIN
								raiserror('If the destination table is not a temporary table, it must be fully qualified with the database_name.schema.table_name',16,16) with nowait;
								return 16
							END
						if object_id(@full_path) is not null
							BEGIN
								raiserror('Permanent table %s already exists. You can only create permanent tables that don''t already exist.',16,16, @full_path) with nowait;
								return 16
							END
					end
			END
		else
			BEGIN
				-- validate target exists
				set @tgt_db = parsename(@dest_tbl_nm,3)
				set @tgt_schema = parsename(@dest_tbl_nm,2)
				set @tgt_tbl = parsename(@dest_tbl_nm,1)
				declare @full_path1 nvarchar(1000) = concat('[',@tgt_db,'].[',@tgt_schema,'].[',@tgt_tbl,']')

				if object_id(@full_path1) is null
					BEGIN
						raiserror('Permanent table %s does not exist. Please fully qualify the destination table in [DB Name].[Schema Name].[Table Name] format',16,16, @full_path1) with nowait;
						return 16
					END

			END

	

		DECLARE @xml XML = (
			SELECT 
			   
			   @file_path as file_path
			  ,@sheet_nm as sheet_nm
			  ,@tgt_db as tgt_db
			  ,@tgt_schema as tgt_schema
			  ,@tgt_tbl as tgt_tbl
			  ,isnull(@crt_dest_tbl,0) as crt_dest_tbl
			  ,isnull(@load_on_ordinal,0) as load_on_ordinal
			  ,isnull(@include_headers,1) as include_headers
			  ,isnull(@src_row_sample_scan_cnt,1000) as src_row_sample_scan_cnt
			  ,isnull(@import_all_as_text,0) as import_all_as_text
			  ,isnull(@batch_size,10000) as batch_size
			  ,isnull(@header_rows_to_skip,0) as header_rows_to_skip
			  ,isnull(@include_row_id,0) as include_row_id
			  , 'excel_task' as primary_task
			  , 'import_data' as sub_task
			  , 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		declare @ret_cd int;
		exec @ret_cd = EDIS.isp_run_task @xml


	GO


	--{INSTALL_STEP}Create Proc usp_excel_export_data{/INSTALL_STEP}

	CREATE PROCEDURE EDIS.usp_excel_export_data
		 @file_path nvarchar(1000)
		,@sheet_nm nvarchar(128) = 'Sheet1'
		,@src_qry nvarchar(max)
		,@bold_headers bit = 0
		,@autofit_cols bit = 0
		,@use_autofilter bit = 0
		--,@table_nm nvarchar(128) = ''
		--,@table_style nvarchar(128) = 'TableStyleMedium3'
		,@include_headers bit = 1
		WITH ENCRYPTION
	AS
		SET NOCOUNT ON;
		-- Copyright Notice 

		-- validate source query
		declare @check_err_msg varchar(max) = EDIS.ifn_validate_qry(@src_qry);

		if @check_err_msg is not null
			BEGIN
				raiserror(@check_err_msg, 16,16) with nowait;
				return 16
			END

		declare @err_msg varchar(max)
		declare @crlf char(2) = char(13)+char(10);

		---- Check: Excel 03 does not support tables
		--if isnull(@table_nm,'') <> '' and right(@file_path,4) = '.xls'
		--	BEGIN
		--		set @err_msg = 'Excel 2003 (.xls) does not support table style formats. Please specify .xlsx or .xlsm for your extension to use table styles'
		--		raiserror(@err_msg,16,16) with nowait;
		--		return 16
		--	END

		-- Check if the file format is valid
		declare @ext char(4) = right(@file_path,4)
		if @ext not in ('xlsx','xlsm','.xls')
			BEGIN
				set @err_msg = 'The file extension format [%s] is not supported. Supported file exensions are .xlsx, .xlsm, and .xls'
				raiserror(@err_msg,16,16, @ext) with nowait;
				return 16
			END

		---- Validate the table style
		--if @table_nm <> '' 
		--	BEGIN
		--		if @table_style not in ('TableStyleMedium1','TableStyleMedium2','TableStyleMedium3')
		--			BEGIN
		--				set @err_msg = 'The table style [%s] is not supported. Supported table styles are as follows: '+@crlf
		--				set @err_msg += 'TableStyleMedium1'+@crlf
		--				set @err_msg += 'TableStyleMedium2'+@crlf
		--				set @err_msg += 'TableStyleMedium3'+@crlf
		--				raiserror(@err_msg,16,16,@table_style) with nowait;
		--				return 16
		--			END
		--	END

		declare @xml xml = (
			select 
				  @file_path as file_path
				 ,isnull(@sheet_nm,'Sheet1') as sheet_nm
				 ,@src_qry as src_qry
				 ,isnull(@bold_headers,0) as bold_headers
				 ,isnull(@autofit_cols,1) as autofit_cols
				 ,isnull(@use_autofilter,0) as use_autofilter
				 --,isnull(@table_nm,'') as table_nm
				 --,isnull(@table_style,'TableStyleMedium3') as table_style
				 ,isnull(@include_headers,1) as include_headers
				 ,'excel_task' as primary_task
				 ,'export_data' as sub_task
				 ,'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path ('root')
		)
				
		declare @exec_id nvarchar(255)
		declare @ret_cd int;
		exec @ret_cd = EDIS.isp_run_task @xml, @exec_id = @exec_id out;

		-- issue warning if no rows were moved
		declare @row_cnt int = (select rows_tsfr from EDIS.etl_audit with (nolock) where exec_id = @exec_id)

		if @row_cnt = 0
			BEGIN
				print '** EDIS WARNING NOTIFICATION ** - > NO ROWS EXPORTED'
			END

		return @ret_cd;

	GO

	--{INSTALL_STEP}Create Proc usp_get_scalar{/INSTALL_STEP}

	CREATE PROC EDIS.usp_get_scalar 
		 @srvr_nm nvarchar(1000)
		,@sql_qry nvarchar(max)
		,@res nvarchar(max) out

		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- Copyright Notice

		if EDIS.fn_check_perm(@srvr_nm) = 0
			begin
				DECLARE @lock_msg VARCHAR(MAX) = 
				'Service ID ['+@srvr_nm+'] has been locked by an administrator. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'To use this Service ID, you will need an administrator to run the SQL Command below '
				SET @lock_msg += 'with the @usr_id parameter set as a global group or database role that you are a member of. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'You can also set the @usr_id parameter as your individual ID as well ['+SUSER_NAME()+']:'+CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)
				SET @lock_msg += 'EXEC SSISDB.EDIS.usp_config_svc_id_perm @svc_id = '''+@srvr_nm+''''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@usr_id = ''DOMAIN\YOUR_GLOBAL_GROUP OR DATABASE ROLE OR YOUR USER ID'''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@action = ''INSERT'''


				RAISERROR(@lock_msg,16,16) WITH NOWAIT
				
				--DECLARE @access_msg VARCHAR(8000) = 'ID [%s] has been locked by an administrator. Please contact them to obtain access.'
				--RAISERROR(@access_msg,16,16,@srvr_nm) WITH NOWAIT
				RETURN 16
			end

		declare @err_msg varchar(8000)

		if len(@sql_qry) > 18000
			begin
				set @err_msg = 'Source Query cannot exceed 18,000 characters. Consider breaking up your source query into smaller chunks'
				raiserror(@err_msg,16,16) with nowait
				return 16
			end
        

		if not exists(select 1 from EDIS.lkup_service_id where service_id = @srvr_nm)
			begin
				set @err_msg = concat('Server name [',@srvr_nm,'] was not found in reference table EDIS.lkup_service_id')
				raiserror(@err_msg,16,16) with nowait
				return 16
			end

		declare @proxy_id nvarchar(255) = '';
		declare @cn_str nvarchar(4000), @cn_provider nvarchar(1000), @cn_sub_provider nvarchar(1000)

		declare @config xml = EDIS.ifn_get_svc_config(@srvr_nm)

		set @cn_str = @config.value('(/EDIS_SVC_CONFIG/cn_str)[1]','nvarchar(4000)')
		set @cn_provider = @config.value('(/EDIS_SVC_CONFIG/server_provider)[1]','nvarchar(250)')
		set @cn_sub_provider = isnull(@config.value('(/EDIS_SVC_CONFIG/server_sub_provider)[1]','nvarchar(250)'),'')
		set @proxy_id = isnull(@config.value('(/EDIS_SVC_CONFIG/proxy_id)[1]','nvarchar(255)'),'')

		IF ISNULL(@proxy_id,'') <> '' --and @proxy_exec_in_progress = 0
			BEGIN

				

				DECLARE @proxy_check_err_msg NVARCHAR(MAX)
				DECLARE @proxy_check_res bit

				--EXEC EDIS.isp_check_proxy_id @proxy_id, @srvr_nm, @res_msg = @proxy_check_err_msg out;

				--if @proxy_check_err_msg <> 'PROXY_VALID' 
				--	BEGIN
				--		raiserror(@proxy_check_err_msg, 16,16) with nowait;
				--		return 16
				--	END

				

				EXEC EDIS.isp_get_sys_info @info_ind = 'CHECK_PROXY'
					,@info_arg_1 = @proxy_id
					,@res_msg = @proxy_check_err_msg OUT
					,@res = @proxy_check_res OUT
				;
		
				IF @proxy_check_res = 0
					BEGIN
						RAISERROR(@proxy_check_err_msg,16,16) WITH NOWAIT
						RETURN 16
					END
				;

			END

		declare @tmp_tbl nvarchar(128) = concat('##',replace(newid(),'-','_'))
		exec('create table ['+@tmp_tbl+'] (res nvarchar(max))') 

		declare @xml xml = (
			select @cn_str as cn_str
				, @srvr_nm as src_sys_nm
				, @cn_provider as cn_provider
				, @cn_sub_provider as cn_sub_provider
				, @sql_qry as sql_qry
				, @tmp_tbl as tmp_tbl_nm
				, 'sql_cmd_task' as primary_task
				, 'get_scalar' as sub_task
				, @@SERVERNAME as mssql_inst
				,'MDDT_AUTH_CALLER_#x$^71' as caller_auth
				,isnull(@proxy_id,'') as proxy_id
			for xml path ('root')
		)
    
		exec EDIS.isp_run_task @xml  

		declare @sql nvarchar(1000) = concat('select @res = res from [',@tmp_tbl,']')

		exec sp_executesql @sql, N'@res nvarchar(max) out', @res = @res out

		exec('drop table ['+@tmp_tbl+']')

	END    

	GO

	--{INSTALL_STEP}Create Proc usp_rename_loc_file{/INSTALL_STEP}

	CREATE PROC EDIS.usp_rename_loc_file
		 @curr_file_path nvarchar(1000)
		,@new_file_path nvarchar(1000)

		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- Copyright Notice
    
		declare @xml xml = (
			select 
				 @curr_file_path as curr_file_path
				, @new_file_path as new_file_path, 'file_task' as primary_task
				, 'rename_file' as sub_task
				,'MDDT_AUTH_CALLER_#x$^71' as caller_auth		
			for xml path('root')
		)

	   
		exec EDIS.isp_run_task @xml
    
	END

	GO

	--{INSTALL_STEP}Create Proc usp_move_loc_file{/INSTALL_STEP}

	CREATE PROC EDIS.usp_move_loc_file
		 @src_path nvarchar(1000)
		,@tgt_dir nvarchar(1000)
		,@new_file_nm nvarchar(1000) = ''
		,@force bit = 0
		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- Copyright Notice
    
		declare @xml xml = (
			select 
				 @src_path as src_path
				, @tgt_dir as dest_dir
				, isnull(@force,0) as [force]
				, isnull(@new_file_nm,'') as new_file_nm
				, 'file_task' as primary_task
				, 'move_file' as sub_task
				, 'MDDT_AUTH_CALLER_#x$^71' as caller_auth		
			for xml path('root')
		)

	   
		exec EDIS.isp_run_task @xml
    
	END

	GO

	--{INSTALL_STEP}Create Proc usp_copy_loc_file{/INSTALL_STEP}

	CREATE PROC EDIS.usp_copy_loc_file
		 @src_file_path nvarchar(1000)
		,@tgt_folder_path nvarchar(1000)

		WITH ENCRYPTION
	AS
	BEGIN
	
		SET NOCOUNT ON;
		-- Copyright Notice

		declare @xml xml = (
			select 
				  @src_file_path as file_path
				, @tgt_folder_path as folder_path
				, 'file_task' as primary_task
				, 'copy_file' as sub_task
				, 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')

		)

		exec EDIS.isp_run_task @xml

	END

	GO

	--{INSTALL_STEP}Create Proc usp_update_loc_file_attribute{/INSTALL_STEP}

	CREATE PROC EDIS.usp_update_loc_file_attribute
		 @file_path nvarchar(1000)
		,@attribute_name nvarchar(1000)

		WITH ENCRYPTION
	AS
	BEGIN
	
		SET NOCOUNT ON;
		-- Copyright Notice

		if lower(@attribute_name) not in ('hidden','readonly')
			BEGIN
				raiserror('This proc currently supports "hidden" and "readonly" as attribute names',16,16) with nowait;
				return 16;
			END

		declare @xml xml = (
			select 
				  @file_path as file_path
				, @attribute_name as attribute_name 
				, 'file_task' as primary_task
				, 'update_file_attribute' as sub_task
				, 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')

		)

		exec EDIS.isp_run_task @xml

	END

	GO

	--{INSTALL_STEP}Create Proc usp_run_process_task{/INSTALL_STEP}

	CREATE PROC EDIS.usp_run_process_task
			 @process_nm nvarchar(1000)
			,@args nvarchar(max) = ''
			,@output_tbl_nm nvarchar(250) = ''
		
			WITH ENCRYPTION
		AS
		BEGIN
			SET NOCOUNT ON;
			-- Copyright Notice

			-- Are we doing an output??
			if isnull(@output_tbl_nm,'') <> ''
				BEGIN

					-- Is it a global temp table?
					IF left(@output_tbl_nm,2) = '##'
						BEGIN
							-- If exists, drop it;
							IF object_id('tempdb..'+@output_tbl_nm) IS NOT NULL exec('DROP TABLE '+@output_tbl_nm);

							exec('CREATE TABLE '+@output_tbl_nm+' (output_res varchar(max))')

						END
					ELSE
						BEGIN
							RAISERROR('Only Global Temporary Tables are allowed for the @output_tbl_nm variable e.g. ##myOutputResTbl', 16,16) with nowait;
							RETURN 16;
						END

				END


			declare @xml xml = (
				select @process_nm as process_nm
					,isnull(@args,'') as args
					,isnull(@output_tbl_nm,'') as output_tbl
					, @@SERVERNAME as mssql_inst
					, 'process_task' as primary_task
					, 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
				for xml path('root')

			)

			declare @ret_cd int;
			exec @ret_cd = EDIS.isp_run_task @xml

			return @ret_cd

		END

	GO

	--{INSTALL_STEP}Create Proc usp_run_powershell_script{/INSTALL_STEP}

	CREATE PROC EDIS.usp_run_powershell_script
			 @script nvarchar(max)
			,@output_tbl_nm nvarchar(250) = ''
		
			WITH ENCRYPTION
		AS
		BEGIN
			SET NOCOUNT ON;
			-- Copyright Notice

			-- Are we doing an output??
			if isnull(@output_tbl_nm,'') <> ''
				BEGIN

					-- Is it a global temp table?
					IF left(@output_tbl_nm,2) = '##'
						BEGIN
							-- If exists, drop it;
							IF object_id('tempdb..'+@output_tbl_nm) IS NOT NULL exec('DROP TABLE '+@output_tbl_nm);

							exec('CREATE TABLE '+@output_tbl_nm+' (output_res varchar(max))')

						END
					ELSE
						BEGIN
							RAISERROR('Only Global Temporary Tables are allowed for the @output_tbl_nm variable e.g. ##myOutputResTbl', 16,16) with nowait;
							RETURN 16;
						END

				END


			declare @xml xml = (
				select @script as script
					,isnull(@output_tbl_nm,'') as output_tbl_nm
					, @@SERVERNAME as mssql_inst
					, 'powershell_task' as primary_task
					, 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
				for xml path('root')

			)

			declare @ret_cd int
			exec @ret_cd = EDIS.isp_run_task @xml

			return @ret_cd

		END

	GO

	--{INSTALL_STEP}Create Proc usp_run_data_transfer{/INSTALL_STEP}

	CREATE PROCEDURE EDIS.[usp_run_data_transfer]

		 @src_sys nvarchar(50) = @@servername
		,@dest_sys nvarchar(50) = @@servername
		,@src_qry nvarchar(max) = ''
		,@dest_tbl nvarchar(250) = ''
		,@crt_dest_tbl bit = 0

		--fast load options
		,@batch_size int = 10000
		,@keep_ident bit = 0
		,@keep_nulls bit = 0
		,@is_key_ordered bit = 0

		-- flat file
		,@file_path nvarchar(1000) = ''
		,@append_to_existing_file bit = 0
		,@include_headers bit = 1 
		,@header_rows_to_skip int = 0
		,@data_rows_to_skip int = 0
		,@text_qual nvarchar(100) = null
		,@col_delim nvarchar(100) = N'{Tab}' 
		,@row_term nvarchar(100) = N'{CR}{LF}' 
		,@fixed_width_row_len int = 0
		,@fixed_width_intervals nvarchar(1000) = ''
		,@ragged_right_intervals nvarchar(1000) = ''
		,@is_unicode bit = 0
		,@add_ghost_col bit = 0 
		,@include_row_id_col bit = 0
		,@max_col_width int = 255 -- max is 4k
		,@load_on_ordinal bit = 0
		,@src_pre_sql_cmd nvarchar(max) = ''
		--,@proxy_id nvarchar(255) = ''
		,@use_32_bit_runtime bit = 0

		-- dev
		--,@save_pkg_file_path nvarchar(1000) = null

		WITH ENCRYPTION

	AS
	BEGIN
    
		-- Copyright Notice

		SET NOCOUNT ON;

		DECLARE @err_msg varchar(max)

		DECLARE @save_pkg_file_path nvarchar(1000) = ''

		DECLARE @access_msg VARCHAR(8000)
		declare @crlf char(2) = char(13)+char(10)
		DECLARE @lock_msg VARCHAR(MAX);
		
		if EDIS.fn_check_perm(@src_sys) = 0
			begin
				set @lock_msg =  'Service ID ['+@src_sys+'] has been locked by an administrator. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'To use this Service ID, you will need an administrator to run the SQL Command below '
				SET @lock_msg += 'with the @usr_id parameter set as a global group or database role that you are a member of. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'You can also set the @usr_id parameter as your individual ID as well ['+SUSER_NAME()+']:'+CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)
				SET @lock_msg += 'EXEC SSISDB.EDIS.usp_config_svc_id_perm @svc_id = '''+@src_sys+''''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@usr_id = ''DOMAIN\YOUR_GLOBAL_GROUP OR DATABASE ROLE OR YOUR USER ID'''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@action = ''INSERT'''


				RAISERROR(@lock_msg,16,16) WITH NOWAIT
				--set @access_msg = 'ID [%s] has been locked by an administrator. Please contact them to obtain access.'
				--RAISERROR(@access_msg,16,16,@src_sys) WITH NOWAIT
				RETURN 16
			end

		if EDIS.fn_check_perm(@dest_sys) = 0
			begin
				set @lock_msg =  'Service ID ['+@dest_sys+'] has been locked by an administrator. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'To use this Service ID, you will need an administrator to run the SQL Command below '
				SET @lock_msg += 'with the @usr_id parameter set as a global group or database role that you are a member of. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'You can also set the @usr_id parameter as your individual ID as well ['+SUSER_NAME()+']:'+CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)
				SET @lock_msg += 'EXEC SSISDB.EDIS.usp_config_svc_id_perm @svc_id = '''+@dest_sys+''''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@usr_id = ''DOMAIN\YOUR_GLOBAL_GROUP OR DATABASE ROLE OR YOUR USER ID'''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@action = ''INSERT'''


				RAISERROR(@lock_msg,16,16) WITH NOWAIT
				--set @access_msg = 'ID [%s] has been locked by an administrator. Please contact them to obtain access.'
				--RAISERROR(@access_msg,16,16,@dest_sys) WITH NOWAIT
				RETURN 16
			END
        
		-- If the Source is @@servername, check the source query
		if @src_sys = @@servername
			BEGIN
				
				declare @check_err_msg varchar(max) = EDIS.ifn_validate_qry(@src_qry);

				if @check_err_msg is not null
					BEGIN
						raiserror(@check_err_msg, 16,16) with nowait;
						return 16
					END

			END

		-- check source file path
		IF upper(@src_sys) IN ('ACCESS','EXCEL','FLATFILE','RAW') 
			BEGIN
				IF EDIS.ufn_does_file_exist(@file_path) = 0
					BEGIN
						set @err_msg = 'Source file path ['+isnull(@file_path,0)+'] does not exist'
						RAISERROR(@err_msg,16,16) with nowait;
						RETURN 16;
					END
			END
		;

		-- Get Source and dest configurations
		declare @src_config xml 
		declare @dest_config xml;

		if upper(@src_sys) NOT IN ('ACCESS','EXCEL','FLATFILE','RAW')
			BEGIN
				if not exists(select 1 from EDIS.lkup_service_id where service_id = @src_sys)
					begin
						set @err_msg = 'Source server ['+@src_sys+'] was not found in base table SSISDB.EDIS.lkup_service_id'
						raiserror(@err_msg,16,16) with nowait
						return 16
					end

				set @src_config = EDIS.ifn_get_svc_config(@src_sys)
			END

		if upper(@dest_sys) NOT IN ('ACCESS','EXCEL','FLATFILE','RAW')
			BEGIN
				
				if not exists(select 1 from EDIS.lkup_service_id where service_id = @dest_sys)
					begin
						set @err_msg = 'Destination server ['+@dest_sys+'] was not found in base table SSISDB.EDIS.lkup_service_id'
						raiserror(@err_msg,16,16) with nowait
						return 16
					end

				set @dest_config = EDIS.ifn_get_svc_config(@dest_sys)
			END

		-- ==============================================================================================================
		-- If using Proxy, check it:

		declare @proxy_id nvarchar(255) = '';

		DECLARE @src_proxy_id nvarchar(255) = '', @dest_proxy_id nvarchar(255) = '';

		set @src_proxy_id = isnull(@src_config.value('(/EDIS_SVC_CONFIG/proxy_id)[1]','nvarchar(250)'),'')
		set @dest_proxy_id = isnull(@dest_config.value('(/EDIS_SVC_CONFIG/proxy_id)[1]','nvarchar(250)'),'')

		declare @service_id_assc_proxy nvarchar(255)

		-- If we have 2 proxies, throw an error
		if isnull(@src_proxy_id,'') <> '' and isnull(@dest_proxy_id,'') <> ''
			AND @src_proxy_id <> @dest_proxy_id
			BEGIN
				RAISERROR('Source System [%s] and Destination System [%s] both login on behalf of a different windows account. Data Transfers only support logging in under 1 windows ID', 16,16,@src_sys, @dest_sys) with nowait;
				return 16
			END
		else if isnull(@src_proxy_id,'') <> ''
			BEGIN
				set @proxy_id = @src_proxy_id
				set @service_id_assc_proxy = @src_sys
			END
		else if isnull(@dest_proxy_id,'') <> ''
			BEGIN
				set @proxy_id = @dest_proxy_id
				set @service_id_assc_proxy = @dest_sys
			END


		--set @proxy_id = isnull(@src_config.value('(/EDIS_SVC_CONFIG/proxy_id)[1]','nvarchar(250)'),'')

		IF ISNULL(@proxy_id,'') <> '' --and @proxy_exec_in_progress = 0
		BEGIN
			DECLARE @proxy_check_err_msg NVARCHAR(MAX)
			DECLARE @proxy_check_res bit

			--EXEC EDIS.isp_check_proxy_id @proxy_id, @service_id_assc_proxy, @res_msg = @proxy_check_err_msg out;
			----print @proxy_check_err_msg
			--IF @proxy_check_err_msg <> 'PROXY_VALID' 
			--	BEGIN
			--		raiserror(@proxy_check_err_msg, 16,16) with nowait;
			--		return 16
			--	END

			EXEC EDIS.isp_get_sys_info @info_ind = 'CHECK_PROXY'
				,@info_arg_1 = @proxy_id
				,@res_msg = @proxy_check_err_msg OUT
				,@res = @proxy_check_res OUT
			;
		
			IF @proxy_check_res = 0
				BEGIN
					RAISERROR(@proxy_check_err_msg,16,16) WITH NOWAIT
					RETURN 16
				END
			;

		END


		-- ==============================================================================================================
		-- for excel/access, check driver

		DECLARE @AceEngineVersion NVARCHAR(1000)

		IF UPPER(@src_sys) IN ('ACCESS','EXCEL') OR upper(@dest_sys) IN ('ACCESS','EXCEL') 
			BEGIN
				
				-- for MDB/xls, it uses jet
				if upper(right(@file_path,3)) in ('XLS','MDB')
					BEGIN
						set @use_32_bit_runtime = 1
						set @AceEngineVersion = '12' -- this is meaningless..just a placeholder
					END
				ELSE
					BEGIN
						declare @ace_version_composite varchar(250) = EDIS.ifn_get_ms_ace_version();
						IF @ace_version_composite is null
							BEGIN
								Raiserror('In order to connect to MS Access/Excel, the Microsoft ACE Driver needs to be installed',16,16) with nowait;
								return 16;
							END

						set @AceEngineVersion = left(@ace_version_composite,2)

						if right(@ace_version_composite,2) = '32'
							BEGIN
								set @use_32_bit_runtime = 1
							END
						ELSE
							BEGIN
								set @use_32_bit_runtime = 0
							END

					END
				END

		-- Update defaults if users created shell proc that override with nulls
		select 
			 @src_sys = isnull(@src_sys,@@servername)
			,@dest_sys = isnull(@dest_sys,@@servername)
			,@src_qry = isnull(@src_qry,'')
			,@dest_tbl = isnull(@dest_tbl,'')
			,@crt_dest_tbl = isnull(@crt_dest_tbl,0)
			,@batch_size = isnull(@batch_size,10000)
			,@keep_ident = isnull(@keep_ident,0)
			,@keep_nulls = isnull(@keep_nulls,0)
			,@is_key_ordered = isnull(@is_key_ordered,0)
			,@file_path = isnull(@file_path,'')
			,@append_to_existing_file = isnull(@append_to_existing_file,0)
			,@include_headers = isnull(@include_headers,1)
			,@header_rows_to_skip = isnull(@header_rows_to_skip,0)
			,@data_rows_to_skip = isnull(@data_rows_to_skip,0)
			,@col_delim = isnull(@col_delim,N'{Tab}')
			,@row_term = isnull(@row_term,N'{CR}{LF}')
			,@add_ghost_col = isnull(@add_ghost_col,0)
			,@include_row_id_col = isnull(@include_row_id_col,0)
			,@max_col_width = isnull(@max_col_width,255)
			,@load_on_ordinal = isnull(@load_on_ordinal,0)
			,@use_32_bit_runtime = isnull(@use_32_bit_runtime,0)
			--,@save_pkg_file_path = isnull(@save_pkg_file_path,'')
			,@fixed_width_row_len = isnull(@fixed_width_row_len,0)
			,@fixed_width_intervals = isnull(@fixed_width_intervals,'')
			,@ragged_right_intervals = isnull(@ragged_right_intervals,'')

		declare 
			 @src_server_platform			nvarchar(30)
			,@src_server_provider			nvarchar(30)
			,@src_server_sub_provider		nvarchar(30)
			,@src_cn_str					varchar(8000)
			,@dest_server_platform			nvarchar(30)
			,@dest_server_provider			nvarchar(30)
			,@dest_server_sub_provider		nvarchar(30)
			,@dest_cn_str					varchar(8000)
		;

		-- validate target table if destination is the server and not creating on the fly
		if @dest_sys = @@SERVERNAME and @crt_dest_tbl = 0
			begin
				if object_id(@dest_tbl) is null and left(@dest_tbl,2) <> '##'
					begin
						set @err_msg = concat('Note: Destination table ',@dest_tbl,' does not exist. Ensure tables are fully qualified as database_name.schema_name.table_name')
						raiserror(@err_msg,16,16) with nowait
						return 16
					end
			end

		-- get source config params
		if upper(@src_sys) not in ('FLATFILE','EXCEL','ACCESS','RAW')
			begin
				
				set @src_server_platform		= upper(@src_config.value('(/EDIS_SVC_CONFIG/server_platform)[1]','nvarchar(250)'))
				set @src_server_provider		= upper(@src_config.value('(/EDIS_SVC_CONFIG/server_provider)[1]','nvarchar(250)'))
				set @src_server_sub_provider	= upper(@src_config.value('(/EDIS_SVC_CONFIG/server_sub_provider)[1]','nvarchar(250)'))
				set @src_cn_str					= @src_config.value('(/EDIS_SVC_CONFIG/cn_str)[1]','nvarchar(4000)')
			
			end


		else
			begin
				set @src_server_platform = upper(@src_sys)
				if upper(@src_sys) in ('EXCEL','ACCESS') set @src_server_provider = 'OLEDB'
				if upper(@src_sys) in('FLATFILE','RAW') begin
					set @src_server_provider = upper(@src_sys)
					set @src_cn_str = @file_path
				end
			end

		if upper(@dest_sys) not in ('FLATFILE','EXCEL','ACCESS','RAW')
			begin
				
				set @dest_server_platform		= upper(@dest_config.value('(/EDIS_SVC_CONFIG/server_platform)[1]','nvarchar(250)'))
				set @dest_server_provider		= upper(@dest_config.value('(/EDIS_SVC_CONFIG/server_provider)[1]','nvarchar(250)'))
				set @dest_server_sub_provider	= upper(@dest_config.value('(/EDIS_SVC_CONFIG/server_sub_provider)[1]','nvarchar(250)'))
				set @dest_cn_str				= @dest_config.value('(/EDIS_SVC_CONFIG/cn_str)[1]','nvarchar(4000)')
			

			end
		ELSE
			BEGIN
				IF UPPER(@dest_sys) = 'EXCEL'
					BEGIN
						SET @dest_server_platform = 'EXCEL'
						SET @dest_server_provider = 'EXCEL'
					END	
				ELSE IF UPPER(@dest_sys) = 'ACCESS' 
					BEGIN
						SET @dest_server_platform = 'ACCESS'
						set @dest_server_provider = 'OLEDB'
					END
                ELSE IF UPPER(@dest_sys) IN ('RAW','FLATFILE')
					BEGIN
						set @dest_server_provider = upper(@dest_sys)
						SET @dest_cn_str = @file_path
						SET @dest_server_platform = upper(@dest_sys)
					END
			END
			--end

		-- Excel as destionation...if no sheet specified, set to sheet1
		if (upper(@dest_sys) = 'EXCEL' and isnull(@dest_tbl,'') = '') 
			set @dest_tbl = 'Sheet1'
		;

		-- =======================================================================================================================================
		-- create dest temp table?

		declare @ph_col varchar(250) = (select concat('####________________________',replace(newid(),'-','_')))

		-- is the destination a global temp on the server and does not exist yet? if so, set the create destination to true
		if (@dest_sys = @@servername AND left(@dest_tbl,2) = '##' and object_id('tempdb..'+@dest_tbl) is null)
			set @crt_dest_tbl = 1
		;

		declare @dest_tbl_db nvarchar(255)
		if left(@dest_tbl,2) = '##'
			set @dest_tbl_db = 'tempdb'
		else
			set @dest_tbl_db = parsename(@dest_tbl,3)

		declare @db_nm_perm nvarchar(255)

		if @crt_dest_tbl is null set @crt_dest_tbl = 0;

		-- creating the destination table on the host?
		if (@crt_dest_tbl = 1 AND upper(@dest_sys) = upper(@@SERVERNAME))
			
			begin
				---- validate that they are sending the results to this server
				--if upper(@dest_sys) <> upper(@@SERVERNAME)
				--	begin
				--		set @err_msg = 'You cannot generate the destination table unless the destination is this host MS SQL Server ('+@@SERVERNAME+').'
				--		raiserror(@err_msg,16,16) with nowait
				--		return 16
				--	end

				-- Validate that if the table is a perm table (no global), that it does not aleady exist
				if left(@dest_tbl,2) <> '##'
					begin
						
						-- does the object ID already exist?
						if object_id(@dest_tbl) is not null
							
							begin
								set @err_msg = 'Note: Permanent table '+@dest_tbl+' already exists. You can only generate permanent tables if they don''t already exist.';
								raiserror(@err_msg,16,16) with nowait
								return 16
							end

						-- Did they 3 part qualify the object?
						set @db_nm_perm = parsename(@dest_tbl,3)
						declare @schema_nm_perm nvarchar(256) = parsename(@dest_tbl,2)
						declare @tbl_nm_perm nvarchar(256) = parsename(@dest_tbl,1)

						-- did we not get the parts?
						if @db_nm_perm is null or @schema_nm_perm is null or @tbl_nm_perm is null
							begin
								raiserror('Error attempting to create destination permanent table. In order to create a permanent destination table, the table must be 3-part fully qualified i.e. [db_nm].[schema_nm].[table_nm]',16,16) with nowait
								return 16
							end

						if db_id(@db_nm_perm) is null
							begin
								raiserror('Error attempting to create destination permanent table. Database [%s] does not exist on server [%s]',16,16,@db_nm_perm,@@servername) with nowait
								return 16
							end

						-- update to escape the dest tbl
						set @dest_tbl = concat('[',@db_nm_perm,'].[',@schema_nm_perm,'].[',@tbl_nm_perm,']')

					end

				if left(@dest_tbl,2) = '##'
					begin
						if OBJECT_ID('tempdb..'+@dest_tbl) is not null exec('drop table ['+@dest_tbl+']');
						exec('create table ['+@dest_tbl+'] ('+@ph_col+' bit)')
					end
				else
					begin
						exec('create table '+@dest_tbl+' ('+@ph_col+' bit)')
					end

				-- do we want an identity row?
				if @include_row_id_col = 1
					begin
						if left(@dest_tbl,2) = '##'
							begin
								exec('alter table ['+@dest_tbl+'] add row_id int identity(1,1)')
							end
						else
							begin
								exec('alter table '+@dest_tbl+' add row_id int identity(1,1)')
							end
					end

			end

		-- ==============================================================================================
		-- Load in Paramaters to xml stream

		declare @xml xml = 
		(
			select 

				  @src_sys as src_sys_nm
				, @src_qry as src_qry
				, @src_server_provider as src_server_provider
				, @src_server_sub_provider as src_server_sub_provider
				, @src_server_platform as src_platform
				, @src_cn_str as src_cn_str

				, @dest_sys as dest_sys_nm
				, @dest_server_provider as dest_server_provider
				, @dest_server_sub_provider as dest_server_sub_provider
				, @dest_server_platform as dest_platform
				, @dest_cn_str as dest_cn_str


				, @dest_tbl as dest_tbl
				, @batch_size as load_batch_size
				, @crt_dest_tbl as crt_dest_tbl
				, @file_path as file_path
				, @append_to_existing_file as append_to_existing_file
				, @col_delim as col_delim
				, @row_term as row_term
				, @text_qual as text_qual
				, @header_rows_to_skip as header_rows_to_skip
				, @data_rows_to_skip as data_rows_to_skip
				, @include_headers as include_headers
				, @add_ghost_col as include_ghost_col
				, @max_col_width as max_col_width
				, @load_on_ordinal as load_on_ordinal
				, isnull(@fixed_width_row_len,0) as fixed_width_row_len
				, isnull(@fixed_width_intervals,'') as fixed_width_intervals
				, isnull(@ragged_right_intervals,'') as ragged_right_intervals
				, isnull(@is_unicode,0) as is_unicode
				, @is_key_ordered as is_key_ordered
				, @keep_ident as keep_ident
				, @keep_nulls as [keep_nulls]
				, @save_pkg_file_path as pkg_file_path
				, isnull(@include_row_id_col,0) as include_row_id_col
				, @ph_col as col_place_holder
				, @@SERVERNAME as mssql_inst
				, isnull(@src_pre_sql_cmd,'') as src_pre_sql_cmd
				, @use_32_bit_runtime as use_32_bit_runtime
				, ISNULL(@AceEngineVersion,'') AS ace_engine_version
				, @dest_tbl_db as dest_tbl_db
				, 'data_transfer_task' as primary_task
				, 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
				, isnull(@proxy_id,'') as proxy_id
			for xml path('root')

		)

		declare @ret_cd int;
		exec @ret_cd = EDIS.isp_run_task @xml

		return @ret_cd -- usp_run_data_transfer

	END 

	GO

	--{INSTALL_STEP}Create Proc usp_unzip_files{/INSTALL_STEP}

	CREATE PROC EDIS.[usp_unzip_files]
		 @zip_file_path NVARCHAR(1000)
		,@folder_path nvarchar(1000)

		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- copyright notice
		
		DECLARE @xml XML = (
			SELECT 
			  @folder_path AS folder_path
			, @zip_file_path AS zip_file_path
			, 'zip_task' as primary_task
			, 'unzip_files' as sub_task
			, 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml
    
	END

	GO

	--{INSTALL_STEP}Create Proc usp_zip_files{/INSTALL_STEP}

	CREATE PROC EDIS.[usp_zip_files]
		 @folder_path nvarchar(1000)
		,@zip_file_path NVARCHAR(1000)
		,@include_sub_folders BIT = 1
		,@append_to_existing_file bit = 0

		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- copyright notice
        
		DECLARE @xml XML = (
			SELECT 
			  @folder_path AS folder_path
			, @zip_file_path AS zip_file_path
			, isnull(@include_sub_folders,1) AS include_sub_folders
			, isnull(@append_to_existing_file,0) as append_to_existing_file
			, 'zip_task' as primary_task
			, 'zip_files' as sub_task
			, 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml
   
	END

	GO

	--{INSTALL_STEP}Create Proc usp_flatfile_export_data{/INSTALL_STEP}

	CREATE PROC EDIS.usp_flatfile_export_data
		 @src_svc_id varchar(50) = @@servername
		,@file_path varchar(1000)
		,@src_qry nvarchar(max)
		,@include_headers bit = 1
		,@col_delim nvarchar(30) = '{TAB}'
		,@row_term nvarchar(30) = '{CR}{LF}'
		,@text_qual nvarchar(10) = ''
		,@append_to_existing_file bit = 0
		--,@encoding nvarchar(30) = 'default'
		WITH ENCRYPTION
	AS
		SET NOCOUNT ON;
		-- copyright notice

		-- short hand data transfer
		EXEC SSISDB.EDIS.usp_run_data_transfer
			 @src_sys = @src_svc_id
			,@dest_sys = 'FLATFILE'
			,@file_path = @file_path
			,@src_qry = @src_qry
			,@include_headers = @include_headers
			,@col_delim = @col_delim
			,@row_term = @row_term
			,@text_qual = @text_qual
			,@append_to_existing_file = @append_to_existing_file
		;

		--declare @crlf char(2) = char(13)+char(10);

		---- validate server id
		--if not exists(select 1 from EDIS.lkup_service_id where service_id = @src_svc_id)
		--	BEGIN
		--		RAISERROR('Parameter @src_svc_id with value [%s] does not exist. Please see procedure EDIS.usp_config_db_conn to create a server connection.',16,16,@src_svc_id) with nowait;
		--		return 16
		--	END
		--;

		--if EDIS.fn_check_perm(@src_svc_id) = 0
		--	begin
		--		RAISERROR('ID [%s] has been locked by an administrator. Please contact them to obtain access.',16,16,@src_svc_id) WITH NOWAIT
		--		RETURN 16
		--	end
		--;

		------ ---------------------------------------------------------------------------------
		------ Encoding
		----if @encoding is not null 
		----	begin
		----		if lower(@encoding) <> 'default' 
		----			begin
		----				if lower(@encoding) not in ('utf7','utf8','utf32','unicode','bigendianunicode','ascii')
		----					BEGIN
		----						declare @encoding_err_msg varchar(max) = concat(
		----							'Parameter @encoding has invalid value. Valid values are:',@crlf
		----							,'utf7',@crlf
		----							,'utf8',@crlf
		----							,'utf32',@crlf
		----							,'unicode',@crlf
		----							,'bigendianunicode',@crlf
		----							,'ascii',@crlf
		----							,'default',@crlf
		----						)
		----						;
		----						raiserror(@encoding_err_msg,16,16) with nowait; 
		----						return 16
		----					END
		----			end

		----	end
			
		--Declare @svc_config xml = SSISDB.EDIS.ifn_get_svc_config(@src_svc_id);

		--Declare @src_platform nvarchar(255) = upper(@svc_config.value('(/EDIS_SVC_CONFIG/server_platform)[1]','nvarchar(250)'))
		--declare @src_server_provider nvarchar(255) = upper(@svc_config.value('(/EDIS_SVC_CONFIG/server_provider)[1]','nvarchar(250)'))
		--DECLARE @src_server_sub_provider nvarchar(255)	= upper(@svc_config.value('(/EDIS_SVC_CONFIG/server_sub_provider)[1]','nvarchar(250)'))
		--DECLARE @cn_str	nvarchar(4000) = @svc_config.value('(/EDIS_SVC_CONFIG/cn_str)[1]','nvarchar(4000)')
			
		--DECLARE @provider nvarchar(255)
		--if @src_server_provider = 'ado.net'
		--	set @provider = @src_server_sub_provider
		--else
		--	set @provider = @src_server_provider
		--;

		---- Switch for host Server to use MSSQL NC
		--if @src_svc_id = @@servername
		--	BEGIN
		--		set @cn_str = 'Server = '+@@servername+'; Integrated Security = True';
		--		set @provider = 'mssql'
		--	END

		--DECLARE @xml XML = (
		--	SELECT 
		--		 isnull(@src_svc_id,@@servername) as server_id
		--		,@cn_str as cn_str
		--		,@provider as src_provider
		--		,@file_path as file_path
		--		,@src_qry as src_qry
		--		,isnull(@include_headers,1) as include_headers
		--		,isnull(@col_delim ,'{TAB}') as col_delim
		--		,isnull(@row_term,'{CR}{LF}') as row_term
		--		,isnull(@text_qual,'') as text_qual
		--		,isnull(@append_to_existing_file,0) as append_to_existing_file
		--		,isnull(@encoding,'default') as encoding_str

		--		, 'flatfile_task' as primary_task
		--		, 'export_data' as sub_task
		--		, 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
		--	for xml path('root')
		--)

		--exec EDIS.isp_run_task @xml

	GO


	--{INSTALL_STEP}Create Proc usp_run_web_request{/INSTALL_STEP}

	CREATE PROC EDIS.[usp_run_web_request]
		 @url nvarchar(4000)
		,@output_tbl_nm nvarchar(250) = ''
		,@encoding varchar(100) = 'utf16'
		,@content_type varchar(250) = ''
		,@accept varchar(250) = ''
		,@timeout int = 0
        ,@svc_id nvarchar(250) = ''
		,@header_tmp_tbl nvarchar(250) = '' 
		,@token_auth_url nvarchar(4000) = ''
		,@tls_version varchar(5) = ''
		,@method varchar(250) = 'GET'
		,@proxy_svc_id nvarchar(250) = ''
		,@proxy_url nvarchar(4000) = ''
		,@proxy_port int = -1
		,@res nvarchar(max) = null out
		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- copyright notice


		declare @was_tls_specified bit = 0;
		if isnull(@tls_version,'') <> ''
			set @was_tls_specified = 1

		-- TLS Version check: if user supplied value
		if @was_tls_specified = 1 
			BEGIN
				if ltrim(rtrim(@tls_version)) not in ('1.1','1.2')
					BEGIN
						RAISERROR('TLS Version values supported are 1.1 and 1.2. To use the default TLS version, do not specify this parameter',16,16) with nowait;
						return 16
					END
			END



		-- Is it a global temp table?
		declare @was_tbl_specified bit = 0
		if isnull(@output_tbl_nm,'') <> ''
			set @was_tbl_specified = 1
		;


		-- the output table is now optional...if no output table is specified, we will create a generic gtt, load the results, kick it to the output var, and drop it
		if @was_tbl_specified = 0
			BEGIN
				declare @gtt nvarchar(250) = concat('##',replace(newid(),'-','_'))
				exec('CREATE TABLE '+@gtt+' (output_res varchar(max))')
				set @output_tbl_nm = @gtt;
			END
		ELSE
			BEGIN
				IF left(@output_tbl_nm,2) <> '##'
					BEGIN
						declare @crlf char(2) = char(13)+char(10);
						
						declare @err_msg varchar(max) = concat(
							 'Parameter @output_tbl_nm only accepts global temporary tables i.e. ##myOutputTbl.',@crlf
							,'Note: The @output_tbl_nm parameter is optional. The results of the web request will also output to variable @res', @crlf
							,'To capture the results in the output variable, use this template:',@crlf,@crlf
							,'---------------',@crlf
							,'DECLARE @web_call_res NVARCHAR(MAX);',@crlf
							,'EXEC SSISDB.EDIS.usp_run_web_request @url = ''http://www.YOUR_WEBSERVICE.COM'', @res = @web_call_res OUT',@crlf
							,'PRINT @web_call_res'
						)

						RAISERROR(@err_msg, 16,16) with nowait;
						RETURN 16;
					END
				ELSE
					BEGIN
						IF object_id('tempdb..'+@output_tbl_nm) IS NOT NULL exec('DROP TABLE '+@output_tbl_nm);
						exec('CREATE TABLE '+@output_tbl_nm+' (output_res varchar(max))')
					END

				
			END

		-- is the headers temp table a temp table??
		IF left(@header_tmp_tbl,1) <> '#' and isnull(len(@header_tmp_tbl),0) > 0
			begin
				RAISERROR('Headers require a temp table to supply the values e.g. #myHeaders or ##headers_list', 16,16) with nowait;
				RETURN 16;
			end

		declare @headers as EDIS.web_request_headers

		-- Assume the first two columns in the headers temp table are the header name and value and load them
		IF object_id('tempdb..'+@header_tmp_tbl) IS NOT NULL
			BEGIN
				declare @cols varchar(500)
				select @cols = isnull(@cols+', ','')+'['+c.name+']'
				from tempdb.sys.columns as c
				where c.object_id = object_id('tempdb..'+@header_tmp_tbl)
					and column_id between 1 and 2
				order by column_id
				declare @sql varchar(max) = concat('SELECT ',@cols,' FROM [',@header_tmp_tbl,']')

				insert @headers
				exec(@sql)
			END

        DECLARE @svc_uid nvarchar(1000) = '', @svc_pwd nvarchar(1000) = '';

		if isnull(@svc_id,'') <> ''
			BEGIN
				declare @config xml = EDIS.ifn_get_svc_config(@svc_id);

				set @svc_uid = @config.value('(/EDIS_SVC_CONFIG/service_user_id)[1]','nvarchar(250)')
				set @svc_pwd = @config.value('(/EDIS_SVC_CONFIG/service_password)[1]','nvarchar(250)')
			END

		DECLARE @proxy_svc_uid nvarchar(1000) = '', @proxy_svc_pwd nvarchar(1000) = '';

		if isnull(@proxy_svc_id,'') <> ''
			BEGIN
				declare @config1 xml = EDIS.ifn_get_svc_config(@proxy_svc_id);

				set @proxy_svc_uid = @config1.value('(/EDIS_SVC_CONFIG/service_user_id)[1]','nvarchar(250)')
				set @proxy_svc_pwd = @config1.value('(/EDIS_SVC_CONFIG/service_password)[1]','nvarchar(250)')
			END
        
		DECLARE @xml XML = (
			SELECT 
			  @url as [url]
			, isnull(@token_auth_url,'') as token_auth_url
			, @output_tbl_nm as output_tbl_nm
			, isnull(@encoding,'utf16') as [encoding]
			, isnull(@timeout,0) as [timeout]
			, isnull(@svc_id,'') as svc_id
            , isnull(@svc_uid,'') as svc_uid
			, isnull(@svc_pwd,'') as svc_pwd
			, isnull(@method,'GET') as method
			, isnull(@tls_version,'') as tls_version
			--, (SELECT * FROM @headers FOR XML PATH('header_arg'), type) AS web_request_header
			, @@servername as mssql_inst
			, 'web_task' as primary_task
			, 'web_req' as sub_task
			, 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			, isnull(@proxy_svc_uid,'') as proxy_svc_uid
			, isnull(@proxy_svc_pwd,'') as proxy_svc_pwd
			, isnull(@proxy_url,'') as proxy_url
			, isnull(@proxy_port,-1) as proxy_port
			, isnull(@accept,'') as accept
			, isnull(@content_type,'') as content_type
			for xml path('root')
		)

		-- Add Headers if applicable
		if EXISTS(SELECT * FROM @headers)
			BEGIN
				declare @curr_header_nm nvarchar(255), @curr_header_val nvarchar(4000);

				declare cs cursor local fast_forward for select header_name , header_val from @headers
				open cs
				fetch next from cs into @curr_header_nm, @curr_header_val
				while @@FETCH_STATUS = 0
					BEGIN
						declare @header_combo nvarchar(max) = concat(@curr_header_nm,'{|~}', @curr_header_val)

						set @xml.modify('insert <web_request_header>{sql:variable("@header_combo")}</web_request_header> into (/root)[1]')
						fetch next from cs into @curr_header_nm, @curr_header_val
					END
				close cs
				deallocate cs
			END
		;

		declare @ret_cd int;
		exec @ret_cd = EDIS.isp_run_task @xml

		if @ret_cd <> 0
			return @ret_cd

		-- Output to res var
		declare @sql2 nvarchar(max) = N'SET @res = (select * from ['+@output_tbl_nm+'])'
		declare @params nvarchar(50) = N'@res nvarchar(max) out'
		exec sp_executesql @sql2, @params, @res = @res out;
		
		-- if no table was specified, we used a staging table...kill it
		if @was_tbl_specified = 0
			BEGIN
				exec('drop table ['+@output_tbl_nm+']');
			END
		
		return @ret_cd -- usp_run_web_request
   
	END

	GO

	--{INSTALL_STEP}Create Proc usp_run_soap_request{/INSTALL_STEP}

	CREATE PROC EDIS.[usp_run_soap_request]
		 @svc_id nvarchar(250) = ''
		,@url nvarchar(4000)
		,@soap_envelope nvarchar(max)
		,@timeout int = 0
		,@output_tbl_nm nvarchar(250)
		,@encoding varchar(100) = 'utf16'
		,@content_type nvarchar(250) = 'text/xml;charset=UTF-16'
		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- copyright notice


		-- Is it a global temp table?
		IF left(@output_tbl_nm,2) = '##'
			BEGIN
				-- If exists, drop it;
				IF object_id('tempdb..'+@output_tbl_nm) IS NOT NULL exec('DROP TABLE '+@output_tbl_nm);

				exec('CREATE TABLE '+@output_tbl_nm+' (output_res varchar(max))')

			END
		ELSE
			BEGIN
				RAISERROR('Only Global Temporary Tables are allowed for the @output_tbl_nm variable e.g. ##myOutputResTbl', 16,16) with nowait;
				RETURN 16;
			END
        
		DECLARE @svc_uid nvarchar(1000) = '', @svc_pwd nvarchar(1000) = '';

		if isnull(@svc_id,'') <> ''
			BEGIN
				
				declare @config xml = EDIS.ifn_get_svc_config(@svc_id);

				set @svc_uid = @config.value('(/EDIS_SVC_CONFIG/service_user_id)[1]','nvarchar(250)')
				set @svc_pwd = @config.value('(/EDIS_SVC_CONFIG/service_password)[1]','nvarchar(250)')

			END


		DECLARE @xml XML = (
			SELECT 
			 @url as [url]
			, @output_tbl_nm as output_tbl_nm
			, isnull(@encoding,'utf16') as [encoding]
			, @@servername as mssql_inst
			, isnull(@timeout,0) as [timeout]
			, isnull(@svc_id,'') as svc_id
			, isnull(@svc_uid,'') as svc_uid
			, isnull(@svc_pwd,'') as svc_pwd
			, @soap_envelope as soap_envelope
			, isnull(@content_type,'text/xml;charset=UTF-16') as content_type
			, 'web_task' as primary_task
			, 'soap_req' as sub_task
			, 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml
   
	END

	GO

	CREATE proc edis.usp_config_sharepoint_id
		 @svc_id nvarchar(250)
		,@user_id nvarchar(1000)
		,@password nvarchar(1000)
		,@is_sharepoint_online bit

		with encryption
	as
		set nocount on;

		declare @config xml = 
		(
			select @user_id as 'user_id'
				,@password as 'password'
				,@is_sharepoint_online as is_sharepoint_online
				for xml path ('EDIS_SVC_CONFIG')
		)

		--print cast(@config as nvarchar(max))

		declare @config_enc varbinary(max)

		open symmetric key [SQLETL_EDIS_SKEY]
			decryption by certificate [SQLETL_EDIS_CERT]
				select @config_enc = ENCRYPTBYKEY(KEY_GUID('SQLETL_EDIS_SKEY'),cast(@config as nvarchar(max)))
		close symmetric key [SQLETL_EDIS_SKEY]
		;


		if exists(select 1 from EDIS.lkup_service_id where service_id = @svc_id)
			BEGIN
				Update edis.lkup_service_id
					set service_config = @config_enc, last_upd_ts = getdate(), service_type = 'SHAREPOINT_CONN'
				where service_id = @svc_id

				Print 'SharePoint Service ID Updated!'
			END
		ELSE
			BEGIN
				INSERT edis.lkup_service_id (service_id, last_upd_ts, service_type, service_config)
				values (@svc_id, getdate(), 'SHAREPOINT_CONN', @config_enc)

				Print 'SharePoint Service ID Added!'
			END
	
	GO

	--{INSTALL_STEP}Create Proc usp_sharepoint_list_read{/INSTALL_STEP}

	CREATE PROC EDIS.[usp_sharepoint_list_read]
		  @url nvarchar(4000)
		 ,@svc_id nvarchar(250) 
		 ,@list_nm nvarchar(250)
		 ,@output_tbl_nm nvarchar(250)
		 ,@show_hidden_fields bit = 0
		-- ,@batch_size int = 20

		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- copyright notice

		-- Is it a global temp table?
		IF left(@output_tbl_nm,2) = '##'
			BEGIN
				-- If exists, drop it;
				IF object_id('tempdb..'+@output_tbl_nm) IS NOT NULL exec('DROP TABLE '+@output_tbl_nm);

				exec('CREATE TABLE '+@output_tbl_nm+' (output_res varchar(max))')

			END
		ELSE
			BEGIN
				RAISERROR('Only Global Temporary Tables are allowed for the @output_tbl_nm variable e.g. ##myOutputResTbl', 16,16) with nowait;
				RETURN 16;
			END
            
        DECLARE @svc_uid nvarchar(1000) = '', @svc_pwd nvarchar(1000) = '';
		declare @is_sharepoint_online bit;

		declare @svc_config xml = EDIS.ifn_get_svc_config(@svc_id)

		set @svc_uid = @svc_config.value('(/EDIS_SVC_CONFIG/user_id)[1]','nvarchar(250)')
		set @svc_pwd = @svc_config.value('(/EDIS_SVC_CONFIG/password)[1]','nvarchar(250)')
		set @is_sharepoint_online = @svc_config.value('(/EDIS_SVC_CONFIG/is_sharepoint_online)[1]','bit')
        
		DECLARE @xml XML = (
			SELECT 
			  @url as sharepoint_url
			, @list_nm as sharepoint_list_nm
			, @output_tbl_nm as output_tbl_nm
			, iif(isnull(@is_sharepoint_online,0) = 1,'online','onprem') as sharepoint_version
            , isnull(@svc_uid,'') as svc_uid
			, isnull(@svc_pwd,'') as svc_pwd
			, @svc_id as svc_id
			, isnull(@show_hidden_fields,0) as show_hidden_fields
			--, isnull(@batch_size,20) as batch_size
			, 'sharepoint_task' as primary_task
			, 'read_sharepoint_list' as sub_task
			, 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		declare @ret_cd int
		exec @ret_cd = EDIS.isp_run_task @xml
   
	END

	GO

	CREATE PROC EDIS.[usp_sharepoint_get_list_collection]
		  @url nvarchar(4000)
		 ,@svc_id nvarchar(250) 
		 ,@output_tbl_nm nvarchar(250)

		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- copyright notice

		-- Is it a global temp table?
		IF left(@output_tbl_nm,2) = '##'
			BEGIN
				-- If exists, drop it;
				IF object_id('tempdb..'+@output_tbl_nm) IS NOT NULL exec('DROP TABLE '+@output_tbl_nm);

				exec('CREATE TABLE '+@output_tbl_nm+' (list_nm varchar(max))')

			END
		ELSE
			BEGIN
				RAISERROR('Only Global Temporary Tables are allowed for the @output_tbl_nm variable e.g. ##myOutputResTbl', 16,16) with nowait;
				RETURN 16;
			END
            
        DECLARE @svc_uid nvarchar(1000) = '', @svc_pwd nvarchar(1000) = '';
		declare @is_sharepoint_online bit;

		declare @svc_config xml = EDIS.ifn_get_svc_config(@svc_id)

		set @svc_uid = @svc_config.value('(/EDIS_SVC_CONFIG/user_id)[1]','nvarchar(250)')
		set @svc_pwd = @svc_config.value('(/EDIS_SVC_CONFIG/password)[1]','nvarchar(250)')
		set @is_sharepoint_online = @svc_config.value('(/EDIS_SVC_CONFIG/is_sharepoint_online)[1]','bit')
        
		DECLARE @xml XML = (
			SELECT 
			  @url as sharepoint_url
			, @output_tbl_nm as output_tbl_nm
			, iif(isnull(@is_sharepoint_online,0) = 1,'online','onprem') as sharepoint_version
            , isnull(@svc_uid,'') as svc_uid
			, isnull(@svc_pwd,'') as svc_pwd
			, @svc_id as svc_id
			, 'sharepoint_task' as primary_task
			, 'get_sharepoint_list_coll' as sub_task
			, 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml
   
	END

	GO

	--{INSTALL_STEP}Create Proc usp_sharepoint_list_get_metadata{/INSTALL_STEP}

	CREATE PROC EDIS.[usp_sharepoint_list_get_metadata]
		  @url nvarchar(4000)
		 ,@svc_id nvarchar(250) 
		 ,@list_nm nvarchar(250)
		 ,@output_tbl_nm nvarchar(250)

		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- copyright notice

		-- Is it a global temp table?
		IF left(@output_tbl_nm,2) = '##'
			BEGIN
				-- If exists, drop it;
				IF object_id('tempdb..'+@output_tbl_nm) IS NOT NULL exec('DROP TABLE '+@output_tbl_nm);

				exec(
					'
						CREATE TABLE '+@output_tbl_nm+' 
						(
							  display_name varchar(250), internal_name varchar(250), data_type varchar(250), is_hidden bit, default_value varchar(4000), is_required bit
							, field_description varchar(4000)
							, field_formula varchar(4000)
							, field_class_type varchar(30)
							, validation_formula varchar(4000)
							, validation_message varchar(4000)
						)
					'
				)

			END
		ELSE
			BEGIN
				RAISERROR('Only Global Temporary Tables are allowed for the @output_tbl_nm variable e.g. ##myOutputResTbl', 16,16) with nowait;
				RETURN 16;
			END
            
        DECLARE @svc_uid nvarchar(1000) = '', @svc_pwd nvarchar(1000) = '';
		declare @is_sharepoint_online bit;

		declare @svc_config xml = EDIS.ifn_get_svc_config(@svc_id)

		set @svc_uid = @svc_config.value('(/EDIS_SVC_CONFIG/user_id)[1]','nvarchar(250)')
		set @svc_pwd = @svc_config.value('(/EDIS_SVC_CONFIG/password)[1]','nvarchar(250)')
		set @is_sharepoint_online = @svc_config.value('(/EDIS_SVC_CONFIG/is_sharepoint_online)[1]','bit')
        
		DECLARE @xml XML = (
			SELECT 
			  @url as sharepoint_url
			, @list_nm as sharepoint_list_nm
			, @output_tbl_nm as output_tbl_nm
			, iif(isnull(@is_sharepoint_online,0) = 1,'online','onprem') as sharepoint_version
            , isnull(@svc_uid,'') as svc_uid
			, isnull(@svc_pwd,'') as svc_pwd
			, @svc_id as svc_id
			, 'sharepoint_task' as primary_task
			, 'get_sharepoint_list_metadata' as sub_task
			, 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml
   
	END

	GO

	--{INSTALL_STEP}Create Proc usp_sharepoint_library_upload_files{/INSTALL_STEP}

	CREATE PROC EDIS.[usp_sharepoint_library_upload_files]
		  @url nvarchar(4000)
		 ,@svc_id nvarchar(250) 
		 ,@doc_lib_nm nvarchar(250)
		 ,@doc_lib_sub_folder nvarchar(1000) = ''
		 ,@file_crit nvarchar(250) = '*'
		 ,@local_folder_path nvarchar(1000)

		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- copyright notice

            
        DECLARE @svc_uid nvarchar(1000) = '', @svc_pwd nvarchar(1000) = '';
		declare @is_sharepoint_online bit;

		declare @svc_config xml = EDIS.ifn_get_svc_config(@svc_id)

		set @svc_uid = @svc_config.value('(/EDIS_SVC_CONFIG/user_id)[1]','nvarchar(250)')
		set @svc_pwd = @svc_config.value('(/EDIS_SVC_CONFIG/password)[1]','nvarchar(250)')
		set @is_sharepoint_online = @svc_config.value('(/EDIS_SVC_CONFIG/is_sharepoint_online)[1]','bit')
        
		DECLARE @xml XML = (
			SELECT 
			  @url as sharepoint_url
			, @doc_lib_nm as sharepoint_doc_lib_nm
			, isnull(@doc_lib_sub_folder,'') as sharepoint_doc_lib_sub_folder
			, @local_folder_path as local_folder_path
			, ISNULL(@file_crit,'*') as file_crit
			, iif(isnull(@is_sharepoint_online,0) = 1,'online','onprem') as sharepoint_version
            , isnull(@svc_uid,'') as svc_uid
			, isnull(@svc_pwd,'') as svc_pwd
			, @svc_id as svc_id
			, 'sharepoint_task' as primary_task
			, 'upload_files_to_sharepoint' as sub_task
			, 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml
   
	END

	GO

	--{INSTALL_STEP}Create Proc usp_sharepoint_library_download_files{/INSTALL_STEP}

	CREATE PROC EDIS.[usp_sharepoint_library_download_files]
		  @url nvarchar(4000)
		 ,@svc_id nvarchar(250) 
		 ,@doc_lib_nm nvarchar(250)
		 ,@doc_lib_sub_folder nvarchar(1000) = ''
		 ,@file_crit nvarchar(250) = '*'
		 ,@local_folder_path nvarchar(1000)

		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- copyright notice

            
        DECLARE @svc_uid nvarchar(1000) = '', @svc_pwd nvarchar(1000) = '';
		declare @is_sharepoint_online bit;

		declare @svc_config xml = EDIS.ifn_get_svc_config(@svc_id)

		set @svc_uid = @svc_config.value('(/EDIS_SVC_CONFIG/user_id)[1]','nvarchar(250)')
		set @svc_pwd = @svc_config.value('(/EDIS_SVC_CONFIG/password)[1]','nvarchar(250)')
		set @is_sharepoint_online = @svc_config.value('(/EDIS_SVC_CONFIG/is_sharepoint_online)[1]','bit')
        
		DECLARE @xml XML = (
			SELECT 
			  @url as sharepoint_url
			, @doc_lib_nm as sharepoint_doc_lib_nm
			, isnull(@doc_lib_sub_folder,'') as sharepoint_doc_lib_sub_folder
			, @local_folder_path as local_folder_path
			, ISNULL(@file_crit,'*') as file_crit
			, iif(isnull(@is_sharepoint_online,0) = 1,'online','onprem') as sharepoint_version
            , isnull(@svc_uid,'') as svc_uid
			, isnull(@svc_pwd,'') as svc_pwd
			, @svc_id as svc_id
			, 'sharepoint_task' as primary_task
			, 'download_files_from_sharepoint' as sub_task
			, 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml
   
	END

	GO

	--{INSTALL_STEP}Create Proc usp_sharepoint_library_get_file_list{/INSTALL_STEP}

	CREATE PROC EDIS.[usp_sharepoint_library_get_file_list]
		  @url nvarchar(4000)
		 ,@svc_id nvarchar(250) 
		 ,@doc_lib_nm nvarchar(250)
		 ,@file_crit nvarchar(250) = '*'
		 ,@output_tbl_nm nvarchar(250)

		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- copyright notice

		-- Is it a global temp table?
		IF left(@output_tbl_nm,2) = '##'
			BEGIN
				-- If exists, drop it;
				IF object_id('tempdb..'+@output_tbl_nm) IS NOT NULL exec('DROP TABLE '+@output_tbl_nm);

				exec(
					'
						CREATE TABLE '+@output_tbl_nm+' (file_nm nvarchar(4000), file_path nvarchar(4000), file_size_kb bigint, crt_ts datetime2, last_mod_ts datetime2)
					'
				)

			END
		ELSE
			BEGIN
				RAISERROR('Only Global Temporary Tables are allowed for the @output_tbl_nm variable e.g. ##myOutputResTbl', 16,16) with nowait;
				RETURN 16;
			END
            
         DECLARE @svc_uid nvarchar(1000) = '', @svc_pwd nvarchar(1000) = '';
		declare @is_sharepoint_online bit;

		declare @svc_config xml = EDIS.ifn_get_svc_config(@svc_id)

		set @svc_uid = @svc_config.value('(/EDIS_SVC_CONFIG/user_id)[1]','nvarchar(250)')
		set @svc_pwd = @svc_config.value('(/EDIS_SVC_CONFIG/password)[1]','nvarchar(250)')
		set @is_sharepoint_online = @svc_config.value('(/EDIS_SVC_CONFIG/is_sharepoint_online)[1]','bit')
        
		DECLARE @xml XML = (
			SELECT 
			  @url as sharepoint_url
			, @doc_lib_nm as sharepoint_doc_lib_nm
			, @output_tbl_nm as output_tbl_nm
			, ISNULL(@file_crit,'*') as file_crit
			, iif(isnull(@is_sharepoint_online,0) = 1,'online','onprem') as sharepoint_version
            , isnull(@svc_uid,'') as svc_uid
			, isnull(@svc_pwd,'') as svc_pwd
			, @svc_id as svc_id
			, 'sharepoint_task' as primary_task
			, 'get_sharepoint_doc_lib_file_list' as sub_task
			, 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml
   
	END

	GO

	--{INSTALL_STEP}Create Proc usp_sharepoint_list_write{/INSTALL_STEP}

	CREATE PROC EDIS.[usp_sharepoint_list_write]
		  @url nvarchar(4000)
		 ,@svc_id nvarchar(250) 
		 ,@list_nm nvarchar(250)
		 ,@src_qry nvarchar(max)
		 ,@batch_size int = 20

		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- copyright notice
            
        DECLARE @svc_uid nvarchar(1000) = '', @svc_pwd nvarchar(1000) = '';
		declare @is_sharepoint_online bit;

		declare @svc_config xml = EDIS.ifn_get_svc_config(@svc_id)

		set @svc_uid = @svc_config.value('(/EDIS_SVC_CONFIG/user_id)[1]','nvarchar(250)')
		set @svc_pwd = @svc_config.value('(/EDIS_SVC_CONFIG/password)[1]','nvarchar(250)')
		set @is_sharepoint_online = @svc_config.value('(/EDIS_SVC_CONFIG/is_sharepoint_online)[1]','bit')
        
		DECLARE @xml XML = (
			SELECT 
			  @url as sharepoint_url
			, @list_nm as sharepoint_list_nm
			, @src_qry as src_qry
			, isnull(@batch_size,20) as batch_size
			, iif(isnull(@is_sharepoint_online,0) = 1,'online','onprem') as sharepoint_version
            , isnull(@svc_uid,'') as svc_uid
			, isnull(@svc_pwd,'') as svc_pwd
			, @svc_id as svc_id
			, 'sharepoint_task' as primary_task
			, 'write_to_sharepoint_list' as sub_task
			, 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml
   
	END

	GO

	--{INSTALL_STEP}Create Proc usp_sharepoint_list_purge{/INSTALL_STEP}

	CREATE PROC EDIS.[usp_sharepoint_list_purge]
		  @url nvarchar(4000)
		 ,@svc_id nvarchar(250) 
		 ,@list_nm nvarchar(250)
		 ,@batch_size int = 20

		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- copyright notice
            
         DECLARE @svc_uid nvarchar(1000) = '', @svc_pwd nvarchar(1000) = '';
		declare @is_sharepoint_online bit;

		declare @svc_config xml = EDIS.ifn_get_svc_config(@svc_id)

		set @svc_uid = @svc_config.value('(/EDIS_SVC_CONFIG/user_id)[1]','nvarchar(250)')
		set @svc_pwd = @svc_config.value('(/EDIS_SVC_CONFIG/password)[1]','nvarchar(250)')
		set @is_sharepoint_online = @svc_config.value('(/EDIS_SVC_CONFIG/is_sharepoint_online)[1]','bit')
        
		DECLARE @xml XML = (
			SELECT 
			  @url as sharepoint_url
			, @list_nm as sharepoint_list_nm
			, isnull(@batch_size,20) as batch_size
			, iif(isnull(@is_sharepoint_online,0) = 1,'online','onprem') as sharepoint_version
            , isnull(@svc_uid,'') as svc_uid
			, isnull(@svc_pwd,'') as svc_pwd
			, @svc_id as svc_id
			, 'sharepoint_task' as primary_task
			, 'purge_sharepoint_list' as sub_task
			, 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml
   
	END

	GO

	--{INSTALL_STEP}Create Proc usp_bigquery_import_data{/INSTALL_STEP}

	CREATE proc EDIS.usp_bigquery_import_data

	 @bq_svc_id nvarchar(250)
	,@dest_svc_id nvarchar(255) = @@servername
	,@src_qry nvarchar(max)
	,@dest_tbl_nm nvarchar(1000)
	,@crt_dest_tbl bit = 0
	,@load_on_ordinal bit = 0
	,@max_col_width int = 255
	,@bq_fetch_size int = 1000
	,@batch_size int = 10000

	with encryption 
	as
		set nocount on;
		-- copyright notice

		if @dest_svc_id is null set @dest_svc_id = @@servername

		IF NOT EXISTS(SELECT 1 FROM EDIS.lkup_service_id WHERE service_id = @bq_svc_id)
			BEGIN
				RAISERROR('BigQuery Service ID [%s] was not found. Please check that you are referencing the correct service ID',16,16,@bq_svc_id) with NOWAIT;
				RETURN 16;
			END

		if EDIS.fn_check_perm(@bq_svc_id) = 0
			begin
				DECLARE @lock_msg VARCHAR(MAX) = 
				'Service ID ['+@bq_svc_id+'] has been locked by an administrator. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'To use this Service ID, you will need an administrator to run the SQL Command below '
				SET @lock_msg += 'with the @usr_id parameter set as a global group or database role that you are a member of. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'You can also set the @usr_id parameter as your individual ID as well ['+SUSER_NAME()+']:'+CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)
				SET @lock_msg += 'EXEC SSISDB.EDIS.usp_config_svc_id_perm @svc_id = '''+@bq_svc_id+''''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@usr_id = ''DOMAIN\YOUR_GLOBAL_GROUP OR DATABASE ROLE OR YOUR USER ID'''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@action = ''INSERT'''


				RAISERROR(@lock_msg,16,16) WITH NOWAIT
				--RAISERROR('BigQuery Service ID [%s] has been locked by an administrator. Please contact them to obtain access.',16,16,@bq_svc_id) WITH NOWAIT
				RETURN 16
			end

		declare @tgt_db nvarchar(255)
		declare @tgt_schema nvarchar(255)
		declare @tgt_tbl nvarchar(255)

	
		if not EXISTS(SELECT * FROM SSISDB.EDIS.lkup_service_id where service_id = @dest_svc_id)
			BEGIN
				RAISERROR('Destination Service ID [%s] does not exist', 16,16,@dest_svc_id) with nowait;
				return 16
			END

		declare @dest_cn_str nvarchar(4000), @dest_platform nvarchar(255)

		declare @dest_config xml = EDIS.ifn_get_svc_config(@dest_svc_id)

		set @dest_cn_str = @dest_config.value('(/EDIS_SVC_CONFIG/cn_str)[1]','nvarchar(4000)')
		set @dest_platform = @dest_config.value('(/EDIS_SVC_CONFIG/server_platform)[1]','nvarchar(255)')

		if @dest_platform <> 'MSSQL'
			BEGIN
				RAISERROR('BigQuery Import task currently only supports Microsoft SQL Server destinations',16,16) with nowait;
			END


		declare @proxy_id nvarchar(255) = '';

		set @proxy_id = isnull(@dest_config.value('(/EDIS_SVC_CONFIG/proxy_id)[1]','nvarchar(250)'),'')

		IF ISNULL(@proxy_id,'') <> '' --and @proxy_exec_in_progress = 0
		BEGIN
			DECLARE @proxy_check_err_msg NVARCHAR(MAX)
			DECLARE @proxy_check_res bit

			
			--EXEC EDIS.isp_check_proxy_id @proxy_id, @dest_svc_id, @res_msg = @proxy_check_err_msg out;

			--IF @proxy_check_err_msg <> 'PROXY_VALID' 
			--	BEGIN
			--		raiserror(@proxy_check_err_msg, 16,16) with nowait;
			--		return 16
			--	END


			EXEC EDIS.isp_get_sys_info @info_ind = 'CHECK_PROXY'
				,@info_arg_1 = @proxy_id
				,@res_msg = @proxy_check_err_msg OUT
				,@res = @proxy_check_res OUT
			;
		
			IF @proxy_check_res = 0
				BEGIN
					RAISERROR(@proxy_check_err_msg,16,16) WITH NOWAIT
					RETURN 16
				END
			;

		END


		-- Are we creating the destination table? (only validate if the target is the host)
		if isnull(@crt_dest_tbl,0) = 1 and @dest_svc_id = @@servername
			BEGIN

				declare @ph_col varchar(250) = (select concat('####________________________',replace(newid(),'-','_')))

				if left(@dest_tbl_nm,2) = '##' 
					begin
						set @tgt_db = 'tempdb'
						set @tgt_schema = 'dbo'
						set @tgt_tbl = @dest_tbl_nm	
						if OBJECT_ID('tempdb..'+@dest_tbl_nm) is not null exec('drop table ['+@dest_tbl_nm+']');
						exec('create table ['+@dest_tbl_nm+'] ('+@ph_col+' bit)')
					end
				else
					begin
						set @tgt_db = parsename(@dest_tbl_nm,3)
						set @tgt_schema = parsename(@dest_tbl_nm,2)
						set @tgt_tbl = parsename(@dest_tbl_nm,1)
						declare @full_path nvarchar(1000) = concat('[',@tgt_db,'].[',@tgt_schema,'].[',@tgt_tbl,']')

						if DB_ID(@tgt_db) is null
							BEGIN
								raiserror('If the destination table is not a temporary table, it must be fully qualified with the database_name.schema.table_name',16,16) with nowait;
								return 16
							END
						if object_id(@full_path) is not null
							BEGIN
								raiserror('Permanent table %s already exists. You can only create permanent tables that don''t already exist.',16,16, @full_path) with nowait;
								return 16
							END
						--exec('create table '+@dest_tbl_nm+' ('+@ph_col+' bit)')
					end
			END
		
		ELSE
			BEGIN
				-- validate target exists
				set @tgt_db = parsename(@dest_tbl_nm,3)
				set @tgt_schema = parsename(@dest_tbl_nm,2)
				set @tgt_tbl = parsename(@dest_tbl_nm,1)
				declare @full_path1 nvarchar(1000) = concat('[',@tgt_db,'].[',@tgt_schema,'].[',@tgt_tbl,']')

				-- validate target if Host SQL Server
				if object_id(@full_path1) is null and @dest_svc_id = @@servername
					BEGIN
						raiserror('Permanent table %s does not exist. Please fully qualify the destination table in [DB Name].[Schema Name].[Table Name] format',16,16, @full_path1) with nowait;
						return 16
					END

			END

		
		declare @project_nm nvarchar(250)
		declare @project_id nvarchar(250)
		declare @client_secrets nvarchar(max)

		declare @svc_config xml = EDIS.ifn_get_svc_config(@bq_svc_id)

		set @project_nm = @svc_config.value('(/EDIS_SVC_CONFIG/project_nm)[1]','nvarchar(250)')
		set @project_id = @svc_config.value('(/EDIS_SVC_CONFIG/project_nm)[1]','nvarchar(250)')
		set @client_secrets = @svc_config.value('(/EDIS_SVC_CONFIG/client_secrets)[1]','nvarchar(max)')

		DECLARE @xml XML = (
			SELECT 
			   @bq_svc_id as bq_svc_id
			  ,@project_nm as project_nm
			  ,@project_id as project_id
			  ,@client_secrets as client_secrets
			  ,isnull(@bq_fetch_size,1000) as bq_fetch_size
			  ,isnull(@batch_size,10000) as batch_size
			  ,isnull(@crt_dest_tbl,0) as crt_dest_tbl
			  ,isnull(@load_on_ordinal,0) as load_on_ordinal
			  ,@src_qry as src_qry
			  ,@tgt_db as tgt_db
			  ,@tgt_schema as tgt_schema
			  ,@tgt_tbl as tgt_tbl
			  ,@dest_cn_str as dest_cn_str
			  ,isnull(@proxy_id,'') as proxy_id
			  ,isnull(@max_col_width,255) as max_col_width
			  , 'bigquery_task' as primary_task
			  , 'import_data' as sub_task
			  , 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml


	GO

	--{INSTALL_STEP}Create Proc usp_bigquery_export_data{/INSTALL_STEP}

	create proc EDIS.usp_bigquery_export_data
		 @bq_svc_id nvarchar(255)
		,@src_svc_id nvarchar(255) = @@servername
		,@src_qry nvarchar(max)
		,@dataset_nm nvarchar(1000)
		,@dest_tbl_nm nvarchar(1000)
		--,@crt_dest_tbl bit = 0
		,@truncate_existing bit = 0
		,@drop_existing bit = 0
		--,@overwrite_existing bit = 0
		,@merge_dest_tbl bit = 0
		,@dest_tbl_key_cols nvarchar(max) = ''
		,@work_dir nvarchar(1000)
		with encryption
	as
	BEGIN

		set nocount on;
		-- copyright notice

		IF NOT EXISTS(SELECT 1 FROM EDIS.lkup_service_id WHERE service_id = @bq_svc_id)
			BEGIN
				RAISERROR('BigQuery Service ID [%s] was not found. Please check that you are referencing the correct service ID',16,16,@bq_svc_id) with NOWAIT;
				RETURN 16;
			END

		if EDIS.fn_check_perm(@bq_svc_id) = 0
			begin
				DECLARE @lock_msg VARCHAR(MAX) = 
				'Service ID ['+@bq_svc_id+'] has been locked by an administrator. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'To use this Service ID, you will need an administrator to run the SQL Command below '
				SET @lock_msg += 'with the @usr_id parameter set as a global group or database role that you are a member of. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'You can also set the @usr_id parameter as your individual ID as well ['+SUSER_NAME()+']:'+CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)
				SET @lock_msg += 'EXEC SSISDB.EDIS.usp_config_svc_id_perm @svc_id = '''+@bq_svc_id+''''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@usr_id = ''DOMAIN\YOUR_GLOBAL_GROUP OR DATABASE ROLE OR YOUR USER ID'''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@action = ''INSERT'''


				RAISERROR(@lock_msg,16,16) WITH NOWAIT
				--RAISERROR('BigQuery Service ID [%s] has been locked by an administrator. Please contact them to obtain access.',16,16,@bq_svc_id) WITH NOWAIT
				RETURN 16
			end

		DECLARE @src_platform varchar(250), @src_cn_provider varchar(250), @src_cn_sub_provider varchar(250), @src_cn_str varchar(4000);

		-- validate source query syntax if host server
		if @src_svc_id = @@servername
			BEGIN

				declare @check_err_msg varchar(max) = EDIS.ifn_validate_qry(@src_qry);

				IF @check_err_msg is not null
					BEGIN
						raiserror(@check_err_msg, 16,16) with nowait;
						return 16
					END

			END
		
		declare @proxy_id nvarchar(255);



		-- get connection info
		IF NOT EXISTS(SELECT 1 FROM SSISDB.EDIS.lkup_service_id where service_id = @src_svc_id)
			BEGIN
				declare @missing_src_err_msg varchar(max) = 'Source system ['+@src_svc_id+'] does not exist';
				raiserror(@missing_src_err_msg, 16,16) with nowait;
				return 16
			END
		ELSE
			BEGIN
				declare @src_svc_config xml = EDIS.ifn_get_svc_config(@src_svc_id)

				set @src_cn_provider = upper(@src_svc_config.value('(/EDIS_SVC_CONFIG/server_provider)[1]','nvarchar(250)'))
				set @src_cn_sub_provider = upper(@src_svc_config.value('(/EDIS_SVC_CONFIG/server_sub_provider)[1]','nvarchar(250)'))
				set @src_platform = upper(@src_svc_config.value('(/EDIS_SVC_CONFIG/server_platform)[1]','nvarchar(250)'))
				set @src_cn_str = @src_svc_config.value('(/EDIS_SVC_CONFIG/cn_str)[1]','nvarchar(4000)')

				set @proxy_id = isnull(@src_svc_config.value('(/EDIS_SVC_CONFIG/proxy_id)[1]','nvarchar(250)'),'')

				IF ISNULL(@proxy_id,'') <> '' 
					BEGIN
						DECLARE @proxy_check_err_msg NVARCHAR(MAX)
						DECLARE @proxy_check_res bit

						
						--EXEC EDIS.isp_check_proxy_id @proxy_id, @src_svc_id, @res_msg = @proxy_check_err_msg out;

						--if @proxy_check_err_msg <> 'PROXY_VALID' 
						--	BEGIN
						--		raiserror(@proxy_check_err_msg, 16,16) with nowait;
						--		return 16
						--	END


						EXEC EDIS.isp_get_sys_info @info_ind = 'CHECK_PROXY'
							,@info_arg_1 = @proxy_id
							,@res_msg = @proxy_check_err_msg OUT
							,@res = @proxy_check_res OUT
						;
		
						IF @proxy_check_res = 0
							BEGIN
								RAISERROR(@proxy_check_err_msg,16,16) WITH NOWAIT
								RETURN 16
							END
						;

					END

			END



		declare @project_nm nvarchar(250)
		declare @project_id nvarchar(250)
		declare @client_secrets nvarchar(max)

		declare @bq_svc_config xml = EDIS.ifn_get_svc_config(@bq_svc_id)

		set @project_nm = @bq_svc_config.value('(/EDIS_SVC_CONFIG/project_nm)[1]','nvarchar(250)')
		set @project_id = @bq_svc_config.value('(/EDIS_SVC_CONFIG/project_nm)[1]','nvarchar(250)')
		set @client_secrets = @bq_svc_config.value('(/EDIS_SVC_CONFIG/client_secrets)[1]','nvarchar(max)')

		DECLARE @xml XML = (
			SELECT 
			   @bq_svc_id as bq_svc_id
			  ,@project_nm as project_nm
			  ,@project_id as project_id
			  ,@client_secrets as client_secrets
			  --,isnull(@crt_dest_tbl,0) as crt_dest_tbl
			  ,isnull(@truncate_existing,0) as truncate_existing
			  ,isnull(@drop_existing,0) as drop_existing
			 -- ,isnull(@overwrite_existing,0) as overwrite_existing
			  ,isnull(@merge_dest_tbl,0) as merge_dest_tbl
			  ,isnull(@dest_tbl_key_cols,'') as dest_tbl_key_cols 
			  ,@src_qry as src_qry
			  ,@dataset_nm as dataset_nm
			  ,@dest_tbl_nm as dest_tbl_nm
			  ,@work_dir as work_dir
			  ,@src_svc_id as src_sys_nm
			  ,@src_platform as src_platform
			  ,@src_cn_provider as src_cn_provider
			  ,@src_cn_sub_provider as src_cn_sub_provider
			  ,@src_cn_str as src_cn_str
			  ,isnull(@proxy_id,'') as proxy_id
			  , 'bigquery_task' as primary_task
			  , 'export_data' as sub_task
			  , 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml
	END

	GO

	--{INSTALL_STEP}Create Proc usp_bigquery_crt_tbl_from_qry{/INSTALL_STEP}

	create proc EDIS.usp_bigquery_crt_tbl_from_qry
		 @bq_svc_id nvarchar(255)
		,@src_qry nvarchar(max)
		,@dataset_nm nvarchar(1000)
		,@dest_tbl_nm nvarchar(1000)
		,@drop_existing bit = 0
		with encryption
	as
	BEGIN

		set nocount on;
		-- copyright notice

		IF NOT EXISTS(SELECT 1 FROM EDIS.lkup_service_id WHERE service_id = @bq_svc_id)
			BEGIN
				RAISERROR('BigQuery Service ID [%s] was not found. Please check that you are referencing the correct service ID',16,16,@bq_svc_id) with NOWAIT;
				RETURN 16;
			END

		if EDIS.fn_check_perm(@bq_svc_id) = 0
			begin

				DECLARE @lock_msg VARCHAR(MAX) = 
				'Service ID ['+@bq_svc_id+'] has been locked by an administrator. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'To use this Service ID, you will need an administrator to run the SQL Command below '
				SET @lock_msg += 'with the @usr_id parameter set as a global group or database role that you are a member of. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'You can also set the @usr_id parameter as your individual ID as well ['+SUSER_NAME()+']:'+CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)
				SET @lock_msg += 'EXEC SSISDB.EDIS.usp_config_svc_id_perm @svc_id = '''+@bq_svc_id+''''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@usr_id = ''DOMAIN\YOUR_GLOBAL_GROUP OR DATABASE ROLE OR YOUR USER ID'''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@action = ''INSERT'''


				RAISERROR(@lock_msg,16,16) WITH NOWAIT
				--RAISERROR('BigQuery Service ID [%s] has been locked by an administrator. Please contact them to obtain access.',16,16,@bq_svc_id) WITH NOWAIT
				RETURN 16
			end

		declare @project_nm nvarchar(250)
		declare @project_id nvarchar(250)
		declare @client_secrets nvarchar(max)

		declare @svc_config xml = EDIS.ifn_get_svc_config(@bq_svc_id)

		set @project_nm = @svc_config.value('(/EDIS_SVC_CONFIG/project_nm)[1]','nvarchar(250)')
		set @project_id = @svc_config.value('(/EDIS_SVC_CONFIG/project_nm)[1]','nvarchar(250)')
		set @client_secrets = @svc_config.value('(/EDIS_SVC_CONFIG/client_secrets)[1]','nvarchar(max)')

		DECLARE @xml XML = (
			SELECT 
			   @bq_svc_id as bq_svc_id
			  ,@project_nm as project_nm
			  ,@project_id as project_id
			  ,@client_secrets as client_secrets
			  ,isnull(@drop_existing,0) as drop_existing
			  ,@src_qry as src_qry
			  ,@dataset_nm as dataset_nm
			  ,@dest_tbl_nm as dest_tbl_nm
			  , 'bigquery_task' as primary_task
			  , 'crt_tbl_from_qry' as sub_task
			  , 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml
	END

	GO

	--{INSTALL_STEP}Create Proc usp_bigquery_crt_tbl_from_qry{/INSTALL_STEP}

	create proc EDIS.usp_bigquery_append_data
		 @bq_svc_id nvarchar(255)
		,@src_qry nvarchar(max)
		,@dataset_nm nvarchar(1000)
		,@dest_tbl_nm nvarchar(1000)
		with encryption
	as
	BEGIN

		set nocount on;
		-- copyright notice

		IF NOT EXISTS(SELECT 1 FROM EDIS.lkup_service_id WHERE service_id = @bq_svc_id)
			BEGIN
				RAISERROR('BigQuery Service ID [%s] was not found. Please check that you are referencing the correct service ID',16,16,@bq_svc_id) with NOWAIT;
				RETURN 16;
			END

		if EDIS.fn_check_perm(@bq_svc_id) = 0
			begin
				DECLARE @lock_msg VARCHAR(MAX) = 
				'Service ID ['+@bq_svc_id+'] has been locked by an administrator. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'To use this Service ID, you will need an administrator to run the SQL Command below '
				SET @lock_msg += 'with the @usr_id parameter set as a global group or database role that you are a member of. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'You can also set the @usr_id parameter as your individual ID as well ['+SUSER_NAME()+']:'+CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)
				SET @lock_msg += 'EXEC SSISDB.EDIS.usp_config_svc_id_perm @svc_id = '''+@bq_svc_id+''''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@usr_id = ''DOMAIN\YOUR_GLOBAL_GROUP OR DATABASE ROLE OR YOUR USER ID'''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@action = ''INSERT'''
				RAISERROR(@lock_msg, 16,16) WITH NOWAIT
				--RAISERROR('BigQuery Service ID [%s] has been locked by an administrator. Please contact them to obtain access.',16,16,@bq_svc_id) WITH NOWAIT
				RETURN 16
			end

		declare @project_nm nvarchar(250)
		declare @project_id nvarchar(250)
		declare @client_secrets nvarchar(max)

		declare @svc_config xml = EDIS.ifn_get_svc_config(@bq_svc_id)

		set @project_nm = @svc_config.value('(/EDIS_SVC_CONFIG/project_nm)[1]','nvarchar(250)')
		set @project_id = @svc_config.value('(/EDIS_SVC_CONFIG/project_nm)[1]','nvarchar(250)')
		set @client_secrets = @svc_config.value('(/EDIS_SVC_CONFIG/client_secrets)[1]','nvarchar(max)')

		DECLARE @xml XML = (
			SELECT 
			   @bq_svc_id as bq_svc_id
			  ,@project_nm as project_nm
			  ,@project_id as project_id
			  ,@client_secrets as client_secrets
			  ,@src_qry as src_qry
			  ,@dataset_nm as dataset_nm
			  ,@dest_tbl_nm as dest_tbl_nm
			  , 'bigquery_task' as primary_task
			  , 'append_data' as sub_task
			  , 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml
	END

	GO

	--{INSTALL_STEP}Create Proc usp_bigquery_drop_tbl{/INSTALL_STEP}

	create proc EDIS.usp_bigquery_drop_tbl
		 @bq_svc_id nvarchar(255)
		,@dataset_nm nvarchar(1000)
		,@tbl_nm nvarchar(1000)
		,@fail_if_missing bit = 0
		with encryption
	as
	BEGIN

		set nocount on;
		-- copyright notice

		IF NOT EXISTS(SELECT 1 FROM EDIS.lkup_service_id WHERE service_id = @bq_svc_id)
			BEGIN
				RAISERROR('BigQuery Service ID [%s] was not found. Please check that you are referencing the correct service ID',16,16,@bq_svc_id) with NOWAIT;
				RETURN 16;
			END

		if EDIS.fn_check_perm(@bq_svc_id) = 0
			begin
				DECLARE @lock_msg VARCHAR(MAX) = 
				'Service ID ['+@bq_svc_id+'] has been locked by an administrator. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'To use this Service ID, you will need an administrator to run the SQL Command below '
				SET @lock_msg += 'with the @usr_id parameter set as a global group or database role that you are a member of. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'You can also set the @usr_id parameter as your individual ID as well ['+SUSER_NAME()+']:'+CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)
				SET @lock_msg += 'EXEC SSISDB.EDIS.usp_config_svc_id_perm @svc_id = '''+@bq_svc_id+''''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@usr_id = ''DOMAIN\YOUR_GLOBAL_GROUP OR DATABASE ROLE OR YOUR USER ID'''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@action = ''INSERT'''
				RAISERROR(@lock_msg, 16, 16) with NOWAIT
				--RAISERROR('BigQuery Service ID [%s] has been locked by an administrator. Please contact them to obtain access.',16,16,@bq_svc_id) WITH NOWAIT
				RETURN 16
			end

		declare @project_nm nvarchar(250)
		declare @project_id nvarchar(250)
		declare @client_secrets nvarchar(max)

		declare @svc_config xml = EDIS.ifn_get_svc_config(@bq_svc_id)

		set @project_nm = @svc_config.value('(/EDIS_SVC_CONFIG/project_nm)[1]','nvarchar(250)')
		set @project_id = @svc_config.value('(/EDIS_SVC_CONFIG/project_nm)[1]','nvarchar(250)')
		set @client_secrets = @svc_config.value('(/EDIS_SVC_CONFIG/client_secrets)[1]','nvarchar(max)')

		DECLARE @xml XML = (
			SELECT 
			   @bq_svc_id as svc_id
			  ,@project_nm as project_nm
			  ,@project_id as project_id
			  ,@client_secrets as client_secrets
			  ,@dataset_nm as dataset_nm
			  ,@tbl_nm as dest_tbl_nm
			  ,isnull(@fail_if_missing,0) as fail_if_missing
			  , 'bigquery_task' as primary_task
			  , 'drop_table' as sub_task
			  , 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml
	END

	GO

	--{INSTALL_STEP}Create Proc usp_bigquery_run_sql_cmd{/INSTALL_STEP}

	create proc EDIS.usp_bigquery_run_sql_cmd
		 @bq_svc_id nvarchar(255)
		,@dataset_nm nvarchar(1000)
		,@sql_cmd nvarchar(max)
		with encryption
	as
	BEGIN

		set nocount on;
		-- copyright notice

		IF NOT EXISTS(SELECT 1 FROM EDIS.lkup_service_id WHERE service_id = @bq_svc_id)
			BEGIN
				RAISERROR('BigQuery Service ID [%s] was not found. Please check that you are referencing the correct service ID',16,16,@bq_svc_id) with NOWAIT;
				RETURN 16;
			END

		if EDIS.fn_check_perm(@bq_svc_id) = 0
			begin
				DECLARE @lock_msg VARCHAR(MAX) = 
				'Service ID ['+@bq_svc_id+'] has been locked by an administrator. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'To use this Service ID, you will need an administrator to run the SQL Command below '
				SET @lock_msg += 'with the @usr_id parameter set as a global group or database role that you are a member of. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'You can also set the @usr_id parameter as your individual ID as well ['+SUSER_NAME()+']:'+CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)
				SET @lock_msg += 'EXEC SSISDB.EDIS.usp_config_svc_id_perm @svc_id = '''+@bq_svc_id+''''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@usr_id = ''DOMAIN\YOUR_GLOBAL_GROUP OR DATABASE ROLE OR YOUR USER ID'''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@action = ''INSERT'''
				RAISERROR(@lock_msg, 16, 16) with NOWAIT
				--RAISERROR('BigQuery Service ID [%s] has been locked by an administrator. Please contact them to obtain access.',16,16,@bq_svc_id) WITH NOWAIT
				RETURN 16
			end

		declare @project_nm nvarchar(250)
		declare @project_id nvarchar(250)
		declare @client_secrets nvarchar(max)

		declare @svc_config xml = EDIS.ifn_get_svc_config(@bq_svc_id)

		set @project_nm = @svc_config.value('(/EDIS_SVC_CONFIG/project_nm)[1]','nvarchar(250)')
		set @project_id = @svc_config.value('(/EDIS_SVC_CONFIG/project_nm)[1]','nvarchar(250)')
		set @client_secrets = @svc_config.value('(/EDIS_SVC_CONFIG/client_secrets)[1]','nvarchar(max)')

		DECLARE @xml XML = (
			SELECT 
			   @bq_svc_id as svc_id
			  ,@project_nm as project_nm
			  ,@project_id as project_id
			  ,@client_secrets as client_secrets
			  ,@dataset_nm as dataset_nm
			  ,@sql_cmd as sql_cmd
			  , 'bigquery_task' as primary_task
			  , 'sql_cmd' as sub_task
			  , 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml
	END
	GO

	--{INSTALL_STEP}Create Proc usp_run_sql_cmd{/INSTALL_STEP}

	CREATE PROC EDIS.usp_run_sql_cmd 
		 @srvr_nm nvarchar(1000)
		,@sql_cmd nvarchar(max)
		,@file_path nvarchar(1000) = null
		,@use_32_bit_runtime bit = 0
		WITH ENCRYPTION
	AS
	BEGIN
		SET NOCOUNT ON;
		-- copyright notice
		
		declare @access_msg varchar(8000), @server_platform nvarchar(250)

		if EDIS.fn_check_perm(@srvr_nm) = 0
			begin
				DECLARE @lock_msg VARCHAR(MAX) = 
				'Service ID ['+@srvr_nm+'] has been locked by an administrator. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'To use this Service ID, you will need an administrator to run the SQL Command below '
				SET @lock_msg += 'with the @usr_id parameter set as a global group or database role that you are a member of. '+CHAR(13)+CHAR(10)
				SET @lock_msg += 'You can also set the @usr_id parameter as your individual ID as well ['+SUSER_NAME()+']:'+CHAR(13)+CHAR(10)+CHAR(13)+CHAR(10)
				SET @lock_msg += 'EXEC SSISDB.EDIS.usp_config_svc_id_perm @svc_id = '''+@srvr_nm+''''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@usr_id = ''DOMAIN\YOUR_GLOBAL_GROUP OR DATABASE ROLE OR YOUR USER ID'''+CHAR(13)+CHAR(10)
				SET @lock_msg += '	,@action = ''INSERT'''
				RAISERROR(@lock_msg, 16, 16) with NOWAIT
				--set @access_msg = 'ID [%s] has been locked by an administrator. Please contact them to obtain access.'
				--RAISERROR(@access_msg,16,16,@srvr_nm) WITH NOWAIT
				RETURN 16
			end

		declare @err_msg varchar(8000)

		-- if excel/access make sure file path is supplied
		if upper(@srvr_nm) in ('EXCEL','ACCESS') 
			BEGIN
				set @server_platform = upper(@srvr_nm)
				if isnull(ltrim(rtrim(@file_path)),'') = ''
					BEGIN
						set @err_msg = concat('the @file_path parameter is required to run a sql cmd against [',@srvr_nm,']')
						RAISERROR(@err_msg, 16,16) with nowait;
						return 16
					END
				else if EDIS.ufn_does_file_exist(@file_path) = 0 
					BEGIN
						set @err_msg = concat('File Path [',@file_path,'] does not exist.')
						RAISERROR(@err_msg, 16,16) with nowait;
						return 16
					END
			END
		ELSE if not exists(select 1 from EDIS.lkup_service_id where service_id = @srvr_nm)
			begin
				set @err_msg = concat(
					'Server name [',@srvr_nm,'] was not found in reference table EDIS.lkup_service_id')
				raiserror(@err_msg,16,16) with nowait
				return 16
			end

		
		declare @proxy_id nvarchar(255) = '';
		declare @cn_str nvarchar(4000), @cn_provider varchar(250), @cn_sub_provider varchar(1000), @ace_version nvarchar(250)
		
		if upper(@srvr_nm) not in ('EXCEL','ACCESS')
			BEGIN

				declare @svc_config xml = EDIS.ifn_get_svc_config(@srvr_nm)

				set @cn_provider = @svc_config.value('(/EDIS_SVC_CONFIG/server_provider)[1]','nvarchar(250)')
				set @cn_sub_provider = @svc_config.value('(/EDIS_SVC_CONFIG/server_sub_provider)[1]','nvarchar(250)')
				--set @platform = @svc_config.value('(/EDIS_SVC_CONFIG/server_platform)[1]','nvarchar(250)')
				set @cn_str = @svc_config.value('(/EDIS_SVC_CONFIG/cn_str)[1]','nvarchar(4000)')

				

				set @proxy_id = isnull(@svc_config.value('(/EDIS_SVC_CONFIG/proxy_id)[1]','nvarchar(250)'),'')

				IF ISNULL(@proxy_id,'') <> '' --and @proxy_exec_in_progress = 0
				BEGIN
					DECLARE @proxy_check_err_msg NVARCHAR(MAX)
					DECLARE @proxy_check_res bit

					
					--EXEC EDIS.isp_check_proxy_id @proxy_id, @srvr_nm, @res_msg = @proxy_check_err_msg out;

					--if @proxy_check_err_msg <> 'PROXY_VALID' 
					--	BEGIN
					--		raiserror(@proxy_check_err_msg, 16,16) with nowait;
					--		return 16
					--	END


					EXEC EDIS.isp_get_sys_info @info_ind = 'CHECK_PROXY'
						,@info_arg_1 = @proxy_id
						,@res_msg = @proxy_check_err_msg OUT
						,@res = @proxy_check_res OUT
					;
		
					IF @proxy_check_res = 0
						BEGIN
							RAISERROR(@proxy_check_err_msg,16,16) WITH NOWAIT
							RETURN 16
						END
					;

				END

			END
		ELSE
			BEGIN
				set @cn_provider = 'OLEDB';

				-- for MDB/xls, it uses jet
				if upper(right(@file_path,3)) in ('XLS','MDB')
					BEGIN
						set @use_32_bit_runtime = 1
						set @ace_version = '12' -- this is meaningless..just a placeholder
					END
				ELSE
					BEGIN
						declare @ace_version_composite varchar(250) = EDIS.ifn_get_ms_ace_version();
						IF @ace_version_composite is null
							BEGIN
								Raiserror('In order to connect to MS Access/Excel, the Microsoft ACE Driver needs to be installed',16,16) with nowait;
								return 16;
							END

						set @ace_version = left(@ace_version_composite,2)

						if left(@ace_version_composite,2) = '32'
							BEGIN
								set @use_32_bit_runtime = 1
							END
						ELSE
							BEGIN
								set @use_32_bit_runtime = 0
							END

					END

			END

		 declare @xml xml = (
			select 
				 isnull(@cn_str,'') as cn_str
				,@srvr_nm as src_sys_nm
				,@sql_cmd as sql_cmd
				,@cn_provider as cn_provider
				,isnull(@cn_sub_provider,'') as cn_sub_provider
				,'sql_cmd_task' as primary_task
				,'run_sql_cmd' as sub_task
				,'MDDT_AUTH_CALLER_#x$^71' as caller_auth
				,isnull(@ace_version,'') as ace_engine_version
				,isnull(@file_path,'') as file_path
				,isnull(@server_platform,'') as server_platform
				,isnull(@use_32_bit_runtime,0) as use_32_bit_runtime
				,isnull(@proxy_id,'') as proxy_id
			for xml path ('root')
		)

		declare @ret_cd int
		exec @ret_cd = EDIS.isp_run_task @xml  

		return @ret_cd

	END    

	GO

	--{INSTALL_STEP}Create Proc usp_config_db_conn{/INSTALL_STEP}

	create proc EDIS.usp_config_db_conn
		 @server_id nvarchar(250)
		,@server_platform nvarchar(250)
		,@server_provider nvarchar(10)
		,@use_ado_net bit = 0
		,@cn_str nvarchar(4000) 
		WITH EXECUTE AS OWNER, ENCRYPTION
	as
	begin
		SET NOCOUNT ON;
		-- Copyright Notice 

		set nocount on;

		if upper(@server_provider) not in ('OLEDB','ODBC')
			BEGIN
				raiserror('Server provider must be OLEDB or ODBC', 16,16) with nowait;
				return 16;
			END

		declare @msg varchar(max) 

		open symmetric key [SQLETL_EDIS_SKEY]
					decryption by certificate [SQLETL_EDIS_CERT]

		declare @config varbinary(max) = 
			ENCRYPTBYKEY(KEY_GUID('SQLETL_EDIS_SKEY'),CAST(CAST((SELECT 
						    'DB_CONN' AS service_type
							,@server_platform as server_platform
							,CASE WHEN
								isnull(@use_ado_net,0) = 1 THEN 'ADO.NET' ELSE @server_provider END as server_provider
							,CASE WHEN isnull(@use_ado_net,0) = 1 THEN @server_provider ELSE '' end as server_sub_provider
							,@cn_str as cn_str
						FOR XML PATH ('EDIS_SVC_CONFIG')
					) AS XML) as Nvarchar(max)))

		close symmetric key [SQLETL_EDIS_SKEY];

		IF NOT EXISTS(SELECT 1 FROM EDIS.lkup_service_id where service_id = @server_id)
			BEGIN
				INSERT EDIS.lkup_service_id (service_id, last_upd_ts, service_type, service_config)
				VALUES (@server_id, getdate(), 'DB_CONN', @config)

				set @msg = 'Server ID ['+@server_id+'] added'

			END
		ELSE
			BEGIN
				UPDATE EDIS.lkup_service_id
					set last_upd_ts = getdate(), service_type = 'DB_CONN', service_config = @config
				WHERE service_id = @server_id

				set @msg = 'Server ID ['+@server_id+'] updated'

			END

		if (charindex(' ',@cn_str) > 0 and @server_provider = 'ODBC')
			BEGIN
				PRINT 'WARNING: ODBC Connection strings with spaces often fail to connect due to the specific ODBC driver not being able to interpret whitespace.'
				PRINT 'EDIS suggests that you rerun this procedure and remove the white space from the connection string unless you are certain your connection string whitespace is valid.'
			END

		-- validate connections that have passwords
		if (charindex('password', @cn_str) > 0 or charindex('pwd', @cn_str) > 0)
			BEGIN
				print 'validating connection'
				DECLARE @err_msg nvarchar(max) = null
				EXEC EDIS.isp_validate_db_conn
					@cn_str, @server_provider, @err_msg = @err_msg out
				;

				if @err_msg is not null
					BEGIN
						DECLARE @user_msg nvarchar(max) = 'There was an error attempting to validate the connection for ['+@server_id+'].'+char(13)+char(10)
						set @user_msg += 'Error Message: '+char(13)+char(10)+@err_msg
						RAISERROR(@user_msg, 16, 16) with nowait;
						return 16;
					END
				print 'validation complete. Connected Successfully'
			END

		print @msg
	
	end

	GO

	--{INSTALL_STEP}Create proc usp_config_email_acct{/INSTALL_STEP}

	Create proc EDIS.usp_config_email_acct
		  @svc_id nvarchar(255)
		 ,@smtp_host nvarchar(1000)
		 ,@port int 
		 ,@user_id nvarchar(1000) = ''
		 ,@pwd nvarchar(1000) = ''
		 ,@sender_email_address nvarchar(500)
		 ,@sender_email_display_nm nvarchar(500) = ''
		 ,@use_ssl bit = 0
		WITH EXECUTE AS OWNER, ENCRYPTION
	as
	begin
		SET NOCOUNT ON;
		-- Copyright Notice 

		set nocount on;

		declare @msg varchar(max) 

		open symmetric key [SQLETL_EDIS_SKEY]
					decryption by certificate [SQLETL_EDIS_CERT]

		declare @config varbinary(max) = 
			ENCRYPTBYKEY(KEY_GUID('SQLETL_EDIS_SKEY'),CAST(CAST((SELECT 
						    'EMAIL_ACCT' AS service_type
							,@smtp_host as smtp_host
							,@port as port
							,@user_id as svc_uid
							,@pwd as svc_pwd
							,@use_ssl as use_ssl
							,@sender_email_address as sender_email_address
							,@sender_email_display_nm as sender_email_display_nm
						FOR XML PATH ('EDIS_SVC_CONFIG')
					) AS XML) as Nvarchar(max)))

		close symmetric key [SQLETL_EDIS_SKEY];

		IF NOT EXISTS(SELECT 1 FROM EDIS.lkup_service_id where service_id = @svc_id)
			BEGIN
				INSERT EDIS.lkup_service_id (service_id, last_upd_ts, service_type, service_config)
				VALUES (@svc_id, getdate(), 'EMAIL_ACCT', @config)

				set @msg = 'Email Service ID ['+@svc_id+'] added'

			END
		ELSE
			BEGIN
				UPDATE EDIS.lkup_service_id
					set last_upd_ts = getdate(), service_type = 'EMAIL_ACCT', service_config = @config
				WHERE service_id = @svc_id

				set @msg = 'Email Service ID ['+@svc_id+'] updated'

			END


		print @msg
	
	end

	GO

	--{INSTALL_STEP}Create proc isp_get_cn_template{/INSTALL_STEP}

	CREATE PROC EDIS.isp_get_cn_template
		 @service_id nvarchar(255)
		,@statement nvarchar(max) = null out

		WITH ENCRYPTION
		as
			SET NOCOUNT ON;
			-- Copyright Notice 


			declare @config xml = SSISDB.EDIS.ifn_get_svc_config(@service_id);

			declare @cn_str nvarchar(4000) = @config.value('(/EDIS_SVC_CONFIG/cn_str)[1]','nvarchar(4000)')
			declare @platform nvarchar(250) = @config.value('(/EDIS_SVC_CONFIG/server_platform)[1]','nvarchar(250)')
			declare @provider nvarchar(10) = @config.value('(/EDIS_SVC_CONFIG/server_provider)[1]','nvarchar(250)')
			declare @sub_provider nvarchar(10) = @config.value('(/EDIS_SVC_CONFIG/server_sub_provider)[1]','nvarchar(250)')
			declare @proxy_id nvarchar(255) = isnull(@config.value('(/EDIS_SVC_CONFIG/proxy_id)[1]','nvarchar(250)'),'')

			declare @use_ado_net bit = 0;
			if @provider = 'ADO.NET' set @use_ado_net = 1;

			if @use_ado_net = 1 set @provider = @sub_provider;

			declare @props as table (prop_nm nvarchar(255), prop_val nvarchar(max));
			insert @props
			exec SSISDB.edis.isp_get_cn_props @service_id;

			--select * from @props

			DECLARE @cn_provider nvarchar(255) = (SELECT prop_val FROM @props WHERE prop_nm = 'Provider');


			if (@proxy_id <> '' OR @cn_provider in ('SQLOLEDB'))
				BEGIN
					--select * from @props;

					declare @instance nvarchar(255)  = (SELECT prop_val from @props where prop_nm = 'Data Source')
					declare @default_db nvarchar(255)  = isnull((SELECT prop_val from @props where prop_nm = 'Initial Catalog'),'master')
					declare @use_integrated_security bit = 0
					IF EXISTS(SELECT 1 FROM @props where prop_val = 'SSPI')
						set @use_integrated_security = 1
					;

					declare @sql_auth_user_id nvarchar(255)
					declare @sql_auth_password nvarchar(255)
					declare @windows_auth_user_id nvarchar(255)

					if @use_integrated_security = 1
						BEGIN
							SET @windows_auth_user_id = (
								SELECT c.credential_identity
								FROM MSDB.dbo.sysproxies as p
									INNER JOIN master.sys.credentials as c
										on p.credential_id = c.credential_id
								WHERE p.name = @proxy_id
							)

							set @statement = concat(
								'/* ',char(13)+char(10)
								,'	For security reasons, EDIS does not store the password to a Windows account.',char(13)+char(10)
								,'	Please contact the owner of the Windows account to update the password in the template below.',char(13)+char(10)
								,'*/',char(13)+char(10)+char(13)+char(10)
									,'EXEC SSISDB.EDIS.usp_config_db_conn_mssql @server_id = ''',@service_id,'''',char(13)+char(10)
										,'	,@server_instance = ''',@instance,'''',char(13)+char(10)
										,'	,@default_db = ''',@default_db,'''',char(13)+char(10)
										,'	,@use_integrated_security = 1',char(13)+char(10)
										,'	,@windows_auth_user_id = ''',@windows_auth_user_id,'''',char(13)+char(10)
										,'	,@windows_auth_password = ''XXXXXXXXXXXXXXXXXXXXX''',char(13)+char(10)
					)

						END
					ELSE
						BEGIN
							set @sql_auth_user_id = (SELECT prop_val from @props where prop_nm = 'User ID')
							set @sql_auth_password = (SELECT prop_val from @props where prop_nm = 'Password')

							set @statement = concat(
									'EXEC SSISDB.EDIS.usp_config_db_conn_mssql @server_id = ''',@service_id,'''',char(13)+char(10)
										,'	,@server_instance = ''',@instance,'''',char(13)+char(10)
										,'	,@default_db = ''',@default_db,'''',char(13)+char(10)
										,'	,@use_integrated_security = 0',char(13)+char(10)
										,'	,@sql_auth_user_id = ''',@sql_auth_user_id,'''',char(13)+char(10)
										,'	,@sql_auth_password = ''',@sql_auth_password,'''',char(13)+char(10)
							);

						END

			

			
				END
			ELSE
				BEGIN
					set @statement = concat(
						'EXEC SSISDB.EDIS.usp_config_db_conn @server_id = ''',@service_id,'''',char(13)+char(10)
						,'	,@server_platform = ''',@platform,'''',char(13)+char(10)
						,'	,@server_provider = ''',@provider,'''',char(13)+char(10)
						,'	,@use_ado_net = ',@use_ado_net,'',char(13)+char(10)
						,'	,@cn_str = ''',@cn_str,'''',char(13)+char(10)
					)
				END
			
				

			print @statement

	GO

	--{INSTALL_STEP}Create proc usp_config_ews_acct{/INSTALL_STEP}

	Create proc EDIS.usp_config_ews_acct
		  @svc_id nvarchar(255)
		 ,@user_id nvarchar(1000)
		 ,@domain nvarchar(1000) = ''
		 ,@password nvarchar(1000)
		 ,@email_acct nvarchar(1000) 
		 ,@exchange_version nvarchar(15) 
		 ,@office_365_url nvarchar(500) = ''
		WITH EXECUTE AS OWNER, ENCRYPTION
	as
	begin
		SET NOCOUNT ON;
		-- Copyright Notice 

		set nocount on;

		declare @msg varchar(max) 

		-- validate exchange version
		if lower(@exchange_version) not in ('2007_sp1','2010','2010_sp1','2010_sp2','2013','2013_sp1')
			BEGIN
				set @msg = concat(
						'Parameter @exchange_version only accepts the following values:'
						,char(13)+char(10),'2007_sp1'
						,char(13)+char(10),'2010'
						,char(13)+char(10),'2010_sp1'
						,char(13)+char(10),'2010_sp2'
						,char(13)+char(10),'2013'
						,char(13)+char(10),'2013_sp1'
						,char(13)+char(10),'For accounts using Office 365, use value "2013" for the exchange version'
				)
				raiserror(@msg,16,16) with nowait;
				return 16;

			END


		open symmetric key [SQLETL_EDIS_SKEY]
					decryption by certificate [SQLETL_EDIS_CERT]

		declare @config varbinary(max) = 
			ENCRYPTBYKEY(KEY_GUID('SQLETL_EDIS_SKEY'),CAST(CAST((SELECT 
						    'EWS_ACCT' AS service_type
							,@user_id as svc_uid
							,@password as svc_pwd
							,@domain as domain
							,@email_acct as email_acct
							,@exchange_version as exchange_version
							,@office_365_url as office_365_url
						FOR XML PATH ('EDIS_SVC_CONFIG')
					) AS XML) as Nvarchar(max)))

		close symmetric key [SQLETL_EDIS_SKEY];

		IF NOT EXISTS(SELECT 1 FROM EDIS.lkup_service_id where service_id = @svc_id)
			BEGIN
				INSERT EDIS.lkup_service_id (service_id, last_upd_ts, service_type, service_config)
				VALUES (@svc_id, getdate(), 'EWS_ACCT', @config)

				set @msg = 'Exchange Web Services (EWS) Service ID ['+@svc_id+'] added'

			END
		ELSE
			BEGIN
				UPDATE EDIS.lkup_service_id
					set last_upd_ts = getdate(), service_type = 'EWS_ACCT', service_config = @config
				WHERE service_id = @svc_id

				set @msg = 'Exchange Web Services (EWS) Service ID ['+@svc_id+'] updated'

			END


		print @msg
	
	end

	GO

	--{INSTALL_STEP}Create proc usp_email_create_folder{/INSTALL_STEP}

	CREATE proc EDIS.usp_email_create_folder
		 @svc_id nvarchar(250)
		,@folder_nm nvarchar(250)
		,@parent_folder_path nvarchar(250)
		with encryption
	as
		set nocount on;
		-- Copyright Notice 

		if not exists(Select 1 from EDIS.lkup_service_id where service_id = @svc_id)
			BEGIN
				RAISERROR('Parameter @svc_id with value [%s] does not exist. Please use procedure EDIS.usp_config_ews_acct to create an EWS service ID', 16,16, @svc_id) with nowait;
				return 16;
			END

		-- is the service ID EWS?
		if not exists(Select 1 from EDIS.lkup_service_id where service_id = @svc_id and service_type = 'EWS_ACCT')
			BEGIN
				RAISERROR('Service ID [%s] must be an Exchange Web Service (EWS) account for this procedure to work. Please use procedure EDIS.usp_config_ews_acct to create an EWS service ID', 16,16, @svc_id) with nowait;
				return 16;
			END

		declare 
			  @svc_uid nvarchar(1000)
			, @svc_pwd nvarchar(1000)
			, @domain nvarchar(1000)
			, @email_acct nvarchar(1000)
			, @office_365_url nvarchar(1000)
			, @exchange_version nvarchar(1000)
		;

		declare @svc_config xml = EDIS.ifn_get_svc_config(@svc_id);

		set @svc_uid = @svc_config.value('(/EDIS_SVC_CONFIG/svc_uid)[1]','nvarchar(1000)')
		set @svc_pwd = @svc_config.value('(/EDIS_SVC_CONFIG/svc_pwd)[1]','nvarchar(1000)')
		set @domain = @svc_config.value('(/EDIS_SVC_CONFIG/domain)[1]','nvarchar(1000)')
		set @email_acct = @svc_config.value('(/EDIS_SVC_CONFIG/email_acct)[1]','nvarchar(1000)')
		set @exchange_version = @svc_config.value('(/EDIS_SVC_CONFIG/exchange_version)[1]','nvarchar(1000)')
		set @office_365_url = @svc_config.value('(/EDIS_SVC_CONFIG/office_365_url)[1]','nvarchar(1000)')

		DECLARE @xml XML = (
			SELECT 
			    @svc_uid as svc_uid
			   ,@svc_pwd as svc_pwd
			   ,@domain as domain
			   ,@email_acct as email_acct
			   ,@office_365_url as office_365_url
			   ,@exchange_version as exchange_version
			   ,@folder_nm as folder_nm
			   ,@parent_folder_path as parent_folder_path
			  , 'ews_task' as primary_task
			  , 'create_folder' as sub_task
			  , 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml
			

	GO

	--{INSTALL_STEP}Create proc usp_email_delete_folder{/INSTALL_STEP}

	CREATE proc EDIS.usp_email_delete_folder
		 @svc_id nvarchar(250)
		,@folder_nm nvarchar(250)
		,@parent_folder_path nvarchar(250)
		with encryption
	as
		set nocount on;
		-- Copyright Notice 

		if not exists(Select 1 from EDIS.lkup_service_id where service_id = @svc_id)
			BEGIN
				RAISERROR('Parameter @svc_id with value [%s] does not exist. Please use procedure EDIS.usp_config_ews_acct to create an EWS service ID', 16,16, @svc_id) with nowait;
				return 16;
			END

		-- is the service ID EWS?
		if not exists(Select 1 from EDIS.lkup_service_id where service_id = @svc_id and service_type = 'EWS_ACCT')
			BEGIN
				RAISERROR('Service ID [%s] must be an Exchange Web Service (EWS) account for this procedure to work. Please use procedure EDIS.usp_config_ews_acct to create an EWS service ID', 16,16, @svc_id) with nowait;
				return 16;
			END

		declare 
			  @svc_uid nvarchar(1000)
			, @svc_pwd nvarchar(1000)
			, @domain nvarchar(1000)
			, @email_acct nvarchar(1000)
			, @office_365_url nvarchar(1000)
			, @exchange_version nvarchar(1000)
		;

		declare @svc_config xml = EDIS.ifn_get_svc_config(@svc_id);

		set @svc_uid = @svc_config.value('(/EDIS_SVC_CONFIG/svc_uid)[1]','nvarchar(1000)')
		set @svc_pwd = @svc_config.value('(/EDIS_SVC_CONFIG/svc_pwd)[1]','nvarchar(1000)')
		set @domain = @svc_config.value('(/EDIS_SVC_CONFIG/domain)[1]','nvarchar(1000)')
		set @email_acct = @svc_config.value('(/EDIS_SVC_CONFIG/email_acct)[1]','nvarchar(1000)')
		set @exchange_version = @svc_config.value('(/EDIS_SVC_CONFIG/exchange_version)[1]','nvarchar(1000)')
		set @office_365_url = @svc_config.value('(/EDIS_SVC_CONFIG/office_365_url)[1]','nvarchar(1000)')

		DECLARE @xml XML = (
			SELECT 
			    @svc_uid as svc_uid
			   ,@svc_pwd as svc_pwd
			   ,@domain as domain
			   ,@email_acct as email_acct
			   ,@office_365_url as office_365_url
			   ,@exchange_version as exchange_version
			   ,@folder_nm as folder_nm
			   ,@parent_folder_path as parent_folder_path
			  , 'ews_task' as primary_task
			  , 'delete_folder' as sub_task
			  , 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml
			

	GO

	--{INSTALL_STEP}Create proc usp_email_create_cal_appt{/INSTALL_STEP}

	CREATE proc EDIS.usp_email_create_cal_appt
		 @svc_id nvarchar(250)
		,@subject nvarchar(250)
		,@start_ts datetime
		,@end_ts datetime
		,@location nvarchar(250) = null
		,@body nvarchar(max) = null
		,@category nvarchar(250) = null
		,@invite_list nvarchar(max) = null
		with encryption
	as
		set nocount on;
		-- Copyright Notice 

		if not exists(Select 1 from EDIS.lkup_service_id where service_id = @svc_id)
			BEGIN
				RAISERROR('Parameter @svc_id with value [%s] does not exist. Please use procedure EDIS.usp_config_ews_acct to create an EWS service ID', 16,16, @svc_id) with nowait;
				return 16;
			END

		-- is the service ID EWS?
		if not exists(Select 1 from EDIS.lkup_service_id where service_id = @svc_id and service_type = 'EWS_ACCT')
			BEGIN
				RAISERROR('Service ID [%s] must be an Exchange Web Service (EWS) account for this procedure to work. Please use procedure EDIS.usp_config_ews_acct to create an EWS service ID', 16,16, @svc_id) with nowait;
				return 16;
			END

		declare 
			  @svc_uid nvarchar(1000)
			, @svc_pwd nvarchar(1000)
			, @domain nvarchar(1000)
			, @email_acct nvarchar(1000)
			, @office_365_url nvarchar(1000)
			, @exchange_version nvarchar(1000)
		;

		declare @svc_config xml = EDIS.ifn_get_svc_config(@svc_id);

		set @svc_uid = @svc_config.value('(/EDIS_SVC_CONFIG/svc_uid)[1]','nvarchar(1000)')
		set @svc_pwd = @svc_config.value('(/EDIS_SVC_CONFIG/svc_pwd)[1]','nvarchar(1000)')
		set @domain = @svc_config.value('(/EDIS_SVC_CONFIG/domain)[1]','nvarchar(1000)')
		set @email_acct = @svc_config.value('(/EDIS_SVC_CONFIG/email_acct)[1]','nvarchar(1000)')
		set @exchange_version = @svc_config.value('(/EDIS_SVC_CONFIG/exchange_version)[1]','nvarchar(1000)')
		set @office_365_url = @svc_config.value('(/EDIS_SVC_CONFIG/office_365_url)[1]','nvarchar(1000)')

		DECLARE @xml XML = (
			SELECT 
			    @svc_uid as svc_uid
			   ,@svc_pwd as svc_pwd
			   ,@domain as domain
			   ,@email_acct as email_acct
			   ,@office_365_url as office_365_url
			   ,@exchange_version as exchange_version
			   ,@subject as 'subject'
			   ,@body as body
			   ,@start_ts as start_ts
			   ,@end_ts as end_ts
			   ,@location as 'location'
			   ,@category as category
			   ,@invite_list as invite_list
			  , 'ews_task' as primary_task
			  , 'create_calendar_appt' as sub_task
			  , 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml
			

	GO

	--{INSTALL_STEP}Create proc usp_email_move_messages{/INSTALL_STEP}

	CREATE proc EDIS.usp_email_move_messages
		 @svc_id nvarchar(250)
		,@src_folder_path nvarchar(250)
		,@tgt_folder_path nvarchar(250)
		,@msg_id_list nvarchar(max)
		with encryption
	as
		set nocount on;
		-- Copyright Notice 

		if not exists(Select 1 from EDIS.lkup_service_id where service_id = @svc_id)
			BEGIN
				RAISERROR('Parameter @svc_id with value [%s] does not exist. Please use procedure EDIS.usp_config_ews_acct to create an EWS service ID', 16,16, @svc_id) with nowait;
				return 16;
			END

		-- is the service ID EWS?
		if not exists(Select 1 from EDIS.lkup_service_id where service_id = @svc_id and service_type = 'EWS_ACCT')
			BEGIN
				RAISERROR('Service ID [%s] must be an Exchange Web Service (EWS) account for this procedure to work. Please use procedure EDIS.usp_config_ews_acct to create an EWS service ID', 16,16, @svc_id) with nowait;
				return 16;
			END

		declare 
			  @svc_uid nvarchar(1000)
			, @svc_pwd nvarchar(1000)
			, @domain nvarchar(1000)
			, @email_acct nvarchar(1000)
			, @office_365_url nvarchar(1000)
			, @exchange_version nvarchar(1000)
		;

		declare @svc_config xml = EDIS.ifn_get_svc_config(@svc_id);

		set @svc_uid = @svc_config.value('(/EDIS_SVC_CONFIG/svc_uid)[1]','nvarchar(1000)')
		set @svc_pwd = @svc_config.value('(/EDIS_SVC_CONFIG/svc_pwd)[1]','nvarchar(1000)')
		set @domain = @svc_config.value('(/EDIS_SVC_CONFIG/domain)[1]','nvarchar(1000)')
		set @email_acct = @svc_config.value('(/EDIS_SVC_CONFIG/email_acct)[1]','nvarchar(1000)')
		set @exchange_version = @svc_config.value('(/EDIS_SVC_CONFIG/exchange_version)[1]','nvarchar(1000)')
		set @office_365_url = @svc_config.value('(/EDIS_SVC_CONFIG/office_365_url)[1]','nvarchar(1000)')

		DECLARE @xml XML = (
			SELECT 
			    @svc_uid as svc_uid
			   ,@svc_pwd as svc_pwd
			   ,@domain as domain
			   ,@email_acct as email_acct
			   ,@office_365_url as office_365_url
			   ,@exchange_version as exchange_version
			   ,@src_folder_path as src_folder_path
			   ,@tgt_folder_path as tgt_folder_path
			   ,@msg_id_list as msg_id_list
			  , 'ews_task' as primary_task
			  , 'move_messages' as sub_task
			  , 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml
			

	GO

	--{INSTALL_STEP}Create proc usp_email_delete_messages{/INSTALL_STEP}

	CREATE proc EDIS.usp_email_delete_messages
		 @svc_id nvarchar(250)
		--,@folder_path nvarchar(250)
		,@msg_id_list nvarchar(max)
		with encryption
	as
		set nocount on;
		-- Copyright Notice 

		if not exists(Select 1 from EDIS.lkup_service_id where service_id = @svc_id)
			BEGIN
				RAISERROR('Parameter @svc_id with value [%s] does not exist. Please use procedure EDIS.usp_config_ews_acct to create an EWS service ID', 16,16, @svc_id) with nowait;
				return 16;
			END

		-- is the service ID EWS?
		if not exists(Select 1 from EDIS.lkup_service_id where service_id = @svc_id and service_type = 'EWS_ACCT')
			BEGIN
				RAISERROR('Service ID [%s] must be an Exchange Web Service (EWS) account for this procedure to work. Please use procedure EDIS.usp_config_ews_acct to create an EWS service ID', 16,16, @svc_id) with nowait;
				return 16;
			END

		declare 
			  @svc_uid nvarchar(1000)
			, @svc_pwd nvarchar(1000)
			, @domain nvarchar(1000)
			, @email_acct nvarchar(1000)
			, @office_365_url nvarchar(1000)
			, @exchange_version nvarchar(1000)
		;

		declare @svc_config xml = EDIS.ifn_get_svc_config(@svc_id);

		set @svc_uid = @svc_config.value('(/EDIS_SVC_CONFIG/svc_uid)[1]','nvarchar(1000)')
		set @svc_pwd = @svc_config.value('(/EDIS_SVC_CONFIG/svc_pwd)[1]','nvarchar(1000)')
		set @domain = @svc_config.value('(/EDIS_SVC_CONFIG/domain)[1]','nvarchar(1000)')
		set @email_acct = @svc_config.value('(/EDIS_SVC_CONFIG/email_acct)[1]','nvarchar(1000)')
		set @exchange_version = @svc_config.value('(/EDIS_SVC_CONFIG/exchange_version)[1]','nvarchar(1000)')
		set @office_365_url = @svc_config.value('(/EDIS_SVC_CONFIG/office_365_url)[1]','nvarchar(1000)')

		DECLARE @xml XML = (
			SELECT 
			    @svc_uid as svc_uid
			   ,@svc_pwd as svc_pwd
			   ,@domain as domain
			   ,@email_acct as email_acct
			   ,@office_365_url as office_365_url
			   ,@exchange_version as exchange_version
			  -- ,@folder_path as src_folder_path
			   ,@msg_id_list as msg_id_list
			  , 'ews_task' as primary_task
			  , 'delete_messages' as sub_task
			  , 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml
			

	GO

	--{INSTALL_STEP}Create proc usp_email_import_messages{/INSTALL_STEP}

	CREATE proc EDIS.[usp_email_import_messages]
		 @svc_id nvarchar(250)
		,@folder_path nvarchar(250)
		,@dest_tbl_nm nvarchar(1000)
		,@subject_filter nvarchar(1000) = null
		,@start_dt date = null
		,@end_dt date = null
		,@include_attachment_content bit = 0
		,@attachment_name_filter nvarchar(1000) = null
		,@body_format nvarchar(250) = 'text'
			WITH ENCRYPTION
	as
		set nocount on;
		-- Copyright Notice 

		if upper(isnull(@body_format,'')) not in ('HTML','TEXT')
			BEGIN
				Raiserror('Parameter @body_format must be either "HTML" or "TEXT"', 16,16) with nowait; 
				return 16;
			END

		if not exists(Select 1 from EDIS.lkup_service_id where service_id = @svc_id)
			BEGIN
				RAISERROR('Parameter @svc_id with value [%s] does not exist. Please use procedure EDIS.usp_config_ews_acct to create an EWS service ID', 16,16, @svc_id) with nowait;
				return 16;
			END

		-- is the service ID EWS?
		if not exists(Select 1 from EDIS.lkup_service_id where service_id = @svc_id and service_type = 'EWS_ACCT')
			BEGIN
				RAISERROR('Service ID [%s] must be an Exchange Web Service (EWS) account for this procedure to work. Please use procedure EDIS.usp_config_ews_acct to create an EWS service ID', 16,16, @svc_id) with nowait;
				return 16;
			END

		
		-- OUTPUT TABLE...If temp table, drop/recreate; if perm, only create if not exist

		declare @tgt_db nvarchar(255)
		declare @tgt_schema nvarchar(255)
		declare @tgt_tbl nvarchar(255)
		declare @full_path nvarchar(2000)


		if left(@dest_tbl_nm,2) = '##' 
			begin
				set @tgt_db = 'tempdb'
				set @tgt_schema = 'dbo'
				set @tgt_tbl = @dest_tbl_nm	
				set @full_path = 'tempdb.dbo.'+@dest_tbl_nm;
				print @full_path
				if OBJECT_ID('tempdb..'+@dest_tbl_nm) is not null 
					begin
						exec('drop table '+@full_path+'');
						print 'dropped temp table'
					end
			end
		else
			begin
				set @tgt_db = parsename(@dest_tbl_nm,3)
				set @tgt_schema = parsename(@dest_tbl_nm,2)
				set @tgt_tbl = parsename(@dest_tbl_nm,1)
				set @full_path = concat('[',@tgt_db,'].[',@tgt_schema,'].[',@tgt_tbl,']')

				if DB_ID(@tgt_db) is null
					BEGIN
						raiserror('If the destination table is not a temporary table, it must be fully qualified with the database_name.schema.table_name',16,16) with nowait;
						return 16
					END
				if object_id(@full_path) is not null 
					BEGIN
						raiserror('Permanent table %s already exists. You can only create permanent tables that don''t already exist.',16,16, @full_path) with nowait;
						return 16
					END
			end
		
		-- Create the table
		--print @full_path
		exec('
					create table '+@full_path+'
					(
						email_id varchar(512), folder_path varchar(4000), date_sent datetime2, date_received datetime2, subject nvarchar(500), body nvarchar(max)
						,to_recipients nvarchar(max), cc_recipients nvarchar(max), has_attachments bit
						,attachments nvarchar(max), attachment_cnt int
						,is_reply bit, is_forward bit, importance nvarchar(10)
					
					)
				
				
				')
		
		-- ---------------------------------------------------------------------------------------------------------------------

		declare 
			  @svc_uid nvarchar(1000)
			, @svc_pwd nvarchar(1000)
			, @domain nvarchar(1000)
			, @email_acct nvarchar(1000)
			, @office_365_url nvarchar(1000)
			, @exchange_version nvarchar(1000)
		;

		declare @svc_config xml = EDIS.ifn_get_svc_config(@svc_id);

		set @svc_uid = @svc_config.value('(/EDIS_SVC_CONFIG/svc_uid)[1]','nvarchar(1000)')
		set @svc_pwd = @svc_config.value('(/EDIS_SVC_CONFIG/svc_pwd)[1]','nvarchar(1000)')
		set @domain = @svc_config.value('(/EDIS_SVC_CONFIG/domain)[1]','nvarchar(1000)')
		set @email_acct = @svc_config.value('(/EDIS_SVC_CONFIG/email_acct)[1]','nvarchar(1000)')
		set @exchange_version = @svc_config.value('(/EDIS_SVC_CONFIG/exchange_version)[1]','nvarchar(1000)')
		set @office_365_url = @svc_config.value('(/EDIS_SVC_CONFIG/office_365_url)[1]','nvarchar(1000)')

		DECLARE @xml XML = (
			SELECT 
			    @svc_uid as svc_uid
			   ,@svc_pwd as svc_pwd
			   ,@domain as domain
			   ,@email_acct as email_acct
			   ,@office_365_url as office_365_url
			   ,@exchange_version as exchange_version
			   ,@folder_path as folder_path
			   ,@subject_filter as subject_filter
			   ,@start_dt as msg_start_dt
			   ,@end_dt as msg_end_dt
			   ,@include_attachment_content as include_attachment_content
			   ,@attachment_name_filter as attachment_name_filter
			   ,@body_format as body_format
			   ,@tgt_db as target_db
			   ,@tgt_schema as target_schema
			   ,@tgt_tbl as target_tbl

			  , 'ews_task' as primary_task
			  , 'import_messages' as sub_task
			  , 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml


	GO

	--{INSTALL_STEP}Create proc usp_email_save_attachment_to_file{/INSTALL_STEP}

	CREATE proc [EDIS].[usp_email_save_attachment_to_file]
		 @email_id varchar(512)
		,@src_tbl nvarchar(1000)
		,@folder_path nvarchar(255)
			WITH ENCRYPTION
	as
		set nocount on;
		-- Copyright Notice 

		DECLARE @contents xml;

			declare @sql nvarchar(max) = N'SET @contents = (select cast(attachments as xml) from '+@src_tbl+' WHERE email_id = @email_id)';
			declare @params nvarchar(max) = N'@contents xml out, @email_id varchar(512)';

			exec sp_executesql @sql, @params, @contents = @contents out, @email_id = @email_id;

			if @contents is null
				BEGIN
					RAISERROR('No attachments found for the supplied email id', 16,16) with nowait;
					return 16
				END
			
			if object_id('tempdb..#att') is not null drop table #att;

			select att.c.value('@ATTACHMENT_NAME', 'nvarchar(1000)') as attach_nm
				,att.c.value('@ATTACHMENT_CONTENT', 'varbinary(max)') as attach_content
			into #att
			from @contents.nodes('ATTACHMENTS/ATTACHMENT') as att(c)
			;

			declare @tot_recs int = @@rowcount;

			declare @curr_attach_nm nvarchar(1000), @curr_attach_content varbinary(max)
				,@full_attach_path nvarchar(1000);
		
			if right(@folder_path,1) <> '\' set @folder_path += '\'
			declare cs cursor local fast_forward for select attach_nm, attach_content
			from #att
			open cs
			fetch next from cs into @curr_attach_nm, @curr_attach_content
			while @@FETCH_STATUS = 0
				BEGIN
					set @full_attach_path = @folder_path + @curr_attach_nm
					exec SSISDB.edis.usp_convert_varbinary_to_file @bin_data = @curr_attach_content
						,@output_file_path = @full_attach_path
					;

					fetch next from cs into @curr_attach_nm, @curr_attach_content;
					
				END
			close cs
			deallocate cs

			drop table #att;

	GO


	--{INSTALL_STEP}Create proc usp_send_email{/INSTALL_STEP}

	CREATE proc EDIS.[usp_send_email]
		 @svc_id nvarchar(250)
		,@to nvarchar(max) = ''
		,@cc nvarchar(max) = ''
		,@bcc nvarchar(max) = ''
		,@subject nvarchar(500)
		,@body nvarchar(max)
		,@body_format varchar(4) = 'HTML'
		,@is_high_pri bit = 0
		,@file_attachment_path nvarchar(max) = ''
		,@qry nvarchar(max) = ''
		,@qry_attachment_path nvarchar(max) = ''
		,@col_delim nvarchar(255) = ''
		,@compress_qry_attachment bit = 0
		,@from nvarchar(1000) = ''
		,@from_display_nm nvarchar(1000) = ''
			WITH ENCRYPTION
	as
		set nocount on;
		-- Copyright Notice 

		if upper(isnull(@body_format,'')) not in ('HTML','TEXT')
			BEGIN
				Raiserror('Parameter @body_format must be either "HTML" or "TEXT"', 16,16) with nowait; 
				return 16;
			END


		if isnull(@to,'') = '' AND isnull(@cc,'') = '' and isnull(@bcc,'') = ''
			BEGIN
				RAISERROR('Atleast one recipient email address must be present to send an email. Parameters @to, @cc, and @bcc are all null', 16,16) with nowait;
				return 16;
			END

		if not exists(Select 1 from EDIS.lkup_service_id where service_id = @svc_id)
			BEGIN
				RAISERROR('Parameter @svc_id with value [%s] does not exist. Please use procedure EDIS.usp_config_email_acct to create an email service ID', 16,16, @svc_id) with nowait;
				return 16;
			END

		if not exists(Select 1 from EDIS.lkup_service_id where service_id = @svc_id and service_type = 'EMAIL_ACCT')
			BEGIN
				RAISERROR('Parameter @svc_id with value [%s] is not an email account. Please use procedure EDIS.usp_config_email_acct to create an email service ID', 16,16, @svc_id) with nowait;
				return 16;
			END

		-- check attachment existence
		if isnull(@file_attachment_path,'') <> ''
			BEGIN
				declare @files as table (file_nm nvarchar(4000));

				insert @files
				select *
				from EDIS.ufn_split_string(@file_attachment_path,';')
				;

				declare cs cursor local fast_forward for select file_nm from @files;
				declare @curr_file nvarchar(4000)
				open cs
				fetch next from cs into @curr_file
				while @@FETCH_STATUS = 0
					BEGIN
						IF EDIS.ufn_does_file_exist(@curr_file) = 0
							BEGIN
								close cs
								deallocate cs

								raiserror('Parameter @file_attachment_path contained a file [%s] that does not exist', 16,16, @curr_file) with nowait;
								return 16
							END

						fetch next from cs into @curr_file
					END
				close cs
				deallocate cs

			END

		-- ---------------------------------------------------------------------------------------------------------------------

		declare 
			  @user_id nvarchar(1000)
			, @pwd nvarchar(1000)
			, @smtp_host nvarchar(1000)
			, @port int
			, @use_ssl bit
			, @default_from_adrs nvarchar(1000)
			, @default_from_display_nm nvarchar(1000)
		;

		declare @svc_config xml = EDIS.ifn_get_svc_config(@svc_id);

		set @user_id = @svc_config.value('(/EDIS_SVC_CONFIG/svc_uid)[1]','nvarchar(1000)')
		set @pwd = @svc_config.value('(/EDIS_SVC_CONFIG/svc_pwd)[1]','nvarchar(1000)')
		set @smtp_host = @svc_config.value('(/EDIS_SVC_CONFIG/smtp_host)[1]','nvarchar(1000)')
		set @port = @svc_config.value('(/EDIS_SVC_CONFIG/port)[1]','int')
		set @use_ssl = @svc_config.value('(/EDIS_SVC_CONFIG/use_ssl)[1]','bit')
		set @default_from_adrs = @svc_config.value('(/EDIS_SVC_CONFIG/sender_email_address)[1]','nvarchar(1000)')
		set @default_from_display_nm = @svc_config.value('(/EDIS_SVC_CONFIG/sender_email_display_nm)[1]','nvarchar(1000)')

		if isnull(@from,'') = '' 
			BEGIN
				set @from = @default_from_adrs;
				set @from_display_nm = @default_from_display_nm;
			END

		--print @from

		DECLARE @xml XML = (
			SELECT 
			   @to as [to]
			  ,@cc as cc
			  ,@bcc as bcc
			  ,@subject as [subject]
			  ,@body as body
			  ,isnull(@body_format,'HTML') as body_format
			  ,@svc_id as svc_id
			  ,isnull(@is_high_pri,0) as is_high_pri
			  ,@file_attachment_path as file_attachment_path
			  ,isnull(@qry,'') as qry
			  ,isnull(@qry_attachment_path,'') as qry_attachment_path
			  ,isnull(@compress_qry_attachment,0) as compress_qry_attachment
			  ,isnull(@col_delim,'') as col_delim
			  ,@from as [from]
			  ,@from_display_nm as from_display_nm
			  ,@user_id as svc_uid
			  ,@pwd as svc_pwd
			  ,@smtp_host as smtp_host
			  ,@port as port
			  ,@use_ssl as use_ssl
			  , 'email_task' as primary_task
			  , 'send_email' as sub_task
			  , 'MDDT_AUTH_CALLER_#x$^71' as caller_auth
			for xml path('root')
		)

		exec EDIS.isp_run_task @xml


	GO

	--{INSTALL_STEP}Create proc isp_setup_proxy_id{/INSTALL_STEP}

	CREATE PROC EDIS.isp_setup_proxy_id 
		  @login_nm  nvarchar(1000)
		, @login_pwd  nvarchar(1000)
		, @proxy_id  nvarchar(1000)
		WITH ENCRYPTION
	AS	
		BEGIN
			EXEC MSDB.dbo.isp_SQLETL_EDIS_setup_proxy_id
				@login_nm, @login_pwd, @proxy_id
			;
		END

	GO

	--{INSTALL_STEP}Sign Proc isp_setup_proxy_id{/INSTALL_STEP}

	ADD SIGNATURE TO EDIS.isp_setup_proxy_id BY CERTIFICATE SQLETL_EDIS_ProxyCert
	WITH PASSWORD = '{PROXY_CERTIFICATE_PASSWORD}'

	GO

	--{INSTALL_STEP}Create proc usp_config_db_conn_mssql{/INSTALL_STEP}

	CREATE PROC EDIS.usp_config_db_conn_mssql
		 @server_id NVARCHAR(255)
		,@server_instance NVARCHAR(255)
		,@default_db NVARCHAR(255) = 'master'
		,@use_integrated_security BIT 
		,@sql_auth_user_id NVARCHAR(255) = ''
		,@sql_auth_password NVARCHAR(1000) = ''
		,@windows_auth_user_id NVARCHAR(255) = ''
		,@windows_auth_password NVARCHAR(1000) = ''
		WITH ENCRYPTION
	AS
		SET NOCOUNT ON;


		Declare @msg varchar(max)

		DECLARE @cn_str NVARCHAR(MAX) = 
			'Provider = SQLOLEDB; Data Source = '+@server_instance+'; Initial Catalog = '+ISNULL(@default_db,'master')+'; '
		

		DECLARE @proxy_id NVARCHAR(255) = ''

		IF @use_integrated_security = 1
			BEGIN
				SET @cn_str += 'Integrated Security = SSPI;'

				IF ISNULL(@windows_auth_user_id,'') <> ''
					BEGIN
						SET @proxy_id = 'SQLETL_EDIS_PROXY_'+REPLACE(@windows_auth_user_id,'\','_')

						DECLARE @ret_cd int
						EXEC @ret_cd = EDIS.isp_setup_proxy_id @login_nm = @windows_auth_user_id 
							, @login_pwd = @windows_auth_password  
							, @proxy_id = @proxy_id

						if @ret_cd <> 0 
							BEGIN
								declare @ret_err_msg varchar(8000) = Error_Message()
								raiserror(@ret_err_msg, 16,16) with nowait;
								return 16
							END

					END
			END
		ELSE
			BEGIN
				SET @cn_str += 'User Id = '+@sql_auth_user_id+'; Password = '+@sql_auth_password+';'
			END

		
		DECLARE @args XML = (
			SELECT
				 'DB_CONN' as service_type
				,@cn_str AS cn_str
				,'OLEDB' AS server_provider
				,'MSSQL' AS server_platform
				,@use_integrated_security AS use_integrated_security
				,@proxy_id AS proxy_id
			FOR XML PATH ('EDIS_SVC_CONFIG')

		)

		-- Encrypt Credentials

		DECLARE @args_enc VARBINARY(MAX)

		open symmetric key [SQLETL_EDIS_SKEY]
			decryption by certificate [SQLETL_EDIS_CERT]
		set @args_enc = ENCRYPTBYKEY(KEY_GUID('SQLETL_EDIS_SKEY'),CAST(@args AS NVARCHAR(MAX)))
		close symmetric key [SQLETL_EDIS_SKEY]

		IF NOT EXISTS(SELECT 1 FROM edis.lkup_service_id WHERE service_id = @server_id)
			BEGIN
				INSERT edis.lkup_service_id (service_id, last_upd_ts, service_type, service_config)
				SELECT @server_id, GETDATE(), 'DB_CONN', @args_enc

				set @msg = 'SQL Connection ['+@server_id+'] added'
			END
		ELSE
			BEGIN
				UPDATE edis.lkup_service_id
					SET service_config = @args_enc, last_upd_ts = GETDATE(), service_type = 'DB_CONN'
				WHERE service_id = @server_id
				set @msg = 'SQL Connection ['+@server_id+'] updated'
			END

		if @use_integrated_security = 0 
			BEGIN
				DECLARE @err_msg nvarchar(max) = null
				print 'validating connection'
				EXEC EDIS.isp_validate_db_conn
					@cn_str, 'oledb', @err_msg = @err_msg out
				;

				if @err_msg is not null
					BEGIN
						DECLARE @user_msg nvarchar(max) = 'There was an error attempting to validate the connection for ['+@server_id+'].'+char(13)+char(10)
						set @user_msg += 'Error Message: '+char(13)+char(10)+@err_msg
						RAISERROR(@user_msg, 16, 16) with nowait;
						return 16;
					END
				print 'Validation Complete. Connected Successfully'
			END
		
		print @msg

	GO

	--{INSTALL_STEP}Create proc usp_config_db_conn_msolap{/INSTALL_STEP}

	CREATE PROC EDIS.usp_config_db_conn_msolap
		 @server_id NVARCHAR(255)
		,@server_instance NVARCHAR(255)
		,@default_cube NVARCHAR(255) 
		,@use_integrated_security BIT 
		,@sql_auth_user_id NVARCHAR(255) = ''
		,@sql_auth_password NVARCHAR(1000) = ''
		,@windows_auth_user_id NVARCHAR(255) = ''
		,@windows_auth_password NVARCHAR(1000) = ''
		WITH ENCRYPTION
	AS
		SET NOCOUNT ON;


		Declare @msg varchar(max)

		DECLARE @cn_str NVARCHAR(MAX) = 
			'Provider = MSOLAP; Data Source = '+@server_instance+'; Initial Catalog = '+@default_cube+'; '
		

		DECLARE @proxy_id NVARCHAR(255) = ''

		IF @use_integrated_security = 1
			BEGIN
				SET @cn_str += 'Integrated Security = SSPI;'

				IF ISNULL(@windows_auth_user_id,'') <> ''
					BEGIN
						SET @proxy_id = 'SQLETL_EDIS_PROXY_'+REPLACE(@windows_auth_user_id,'\','_')

						DECLARE @ret_cd int
						EXEC @ret_cd = EDIS.isp_setup_proxy_id @login_nm = @windows_auth_user_id 
							, @login_pwd = @windows_auth_password  
							, @proxy_id = @proxy_id

						if @ret_cd <> 0 
							BEGIN
								declare @ret_err_msg varchar(8000) = Error_Message()
								raiserror(@ret_err_msg, 16,16) with nowait;
								return 16
							END

					END
			END
		ELSE
			BEGIN
				SET @cn_str += 'User Id = '+@sql_auth_user_id+'; Password = '+@sql_auth_password+';'
			END

		
		DECLARE @args XML = (
			SELECT
				 'DB_CONN' as service_type
				, @cn_str AS cn_str
				,'ADO.NET' AS server_provider -- SSAS needs to use ado.net connection or it has issues querying the data
				,'OLEDB' AS server_sub_provider
				,'MSOLAP' AS server_platform
				,@use_integrated_security AS use_integrated_security
				,@proxy_id AS proxy_id
			FOR XML PATH ('EDIS_SVC_CONFIG')

		)

		-- Encrypt Credentials

		DECLARE @args_enc VARBINARY(MAX)

		open symmetric key [SQLETL_EDIS_SKEY]
			decryption by certificate [SQLETL_EDIS_CERT]
		set @args_enc = ENCRYPTBYKEY(KEY_GUID('SQLETL_EDIS_SKEY'),CAST(@args AS NVARCHAR(MAX)))
		close symmetric key [SQLETL_EDIS_SKEY]

		IF NOT EXISTS(SELECT 1 FROM edis.lkup_service_id WHERE service_id = @server_id)
			BEGIN
				INSERT edis.lkup_service_id (service_id, last_upd_ts, service_type, service_config)
				SELECT @server_id, GETDATE(), 'DB_CONN', @args_enc

				set @msg = 'SSAS Connection ['+@server_id+'] added'
			END
		ELSE
			BEGIN
				UPDATE edis.lkup_service_id
					SET service_config = @args_enc, last_upd_ts = GETDATE(), service_type = 'DB_CONN'
				WHERE service_id = @server_id
				set @msg = 'SSAS Connection ['+@server_id+'] updated'
			END

		if @use_integrated_security = 0 
			BEGIN
				DECLARE @err_msg nvarchar(max) = null
				EXEC EDIS.isp_validate_db_conn
					@cn_str, 'oledb', @err_msg = @err_msg out
				;

				if @err_msg is not null
					BEGIN
						DECLARE @user_msg nvarchar(max) = 'There was an error attempting to validate the connection for ['+@server_id+'].'+char(13)+char(10)
						set @user_msg += 'Error Message: '+char(13)+char(10)+@err_msg
						RAISERROR(@user_msg, 16, 16) with nowait;
						return 16;
					END
			END
		
		print @msg

	GO

	-- ====================================================================================================================================
	-- Convert Old Server ID accounts

	--{INSTALL_STEP}Convert old server IDs to service IDs{/INSTALL_STEP}

	IF EXISTS(SELECT 1 FROM SYS.TABLES WHERE NAME = 'lkup_server_id' and schema_Name(schema_id) = 'EDIS')
		BEGIN
			
			BEGIN TRY
				
				BEGIN TRAN

					IF OBJECT_ID('tempdb..#edis') IS NOT NULL DROP TABLE #edis;

					SELECT CAST(s.server_id AS NVARCHAR(250)) AS service_id
						,CAST('DB_CONN' AS NVARCHAR(250)) AS service_type
						,CAST((SELECT 
								'DB_CONN' AS service_type
								,server_provider 
								,ISNULL(server_sub_provider,'') AS server_sub_provider
								,server_platform
								,CONVERT(NVARCHAR(MAX), DECRYPTBYKEYAUTOCERT(CERT_ID('SQLETL_EDIS_CERT'),NULL, cn_str)) AS cn_str
							FROM SSISDB.edis.lkup_server_id
							WHERE server_id = s.server_id
							FOR XML PATH ('EDIS_SVC_CONFIG')
						) AS XML) AS config_xml
						,CAST(NULL AS VARBINARY(MAX)) AS service_config
					INTO #edis
					FROM SSISDB.edis.lkup_server_id AS s
					;

					open symmetric key [SQLETL_EDIS_SKEY]
						decryption by certificate [SQLETL_EDIS_CERT]

					UPDATE #EDIS
						set service_config = ENCRYPTBYKEY(KEY_GUID('SQLETL_EDIS_SKEY'),CAST(config_xml AS NVARCHAR(MAX)))

					close symmetric key [SQLETL_EDIS_SKEY]

					INSERT SSISDB.EDIS.lkup_service_id (service_id, last_upd_ts, service_type, service_config)
					SELECT tmp.service_id, getdate(), tmp.service_type, tmp.service_config
					FROM #edis as tmp
						left join SSISDB.EDIS.lkup_service_id as tgt
							on tmp.service_id = tgt.service_id
					WHERE tgt.service_id is null
					;

					DROP TABLE SSISDB.edis.lkup_server_id;

					DROP TABLE #edis

				COMMIT TRAN;

			END TRY
			BEGIN CATCH
				ROLLBACK TRAN;
				RAISERROR('Error converting EDIS legacy server IDs to service IDs', 16, 16) with nowait;
			END CATCH

		END
	GO

	--{INSTALL_STEP}Install Proc usp_merge{/INSTALL_STEP}
	
CREATE PROCEDURE EDIS.[usp_merge]
        @target NVARCHAR(1000)
       ,@source NVARCHAR(1000)
       ,@delete_no_match BIT = 0
       ,@allow_identity_insert bit = 0
       ,@target_sub_qry NVARCHAR(MAX) = ''
       ,@target_key_cols nvarchar(max) = ''
       ,@print_merge_statement bit = 0
	   ,@rows_affected int = null out
	   ,@rows_inserted int = null out
	   ,@rows_updated int = null out
	   ,@rows_deleted int = null out
	   WITH ENCRYPTION
AS
BEGIN

       SET NOCOUNT ON;
       SET XACT_ABORT ON;

	   declare @step nvarchar(250)

       BEGIN TRY
			declare @start_ts datetime2 = getdate();


              DECLARE 
                      @sql NVARCHAR(MAX)
                     ,@params NVARCHAR(MAX)
                     ,@db_exists bit
                     ,@schema_exists BIT
                     ,@tbl_exists BIT
                     ,@msg VARCHAR(MAX)
                     ,@crlf CHAR(2) = CHAR(13)+CHAR(10)


              -------------------------------------------------------
              -- Parse schemas, dbs, and tables

              DECLARE 
                      @tgt_db             VARCHAR(255)
                     ,@tgt_schema  VARCHAR(255)
                     ,@tgt_tbl            VARCHAR(255)
                     ,@src_db             VARCHAR(255)
                     ,@src_schema  VARCHAR(255)
                     ,@src_tbl            VARCHAR(255)
                     ,@tgt_object_id INT
                     ,@src_object_id INT
                     ,@tgt_full_path VARCHAR(1000)
                     ,@src_full_path VARCHAR(1000)
                     ,@base_object_nm VARCHAR(1000)
              ;

              -- Did the user provide a target sub query to speed up the load?
              DECLARE @using_target_sub_qry BIT = 0
              IF ISNULL(LTRIM(RTRIM(@target_sub_qry)),'') <> '' SET @using_target_sub_qry = 1


              -- Validate Target Subquery Syntax
              IF @using_target_sub_qry = 1
                     BEGIN
              
                           IF exists(select 1 from sys.dm_exec_describe_first_result_set(@target_sub_qry, NULL, 0) where error_message is not NULL)
                                  BEGIN
                                  
                                         DECLARE @tgt_sub_qry_err_msg VARCHAR(MAX) = CONCAT(
                                                'The source query provided by parameter @target_sub_qry has a syntax issue. Below is the error statement',@crlf
                                                ,'Error Message',@crlf
                                                ,'-------------',@crlf,@crlf
                                                ,(select top 1 error_message 
                                                FROM sys.dm_exec_describe_first_result_set(@target_sub_qry, NULL, 0) where error_message is not NULL)
                                         )

                                         --set @sql_err_msg = (select top 1 error_message from #qry_meta)
                                         raiserror(@tgt_sub_qry_err_msg, 16,16) with nowait;
                                         return 16

                                  END


                     END

			set @step = 'ended syntax validation for subquery'
              -- ==========================================================================================================================
              -- Evaluate Target
              
              -- temp table handler
              IF LEFT(PARSENAME(@target,1),1) = '#'
                     BEGIN
                           SET @tgt_db = 'tempdb'
                           SET @tgt_schema = 'dbo'
                           SET @tgt_tbl = PARSENAME(@target,1)

                           SET @tgt_full_path = CONCAT('[',@tgt_db,'].[',@tgt_schema,'].[',@tgt_tbl,']')
                           SET @tgt_object_id = OBJECT_ID(@tgt_full_path,'U');

                           IF @tgt_object_id IS NULL
                                  BEGIN
                                         RAISERROR('Target temporary table [%s] does not exist!', 16, 16, @tgt_tbl) WITH NOWAIT;
                                         RETURN 16
                                  END

                     END
              ELSE
                     BEGIN

                           -- target db
                           SET @tgt_db = PARSENAME(@target,3)
                           IF DB_ID(@tgt_db) IS NULL
                                  BEGIN
                                         RAISERROR('Target Database [%s] does not exist! For non-temporary tables, parameter @target must be a fully qualified path i.e. [database].[schema].[table].', 16, 16, @tgt_db) WITH NOWAIT;
                                         RETURN 16
                                  END

                           -- target schema
                           IF CHARINDEX('..',@target) > 0
                                  BEGIN
                                         SET @tgt_schema = 'dbo'
                                  END
                           ELSE
                                  BEGIN
                                         SET @tgt_schema = PARSENAME(@target,2)

                                         SET @sql = N'SELECT @schema_exists = isnull((SELECT 1 FROM ['+@tgt_db+'].sys.schemas where name = @tgt_schema),0)'
                                         SET @params = N'@schema_exists bit out, @tgt_schema varchar(255)'
                                         EXEC sp_executesql @sql, @params, @schema_exists = @schema_exists OUT, @tgt_schema = @tgt_schema

                                         IF @schema_exists = 0
                                                BEGIN
                                                       RAISERROR('Target Schema [%s] does not exist!', 16, 16, @tgt_schema) WITH NOWAIT;
                                                       RETURN 16
                                                END
                                  END

                           -- target table
                           SET @tgt_tbl = PARSENAME(@target,1)
                     
                           SET @sql = 
                                  N'
                                         SELECT @tbl_exists = isnull((
                                                       SELECT 1 
                                                       FROM ['+@tgt_db+'].sys.tables as T
                                                              INNER JOIN ['+@tgt_db+'].sys.schemas as sc
                                                                     ON t.schema_id = sc.schema_id
                                                       WHERE t.name = @tgt_tbl AND sc.name = @tgt_schema)
                                         ,0)'
                           SET @params = N'@tbl_exists bit out, @tgt_tbl varchar(255), @tgt_schema varchar(255)'
                           EXEC sp_executesql @sql, @params, @tbl_exists = @tbl_exists OUT, @tgt_tbl = @tgt_tbl, @tgt_schema = @tgt_schema

                           IF @tbl_exists = 0
                                  BEGIN
                                         -- Is this a synonym?
                                         SET @base_object_nm = NULL
                                         SET @sql = N'
                                                SELECT @base_object_nm = 
                                                       (
                                                              SELECT S.base_object_name FROM ['+@tgt_db+'].sys.synonyms AS S
                                                                     INNER JOIN ['+@tgt_db+'].sys.schemas as sc
                                                                           ON s.schema_id = sc.schema_id
                                                              WHERE S.name = @tgt_tbl AND sc.name = @tgt_schema)'
                                         SET @params = N'@base_object_nm varchar(1000) out, @tgt_tbl varchar(255), @tgt_schema varchar(255)'
                                         EXEC sp_executesql @sql, @params, @base_object_nm = @base_object_nm OUT, @tgt_tbl = @tgt_tbl, @tgt_schema = @tgt_schema;

                                         IF @base_object_nm IS NOT NULL
                                                BEGIN
                                                       SET @tgt_schema = PARSENAME(@base_object_nm,2)
                                                       SET @tgt_tbl = PARSENAME(@base_object_nm,1)

                                                       -- if synonym is cross database
                                                       IF PARSENAME(@base_object_nm,3) IS NOT NULL
                                                              SET @tgt_db = PARSENAME(@base_object_nm,3)

                                                END
                                         ELSE
                                                BEGIN
                                                       RAISERROR('Target Table [%s] does not exist!', 16, 16, @tgt_tbl) WITH NOWAIT;
                                                       RETURN 16
                                                END
                                  END

                           SET @tgt_full_path = CONCAT('[',@tgt_db,'].[',@tgt_schema,'].[',@tgt_tbl,']')
                           SET @tgt_object_id = OBJECT_ID(@tgt_full_path,'U');
                     END


				set @step = 'ended evaluating target table'
              -- ==========================================================================================================================
              -- Evaluate Source
               
       
              SET @schema_exists = NULL;
              SET @tbl_exists = NULL;

              -- temp table handler
              IF LEFT(PARSENAME(@source,1),1) = '#'
                     BEGIN
                           SET @src_db = 'tempdb'
                           SET @src_schema = 'dbo'
                           SET @src_tbl = PARSENAME(@source,1)

                           SET @src_full_path = CONCAT('[',@src_db,'].[',@src_schema,'].[',@src_tbl,']')
                           SET @src_object_id = OBJECT_ID(@src_full_path,'U');

                           IF @src_object_id IS NULL
                                  BEGIN
                                         RAISERROR('Source temporary table [%s] does not exist!', 16, 16, @src_tbl) WITH NOWAIT;
                                         RETURN 16
                                  END
                     END
              ELSE
                     BEGIN
                     
                           -- db
                           SET @src_db = PARSENAME(@source,3)
                           IF DB_ID(@src_db) IS NULL
                                  BEGIN
                                         RAISERROR('Source Database [%s] does not exist! For non-temporary tables, parameter @source must be a fully qualified path i.e. [database].[schema].[table].', 16, 16, @src_db) WITH NOWAIT;
                                         RETURN 16
                                  END

                           -- schema
                           IF CHARINDEX('..',@source) > 0
                                  BEGIN
                                         SET @src_schema = 'dbo'
                                  END
                           ELSE
                                  BEGIN
                                         SET @src_schema = PARSENAME(@source,2)

                                         SET @sql = N'SELECT @schema_exists = isnull((SELECT 1 FROM ['+@src_db+'].sys.schemas where name = @src_schema),0)'
                                         SET @params = N'@schema_exists bit out, @src_schema varchar(255)'
                                         EXEC sp_executesql @sql, @params, @schema_exists = @schema_exists OUT, @src_schema = @src_schema

                                         IF @schema_exists = 0
                                                BEGIN
                                                       RAISERROR('Source Schema [%s] does not exist!', 16, 16, @src_schema) WITH NOWAIT;
                                                       RETURN 16
                                                END
                                  END

                           -- table
                           SET @src_tbl = PARSENAME(@source,1)
                           --PRINT @src_schema
                           --PRINT @src_tbl
                           SET @sql = 
                                                N'
                                                       SELECT @tbl_exists = isnull((
                                                                     SELECT 1 
                                                                     FROM ['+@src_db+'].sys.tables as T
                                                                           INNER JOIN ['+@src_db+'].sys.schemas as sc
                                                                                  ON t.schema_id = sc.schema_id
                                                                     WHERE  t.name = @src_tbl AND sc.name = @src_schema)
                                                       ,0)'
                           --PRINT @sql
                           SET @params = N'@tbl_exists bit out, @src_tbl varchar(255), @src_schema varchar(255)'
                           EXEC sp_executesql @sql, @params, @tbl_exists = @tbl_exists OUT, @src_tbl = @src_tbl, @src_schema = @src_schema

                           IF @tbl_exists = 0
                                  BEGIN
                                         -- Is this a synonym?
                                         SET @base_object_nm = NULL
                                         SET @sql = N'
                                                SELECT @base_object_nm = 
                                                       (
                                                              SELECT S.base_object_name FROM ['+@src_db+'].sys.synonyms AS S
                                                                     INNER JOIN ['+@src_db+'].sys.schemas as sc
                                                                           ON s.schema_id = sc.schema_id
                                                              WHERE S.name = @src_tbl AND sc.name = @src_schema)
                                                '
                                         SET @params = N'@base_object_nm varchar(1000) out, @src_tbl varchar(255), @src_schema varchar(255)'
                                         EXEC sp_executesql @sql, @params, @base_object_nm = @base_object_nm OUT, @src_tbl = @src_tbl, @src_schema = @src_schema;

                                         IF @base_object_nm IS NOT NULL
                                                BEGIN
                                                       SET @src_schema = PARSENAME(@base_object_nm,2)
                                                       SET @src_tbl = PARSENAME(@base_object_nm,1)

                                                       -- if synonym is cross database
                                                       IF PARSENAME(@base_object_nm,3) IS NOT NULL
                                                              SET @src_db = PARSENAME(@base_object_nm,3)

                                                END
                                         ELSE
                                                BEGIN
                                                       RAISERROR('Source Table [%s] does not exist!', 16, 16, @src_tbl) WITH NOWAIT;
                                                       RETURN 16
                                                END
                                  END

                           SET @src_full_path = CONCAT('[',@src_db,'].[',@src_schema,'].[',@src_tbl,']')
                           SET @src_object_id = OBJECT_ID(@src_full_path,'U');
                     END

				set @step = 'ended evaluating source table'

              -- ======================================================================
              -- Load Table Catalog

              declare @tbl_cat as table (col_nm varchar(250), ord_pos smallint, is_pk bit, pk_ord_pos smallint, exists_in_src bit, is_identity bit
				,is_nullable bit)
				;

              set @sql = 
                     '
                           select c.name, c.column_id
                                  ,case when ic.index_column_id is not null then 1 else 0 end as is_pk
                                  ,ic.key_ordinal as pk_ord_pos
                                  ,case when src.name is not null then 1 else 0 end as exists_in_src
                                  ,c.is_identity
								  ,c.is_nullable
                           from ['+@tgt_db+'].sys.columns as c with (nolock)
                                  left join ['+@tgt_db+'].sys.indexes as i with (nolock)
                                         on c.object_id = i.object_id and i.is_primary_key = 1 
                                  left join ['+@tgt_db+'].sys.index_columns as ic with (nolock)
                                         on i.object_id = ic.object_id and i.index_id = ic.index_id and c.column_id = ic.column_id
                                  left join (
                                                select name from ['+@src_db+'].sys.columns with (nolock) where object_id = '+cast(@src_object_id as varchar(50))+'
                                         ) as src
                                                on c.name = src.name
                           where c.object_id = '+cast(@tgt_object_id as varchar(50))+'
                     '
              ;

              --print @sql

              insert @tbl_cat (col_nm, ord_pos, is_pk, pk_ord_pos, exists_in_src, is_identity, is_nullable)
              exec(@sql);

			  set @step = 'table catalog loaded'

			   declare @src_cols_no_match as table (col_nm nvarchar(255));

			  set @sql = 
				'
					SELECT src.name
                    from ['+@src_db+'].sys.columns as src with (nolock)
						LEFT JOIN ['+@tgt_db+'].sys.columns as tgt with (nolock)
							on src.name = tgt.name and tgt.object_id = '+cast(@tgt_object_id as varchar(50))+'
					WHERE 1=1
						and src.object_id = '+cast(@src_object_id as varchar(50))+'
						and tgt.name is null
                        
				'
			  ;

			  insert @src_cols_no_match
			  exec(@sql)

			  declare @src_cols_no_match_list nvarchar(max)

			  select @src_cols_no_match_list = isnull(@src_cols_no_match_list,'') + col_nm + char(13)+char(10)
			  from @src_cols_no_match
			  ;
              
			  set @step = 'source columns with no target listed'


              -- did they supply a key list
              if isnull(@target_key_cols,'') <> '' 
                     BEGIN
                           declare @key_cols as table (col_nm nvarchar(255))
                           insert @key_cols
                           select *
                           from SSISDB.EDIS.ufn_split_string(@target_key_cols,',')
                           ;

                           delete @key_cols where isnull(ltrim(rtrim(col_nm)),'') = '';


                           update cat
                                  set 
                                          cat.is_pk = 1
                                         ,cat.pk_ord_pos = cat.ord_pos
                           from @tbl_cat as cat
                                  inner join @key_cols as k
                                         on cat.col_nm = k.col_nm
                           ;

                           -- validate we did not include columns that are not in the target
                           declare @non_matched_key_cols as table (col_nm nvarchar(255))
                           insert @non_matched_key_cols
                           select k.col_nm
                           from @key_cols as k
                                  left join @tbl_cat as t
                                         on k.col_nm = t.col_nm
                           where t.col_nm is null

                           if @@ROWCOUNT > 0
                                  BEGIN

                                         declare @no_match_key_cols_list nvarchar(max);

                                         select @no_match_key_cols_list = isnull(@no_match_key_cols_list,'') + col_nm + char(13)+char(10)
                                         from @non_matched_key_cols
                                         ;
                     

                                         set @msg = 'Parameter @target_key_cols contained the following column name(s) that are not present in the target table' + char(13)+char(10)
                                                +replicate('-',(select max(len(col_nm)) from @non_matched_key_cols))+char(13)+char(10)
                                                + @no_match_key_cols_list

                                         Raiserror(@msg, 16,16) with nowait;
                                         return 16;
                                  END

                     END

				set @step = 'target key columns asserted'
              -- ---------------------------------------------------------------------------------------
              -- Check that a primary key exists in the target

              if not exists(select 1 from @tbl_cat where is_pk = 1)
                     begin
                           set @msg = 
                                   'Error: Target Table '+@tgt_full_path+' does not contain a primary key.'+@crlf
                                  +'usp_merge requires a primary key on the target table to ensure target and source are joined correctly.'
                           raiserror(@msg,16,1) with nowait;

                           return 16;
                     END


              -- -----------------------------------------------------------------------------------------------------------------------------
              -- End Param validation

              declare 
              
                      @join_txt nvarchar(max)
                     ,@matched_txt nvarchar(max)
                     ,@unmatched_insert_txt varchar(max)
                     ,@unmatched_values_txt varchar(max)
                     ,@last_upd_ts nvarchar(30)
                     ,@existing_ci_nm nvarchar(250)
              ;

              /*
                     Merge/Upsert statements have 3 basic parts:
                     1 - The target and source table specification with join
                     2 - the matched clause (update part)
                     3 - The unmatched clause (insert part)

                     The proc below assembles a merge statement concatenating these three parts together      and then executes said merge statement


              */

              -- -------------------------------------------------------------------------------------------------
              -- Check if the target has a last_upd_ts column

              --DECLARE @tgt_has_last_upd_ts BIT 

              --if exists(select 1 from @tbl_cat where col_nm = 'last_upd_ts') 
              --     begin
              --            set @tgt_has_last_upd_ts = 1
              --     end
              --ELSE
              --     BEGIN
              --            SET @tgt_has_last_upd_ts = 0
              --     END
              --;
              -- ===================================================================================================================
              -- ===================================================================================================================
              -- [2] Build Out Merge SQL Text
                     -- consists of 3 parts
                           -- - i. Join Text
                           -- - ii. Match Text
                           -- - iii. Not Matched Text
       
              -- this spacer helps for formatting the merge text getting assembled
              declare @spacer varchar(50) = @crlf+'                                      ';

              -- ===================================================================================================================
              -- [2i]. Join Text 

              select @join_txt = isnull(@join_txt,'')
                     -- add in a break in the text to make it more readable
                     +case when ROW_NUMBER() over(order by pk_ord_pos) % 3 = 0 then @spacer else '' end
                     +' and tgt.['+col_nm+'] = src.['+col_nm+']' 
              from @tbl_cat
              where is_pk = 1
              ;

              -- trim off the first "and "
              set @join_txt = right(@join_txt,len(@join_txt) - 5);

			  set @step = 'join predicate built'

              -- ===================================================================================================================
              -- [2ii]. Matched Text

              select @matched_txt = 
                       isnull(@matched_txt,'') 
                     -- add line breaker every three recs for merge text format
                     + case when ROW_NUMBER() over(order by t.ord_pos) % 3 = 0 then @spacer else '' end
                     +', tgt.['+t.col_nm+'] = src.['+t.col_nm+']'
              from @tbl_cat as t
              where t.is_pk <> 1 and  exists_in_src = 1 and t.is_identity = 0 -- do not allow updating an identity column
              order by t.ord_pos
              ;

              -- trim off the leading spaces & breaker
              set @matched_txt = right(@matched_txt,len(@matched_txt) -2);
       
              -- if a last_upd_ts column exists, tack it on the end of the update
              --if @tgt_has_last_upd_ts = 1 begin
              
              --     -- if we don't have any columns other than the last upd ts (all columns in source are PK's)
              --     IF @matched_txt      IS NULL
              --            SET @matched_txt = 'tgt.[last_upd_ts] = @now'
              --     ELSE
              --            SET @matched_txt = @matched_txt + ', tgt.[last_upd_ts] = @now';
              --END

			  set @step = 'matched clause built'

              -- ===================================================================================================================
              -- [2iii]. Not Matched Text
       
              select @unmatched_insert_txt = 
                     isnull(@unmatched_insert_txt,'')
                     -- add line breaker every three recs for merge text format
                     + case when ROW_NUMBER() over(order by t.ord_pos) % 6 = 0 then @spacer else '' end
                     + ', ['+t.col_nm+']'
              from @tbl_cat as t
              where exists_in_src = 1 
                     and is_identity = 0
              order by t.ord_pos
              ;

              -- if we are allowing identity insert
              if isnull(@allow_identity_insert,0) = 1
                     BEGIN
                           select @unmatched_insert_txt = 
                                  isnull(@unmatched_insert_txt,'')
                                  -- add line breaker every three recs for merge text format
                                  + case when ROW_NUMBER() over(order by t.ord_pos) % 6 = 0 then @spacer else '' end
                                  + ', ['+t.col_nm+']'
                           from @tbl_cat as t
                           where exists_in_src = 1 
                                  and is_identity = 1
                           order by t.ord_pos
                     END


              -- trim off the leading spaces & breaker
              set @unmatched_insert_txt = right(@unmatched_insert_txt,len(@unmatched_insert_txt) - 2);

              set @unmatched_values_txt = replace(@unmatched_insert_txt, '[','src.[');

              -- add last_upd_ts if exists
              --if @tgt_has_last_upd_ts = 1 
              --     begin  
              --            SET @unmatched_insert_txt = @unmatched_insert_txt + ', [last_upd_ts]';
              --            SET @unmatched_values_txt = @unmatched_values_txt + ', @now';
              --     END

			  set @step = 'unmatched clause built'
       
              -- ====================================================================================================================
              -- [3] Optimize the temp table to prepare for Upsert

              -- If the source is a not a temp table, we will create/drop the index afer the merge is complete

              DECLARE @is_index_temp BIT = IIF(@src_db <> 'tempdb',1,0)


              -- Determine index type needed
              DECLARE @index_type VARCHAR(30) = 'NONCLUSTERED'

              -- how many rows are we dealing with?
       
              -- declare @source_tbl nvarchar(250) = '##dfs_facts_dly_delv_stats', @index_type varchar(30)
              IF OBJECT_ID('tempdb..#src_rows') IS NOT NULL DROP TABLE #src_rows;

              CREATE TABLE #src_rows (nm NVARCHAR(250), row_cnt BIGINT, reserved VARCHAR(250), data VARCHAR(250), index_size VARCHAR(250), unused VARCHAR(250));

              INSERT #src_rows 
              EXEC('['+@src_db+']..sp_spaceused ''['+@src_schema+'].['+@src_tbl+']''')
       

              -- if the source has more than a million rows, lets check to see if we can impliment a clustered index
              IF (SELECT row_cnt FROM #src_rows) > 1000000
                     BEGIN
                           DECLARE @src_has_cli BIT = 0

                           SET @sql = N'SELECT @src_has_cli = isnull((SELECT 1 FROM ['+@src_db+'].sys.indexes where object_id = @src_object_id
                                                                                                       and type_desc = ''CLUSTERED''),0)'
                           SET @params = N'@src_has_cli bit out, @src_object_id int';

                           EXEC sp_executesql @sql, @params, @src_has_cli = @src_has_cli OUT, @src_object_id = @src_object_id;

                           IF @src_has_cli = 0
                                  SET @index_type = 'CLUSTERED'
                     END

              DROP TABLE #src_rows;

			  set @step = 'temporary index type determined'

              -- index create statement
              DECLARE @index_nm VARCHAR(50) = cast(newid() as varchar(50))
			  	
              set @sql = 
                     '
                           CREATE UNIQUE '+@index_type+' INDEX ['+@index_nm+'] ON '
							+ case when @src_db = 'tempdb' then '['+@src_tbl+']' else '['+@src_schema+'].['+@src_tbl+']'  end
                                  +' ('+stuff((select ', ['+col_nm+']' from @tbl_cat where is_pk = 1 order by pk_ord_pos for xml path ('')),1,2,'')+')';
              ;
       
              IF @src_db <> 'tempdb'
                     BEGIN
        
                           SET @sql = '
                                  USE ['+@src_db+'];
                                  '+@sql
              END

              
       
              -- add covering clause for nonclustered
              IF @index_type = 'NONCLUSTERED'
                     BEGIN
                           declare @cover_clause varchar(max) = '('+stuff(
                                  (
                                         select ', ['+t.col_nm+']'
                                         from @tbl_cat as t
                                         where 1=1
                                                --and t.col_nm <> 'last_upd_ts'
                                                and t.is_pk <> 1
                                                and exists_in_src = 1
                                         order by t.ord_pos 
                                  for xml path ('')),1,2,'')+')'
                     
                           ;


							IF ISNULL(@cover_clause,'') <> ''
							BEGIN
								set @sql = @sql + ' INCLUDE '+@cover_clause;
							END


                           --set @sql = @sql + ' INCLUDE '+@cover_clause;

                     END
                     
              begin try
				
    
                     exec(@sql);
					
					set @step = 'temporary index created'

              END TRY
              BEGIN CATCH

                     DECLARE @index_crt_err_msg VARCHAR(MAX) = ERROR_MESSAGE();

					 if charindex('The CREATE UNIQUE INDEX statement terminated because a duplicate key', @index_crt_err_msg) > 0
						begin

							declare @dups_sql varchar(max)
							declare @tmp_key_cnt int

							declare @tmp_on_clause varchar(max), @gtt varchar(250), @tmp_keys varchar(max);

							set @tmp_keys = stuff((select ', ['+col_nm+']' from @tbl_cat where is_pk = 1 order by pk_ord_pos for xml path ('')),1,2,'')
							set @tmp_key_cnt = (select count(*) from @tbl_cat where is_pk = 1)

							set @tmp_on_clause = 'on '+stuff((select 'and tmp.['+col_nm+'] = dups.['+col_nm+'] ' from @tbl_cat where is_pk = 1 order by pk_ord_pos for xml path ('')),1,3,'')

							set @gtt = '##'+cast(replace(newid(),'-','_') as varchar(250));

							-- isolate dups to global temp
							set @dups_sql = 
								'
									select tmp.*
									into ['+@gtt+']
									from '
										+case
											when @src_db = 'tempdb' then @src_tbl
											else @src_full_path
										end+' as tmp
										inner join (
											select '+@tmp_keys+'
											from '
												+case
													when @src_db = 'tempdb' then @src_tbl
													else @src_full_path
												end+'
											group by '+@tmp_keys+'
											having count(*) >=2
										) as dups
											'+@tmp_on_clause
							;

							exec(@dups_sql);

							declare @dup_recs int = @@rowcount;

							set @step = 'duplicates counted'

							-- to force sort
							--EXEC('create clustered index c on ['+@gtt+'] ('+@tmp_keys+')')

							declare @gtt2 nvarchar(255) = concat('##',newid())

							declare @dups_sql_sample nvarchar(max) = 'select top 2 * INTO ['+@gtt2+'] from ['+@gtt+'] ORDER BY '+@tmp_keys;
							exec(@dups_sql_sample)

							set @dups_sql_sample = 'SELECT * FROM ['+@gtt2+']'

							set @step = 'top 2 duplicates isolated'

							-- get the dup rows printout
							--declare @dup_rows nvarchar(max) = SSISDB.edis.ifn_format_qry_as_text(@dups_sql_sample)
							-- dont show this..too long

							declare @dups_non_key_cols_sample_txt nvarchar(max) = ''

							declare @found_dup_non_key_recs bit = 0

							declare @curr_col nvarchar(255); 
							declare @examples_found_cnt int = 0;
							declare cs_looper cursor local fast_forward
								for
									select col_nm
									from @tbl_cat
									where exists_in_src = 1
										and is_pk = 0
								open cs_looper
								fetch next from cs_looper into @curr_col;
								while @@fetch_status = 0
									begin
										declare @sql_dups_non_key nvarchar(max) = 
											N'
												IF EXISTS(
													SELECT '+@tmp_keys+'
													FROM ['+@gtt2+']
													GROUP BY  '+@tmp_keys+'
													HAVING COUNT(DISTINCT ISNULL('+@curr_col+','''')) >=2
												)
													SET @has_dup = 1
												else
													SET @has_dup = 0
											'
										;
									  declare @col_has_dup bit = 0;
									  exec sp_executesql @sql_dups_non_key, N'@has_dup bit out', @has_dup = @col_has_dup out;

									  --print @col_has_dup;

									  if @col_has_dup = 1
										begin
											declare @dup_non_key_cols_msg nvarchar(max) = NULL;
											set @sql_dups_non_key = 
												'
													SELECT @dup_non_key_cols_msg = 
														isnull(@dup_non_key_cols_msg+'', '','''') 
															+
																CASE 
																	WHEN '+@curr_col+' IS NULL THEN ''NULL''
																	ELSE cast('+@curr_col+' as nvarchar(max))
																END
													FROM ['+@gtt2+']
												'
											;
											exec sp_executesql @sql_dups_non_key, N'@dup_non_key_cols_msg nvarchar(max) out', @dup_non_key_cols_msg = @dup_non_key_cols_msg out;

											set @dups_non_key_cols_sample_txt += 'Non-Key Column ['+@curr_col+'] Conflicting Values: ('+ @dup_non_key_cols_msg + ')'+ char(13)+char(10)

											set @found_dup_non_key_recs = 1
											set @examples_found_cnt +=1

											-- dont show more than 3 examples since the print statement is limited
											if @examples_found_cnt >=3 break;

											

										END

										

										fetch next from cs_looper into @curr_col;
									end
								;
								close cs_looper
								deallocate cs_looper
							
							;

							declare @gtt3 nvarchar(255) = concat('##',newid());

							set @sql = 
								'SELECT DISTINCT '+@tmp_keys+'
								into ['+@gtt3+']
								FROM ['+@gtt2+']
							'
							;

							exec(@sql);

							declare @tmp_key_vals nvarchar(max) --= SSISDB.edis.ifn_format_qry_as_text(@prim_key_cols_sql);

							-- if one col, no need to concat
							if (select count(col_nm) from @tbl_cat where is_pk = 1) = 1
								begin
									set @sql = N'set @tmp_key_vals = (SELECT CAST('+@tmp_keys+' as nvarchar(max)) FROM ['+@gtt3+'])';
								end
                            else
								begin
									set @sql = N'set @tmp_key_vals = (SELECT CONCAT('+replace(@tmp_keys,',',', '', '',')+') FROM ['+@gtt3+'])';
								end
							--print @sql

							
				
							exec sp_executesql @sql, N'@tmp_key_vals nvarchar(max) out', @tmp_key_vals = @tmp_key_vals out;

							exec('DROP TABLE ['+@gtt+']');
							exec('DROP TABLE ['+@gtt2+']');
							exec('DROP TABLE ['+@gtt3+']');

							declare @dups_msg nvarchar(max);

							if @found_dup_non_key_recs = 1
								begin
									
									set @step = 'creating duplicates message on non key recs'

									set @dups_msg =  
										 'Duplicate Rows Detected'+char(13)+char(10)
										 +'Below is an example where source table '
											+case when left(@src_tbl,1) = '#' then @src_tbl else @src_full_path end+' had 2 rows with the same key columns and different non-key values.'+char(13)+char(10)
										 +'Please address before re-submitting.'+char(13)+char(10)+char(13)+char(10)
										 +'-------------------------------------'+char(13)+char(10)
										 +'Primary Key Column Name(s): ('+@tmp_keys+')'+char(13)+char(10)
										 +'Primary Key Value(s) duplicated: ('+@tmp_key_vals+')'+char(13)+char(10)+char(13)+char(10)
										 +'Sample Non-Key Column Value(s) That Differ'+char(13)+char(10)
										 +'---------------------------------'+char(13)+char(10)
										 +@dups_non_key_cols_sample_txt
								end
                            else
								begin

									set @step = 'creating duplicates message on same key cols'

									set @dups_msg = 'Duplicate Rows Detected'+char(13)+char(10)
										+'Below is an example where source table '
											+case when left(@src_tbl,1) = '#' then @src_tbl else @src_full_path end+' had 2 rows with the same key columns.'+char(13)+char(10)
										+'Please address before re-submitting.'+char(13)+char(10)
										+'-------------------------------------'+char(13)+char(10)
										+'Primary Key Column Name(s): ('+@tmp_keys+')'+char(13)+char(10)
										+'Primary Key Value(s) duplicated: ('+@tmp_key_vals+')'+char(13)+char(10)
										+'Suggested Fix: Use the keyword DISTINCT to collapse the duplicate rows in your source table'
								end
							
							raiserror(@dups_msg,16,16) with nowait;
							return 16;

						end
                    else
						begin
							
							set @step = 'unknown dups error message'

							 set @msg = concat('Error attempting to create unique index on table '+@src_full_path+' during the usp_merge task',@crlf
									,'Error Message: ',@index_crt_err_msg)
							 raiserror(@msg,16,16);
							 RETURN 16
						END
              END CATCH



              -- =====================================================================================================================
              -- [4] Assemble Merge command

              -- If the target does not have any rows, we will do a straight insert
              -- if it has rows, we run a merge

              IF OBJECT_ID('tempdb..#tgt_rows') IS NOT NULL DROP TABLE #tgt_rows;

              CREATE TABLE #tgt_rows (nm NVARCHAR(250), row_cnt BIGINT, reserved VARCHAR(250), data VARCHAR(250), index_size VARCHAR(250), unused VARCHAR(250));

              INSERT #tgt_rows 
              EXEC('['+@tgt_db+']..sp_spaceused ''['+@tgt_schema+'].['+@tgt_tbl+']''')

              -- does target have rows?
              DECLARE @is_target_empty BIT = 0
              IF (SELECT row_cnt FROM #tgt_rows) = 0
                     SET @is_target_empty = 1
              ;


              -- if source is tempdb...no need to reference it
              DECLARE @merge_source_tbl VARCHAR(1000);
              IF @src_db = 'tempdb'
                     SET @merge_source_tbl = '['+@src_tbl+']'
              ELSE
                     SET @merge_source_tbl = '['+@src_db+'].['+@src_schema+'].['+@src_tbl+']'
              ;

				-- tracks rows inserted/updated/deleted
			  IF OBJECT_ID('tempdb..#res_set') IS NOT NULL DROP TABLE #res_set;
			  create table #res_set (act nvarchar(10));

			  declare @using_merge bit = 1

			    -- If the target is empty, do a straight insert
              IF @is_target_empty = 1 OR @delete_no_match = 1
                     BEGIN
						set @using_merge = 0
                           SET @sql = CONCAT(
                                  '
								   USE ['+@tgt_db+'];

								   ',

								   IIF(@allow_identity_insert = 1, ' SET IDENTITY_INSERT ['+@tgt_schema+'].['+@tgt_tbl+'] ON; ',''),'

								   ',

								   -- if we are using the @delete_no_match, then truncate the table for efficiency
								   IIF(@delete_no_match = 1,
										  'TRUNCATE TABLE ['+@tgt_db+'].['+@tgt_schema+'].['+@tgt_tbl+']'
										  ,''
								   ),
								   '
                                         
                                         
								   INSERT ['+@tgt_db+'].['+@tgt_schema+'].['+@tgt_tbl+'] WITH (TABLOCK) 
								   (
										  '+@unmatched_insert_txt+'
								   )
								   SELECT '+@unmatched_values_txt+'
								   FROM '+@merge_source_tbl+' AS SRC
									'
                           )

                     END
              ELSE
                     BEGIN
                           set @sql = concat(
						'
						  USE ['+@tgt_db+'];',

						  IIF(@allow_identity_insert = 1, ' SET IDENTITY_INSERT ['+@tgt_schema+'].['+@tgt_tbl+'] ON; ',''),'

						  ',
						  CASE WHEN @using_target_sub_qry = 1 
								 THEN ';WITH TGT AS ('+@target_sub_qry+') MERGE TGT'
								 WHEN @tgt_db = 'tempdb' then 'MERGE ['+@tgt_tbl+'] WITH (TABLOCK) AS TGT '
								 ELSE 'MERGE ['+@tgt_db+'].['+@tgt_schema+'].['+@tgt_tbl+'] WITH (TABLOCK) AS TGT '
						  END,
								 '
								 USING '+@merge_source_tbl+' AS SRC WITH (TABLOCK)
									   ON '+@join_txt+'
								 WHEN MATCHED THEN UPDATE 
									   SET  
													 '+@matched_txt+'
								 WHEN NOT MATCHED BY TARGET THEN
									   INSERT (
													 '+@unmatched_insert_txt+')
									   VALUES (
													 '+@unmatched_values_txt+')
								OUTPUT $action into #res_set
						  ;

						'
                           
                           )
                     END

       
              ;

              -- run it
              BEGIN TRY
                     --print @sql

                     if @print_merge_statement = 1
                           print @sql;

                     -- need to wrap in explicit transaction since multiple dml statements now in use(truncate/insert)
                     BEGIN TRANSACTION
						   set @step = 'running merge command'
                           EXEC(@sql);

						   set @rows_affected = @@rowcount;

						   set @step = 'merge commmand executed'

							IF @using_merge = 1
								BEGIN
									set @rows_inserted = (SELECT COUNT(*) FROM #res_set WHERE act = 'INSERT');
									set @rows_updated = (SELECT COUNT(*) FROM #res_set WHERE act = 'UPDATE');
									set @rows_deleted = (SELECT COUNT(*) FROM #res_set WHERE act = 'DELETE');
								END
							ELSE
								BEGIN
									set @rows_inserted = @rows_affected
								END

						   set @step = 'rows modified assigned'

						   DROP TABLE #res_set;
						  
						   
						   declare @end_ts datetime2 = getdate();

						   -- log it
						   insert SSISDB.edis.etl_audit (exec_id, task_action, task_start_ts, task_end_ts, task_duration, task_run_outcome
								,usr_login_id, src_sys, dest_sys, rows_tsfr
								)
							values (newid(), 'USP_MERGE', @start_ts, @end_ts, datediff(second,@start_ts, @end_ts), 'SUCCESS'
								,suser_name(), @src_full_path, @tgt_full_path, @rows_affected
							)

							set @step = 'merge logged to audit'
                           
                     COMMIT TRANSACTION

                     -- Drop the index if temporary
                     IF @is_index_temp = 1
                           BEGIN
								SET @sql = 'USE ['+@src_db+']; DROP INDEX ['+@index_nm+'] ON ['+@src_schema+'].['+@src_tbl+']'
								EXEC(@sql)
                           END

					IF @src_cols_no_match_list IS NOT NULL
						BEGIN
							declare @src_cols_msg nvarchar(Max) =
								CONCAT(
								 'EDIS WARNING:'
								 ,char(13)+char(10)
								 ,'The following source columns were not merged to the target table'
								 ,char(13)+char(10)
								 ,'due to the source column not having a corresponding column in the target with the same name:'
								 ,char(13)+char(10)
								 ,'----------------------'
								 ,char(13)+char(10)
								 ,@src_cols_no_match_list
							)
							print @src_cols_msg
						END

              END TRY
              BEGIN CATCH
                     
                     IF @@TRANCOUNT > 0 
                           ROLLBACK TRANSACTION
                     ;

					 set @step = 'merge commmand failed: Transaction rolled back'

                     DECLARE @truncation_msg_cols VARCHAR(MAX), @truncation_msg_cols_found BIT = 0

                     DECLARE @sys_err_msg VARCHAR(4000) = ERROR_MESSAGE();

                     -- Truncation error handler
                     DECLARE @arithmetic_overflow_err VARCHAR(250) = 'Arithmetic overflow error for data type';
                     DECLARE @arithmetic_overflow_err2 VARCHAR(250) = 'Arithmetic overflow error converting expression to data type'
                     DECLARE @string_truncate_err VARCHAR(250) = 'String or binary data would be truncated.'


                     IF 
                              CHARINDEX(@arithmetic_overflow_err, @sys_err_msg)     > 0 
                           OR CHARINDEX(@arithmetic_overflow_err2, @sys_err_msg)    > 0 
                           OR CHARINDEX(@string_truncate_err, @sys_err_msg)         > 0 

                           BEGIN

							    set @step = 'beginning truncation error analysis'

                                IF OBJECT_ID('tempdb..#offending_columns') IS NOT NULL DROP TABLE #offending_columns;

								CREATE TABLE #offending_columns (col_nm VARCHAR(255), src_typ varchar(250), dest_typ varchar(250), is_nullable bit);

								DECLARE @truncation_sql NVARCHAR(MAX) = 
									N'
										INSERT #offending_columns (col_nm, src_typ, dest_typ, is_nullable)
										SELECT tgt_col.name AS col_nm
											,CASE
												WHEN TYPE_NAME(src_col.user_type_id) IN (''varchar'',''char'',''nvarchar'',''nchar'',''binary'',''varbinary'')
													THEN CONCAT(TYPE_NAME(src_col.user_type_id),''('',src_col.max_length,'')'')
												WHEN TYPE_NAME(src_col.user_type_id) IN (''decimal'',''numeric'') 
													THEN CONCAT(TYPE_NAME(src_col.user_type_id),''('',src_col.precision,'','',src_col.scale,'')'')
												WHEN TYPE_NAME(src_col.user_type_id) IN (''tinyint'',''smallint'',''int'',''bigint'')
													THEN TYPE_NAME(src_col.user_type_id)
											END as src_typ
											,CASE
												WHEN TYPE_NAME(tgt_col.user_type_id) IN (''varchar'',''char'',''nvarchar'',''nchar'',''binary'',''varbinary'')
													THEN CONCAT(TYPE_NAME(tgt_col.user_type_id),''('',tgt_col.max_length,'')'')
												WHEN TYPE_NAME(tgt_col.user_type_id) IN (''decimal'',''numeric'') 
													THEN CONCAT(TYPE_NAME(tgt_col.user_type_id),''('',tgt_col.precision,'','',tgt_col.scale,'')'')
												WHEN TYPE_NAME(tgt_col.user_type_id) IN (''tinyint'',''smallint'',''int'',''bigint'')
													THEN TYPE_NAME(tgt_col.user_type_id)
											END as dest_typ
											,tgt_col.is_nullable
										FROM ['+@tgt_db+'].sys.tables AS tgt_tbl
											INNER JOIN ['+@tgt_db+'].sys.columns AS tgt_col
												ON tgt_col.object_id = tgt_tbl.object_id
											INNER JOIN ['+@src_db+'].sys.columns AS src_col
												ON tgt_col.name = src_col.name
											INNER JOIN ['+@src_db+'].sys.tables AS src_tbl 
												ON src_col.object_id = src_tbl.object_id
										WHERE tgt_tbl.object_id = @tgt_object_id
											AND src_tbl.object_id = @src_object_id
											AND TYPE_NAME(tgt_col.user_type_id) IN (''varchar'',''char'',''nvarchar'',''nchar'',''binary'',''varbinary''
												,''tinyint'',''smallint'',''int'',''bigint'',''decimal'',''numeric''
											)
											AND tgt_col.max_length < src_col.max_length
									'
								DECLARE @truncation_sql_params NVARCHAR(MAX) = N'@tgt_object_id int, @src_object_id int';

								EXEC sp_executesql @truncation_sql, @truncation_sql_params, @tgt_object_id, @src_object_id;

								set @step = 'truncation sql ran'

								IF EXISTS(SELECT * FROM #offending_columns)
									begin
										
										declare @trun_msg_sql nvarchar(max) 
											= 
										'
											SELECT 
												 col_nm as [Column]
												,src_typ as [Source Type]
												,dest_typ as [Target Type] 
												,[Suggested Target Table DDL Alter Statement] = 
													CONCAT(''ALTER TABLE '+case when @tgt_db = 'tempdb' then @tgt_tbl else @tgt_full_path end
														+' ALTER COLUMN ['',col_nm,''] '',src_typ
														,case when is_nullable = 1 then '' NOT NULL'' ELSE '' NULL'' END)
											FROM #offending_columns
										
										'
										--print @trun_msg_sql
										set @truncation_msg_cols = SSISDB.EDIS.ifn_format_qry_as_text(@trun_msg_sql);
									
										
										drop TABLE #offending_columns;

										SET @msg = 'Column Truncation error has been detected. '
										SET @msg += 'This occurs when a column in the source table is longer than the column in the destination table. '+@crlf;
										SET @msg += 'Below is a list of column(s) that that have a longer width in the source. '+@crlf+@crlf;
										SET @msg = @msg + @truncation_msg_cols

										set @step = 'column truncation error message created'

										raiserror(@msg,16,16) with nowait;
										return 16;
									END

								;



                           END
					else
						begin
							-- general error
							set @msg = 'usp_merge failed with the following information:'
							SET @msg = @msg + 'error message -> '+ @sys_err_msg+@crlf;
							set @msg = @msg + 'error line -> '+ CAST(ERROR_LINE() AS VARCHAR(5))+@crlf;
							raiserror(@msg,16,16) with nowait;
							return 16;
						END

              END CATCH

              
       END TRY
       BEGIN CATCH
              DECLARE @merge_err_msg VARCHAR(MAX) = ERROR_MESSAGE();
              DECLARE @err_line INT = ERROR_LINE();

			  set @merge_err_msg += char(13)+char(10)+ 'Merge Step: '+@step


			  declare @end_ts2 datetime2 = getdate()

			  -- log it
				insert SSISDB.edis.etl_audit (exec_id, task_action, task_start_ts, task_end_ts, task_duration, task_run_outcome
					,usr_login_id, src_sys, dest_sys, err_msg
					)
				values (newid(), 'USP_MERGE', @start_ts, @end_ts2, datediff(second,@start_ts, @end_ts2), 'FAILURE'
					,suser_name(), @src_full_path, @tgt_full_path, @merge_err_msg
				)

              SET @merge_err_msg = CONCAT('usp_merge error: ',@merge_err_msg , CHAR(13)+CHAR(10) , 'Error Line ',@err_line);
              RAISERROR(@merge_err_msg,16,16) WITH NOWAIT;
              RETURN 16
       END CATCH

	   return 0 -- usp_merge

END


	GO



	--{INSTALL_STEP}Deactivate old svc id table{/INSTALL_STEP}

	IF EXISTS(SELECT 1 FROM SYS.TABLES WHERE NAME = 'lkup_svc_id' and schema_Name(schema_id) = 'EDIS')
		BEGIN
			-- if no data, kill it
			IF NOT EXiSTS(SELECT * FROM EDIS.lkup_svc_id)
				BEGIN
					EXEC SSISDB..sp_executesql N'DROP TABLE EDIS.lkup_svc_id'
				END
			ELSE
				BEGIN
					EXEC SP_RENAME 'EDIS.lkup_svc_id', 'lkup_svc_id_inactive'
				END
			
		END

	-- ====================================================================================================================================
	-- Load in Servername Connection

	--{INSTALL_STEP}Load default MSSQL Connection{/INSTALL_STEP}

	 IF NOT EXISTS(SELECT 1 FROM SSISDB.EDIS.lkup_service_id WHERE service_id = @@servername) 
			BEGIN

				EXEC EDIS.usp_config_db_conn_mssql
					 @server_id = @@servername
					,@server_instance = @@servername
					,@use_integrated_security = 1

			END
            


	GO

	-- Add diagnostic procs
	--{INSTALL_STEP}proc isp_turn_on_logging{/INSTALL_STEP}

	CREATE PROC EDIS.isp_turn_on_logging
		with encryption
		as
			set nocount on;
			declare @bin varbinary(128);
			set @bin = cast('edis_logging_verbose' as varbinary(128))
			set context_info @bin;
	GO

	-- =====================================================================================================================================
	-- Views:

	--{INSTALL_STEP}Create View v_lkup_server_id{/INSTALL_STEP}

	create view EDIS.v_lkup_service_id
		with encryption
	as
	SELECT service_id, service_type, last_upd_ts
	  FROM [SSISDB].EDIS.[lkup_service_id] with (nolock)
	  where EDIS.fn_check_perm(service_id) = 1

	GO

	--{INSTALL_STEP}Create View v_etl_audit{/INSTALL_STEP}

	CREATE VIEW EDIS.v_etl_audit
	as
		SELECT 
			 exec_id
			,task_action
			,task_start_ts
			,task_end_ts
			,task_duration
			,task_run_outcome
			,usr_login_id
			,src_sys
			,dest_sys
			,src_qry
			,dest_tbl
			,rows_tsfr
			,err_msg
			,svc_id
			,sys_hb_ts
			,info_msgs
		FROM edis.etl_audit with (nolock)

	GO


	-- =====================================================================================================================================
	-- Database Role

	--{INSTALL_STEP}Create database role{/INSTALL_STEP}

	IF NOT EXISTS(SELECT * FROM SYS.database_principals WHERE type_desc = 'DATABASE_ROLE' AND NAME = 'EDIS_Role')
		BEGIN
			CREATE ROLE [EDIS_Role] AUTHORIZATION [DBO]
		END
    ;

	GO

	--{INSTALL_STEP}Grant execute rights to EDIS procs{/INSTALL_STEP}

	if object_id('tempdb..#obs') is not null drop table #obs;
	create table #obs (ob_nm varchar(250));

	insert #obs values 
		 ('usp_rename_loc_file')
		,('usp_create_loc_dir')
		,('usp_delete_loc_dir')
		,('usp_delete_loc_files')
		,('usp_copy_loc_file')
		,('usp_copy_loc_file')
		,('usp_watch_for_file')
		,('usp_update_loc_file_attribute')
		,('usp_get_loc_file_list')
		,('usp_get_ftp_file_list')
		,('usp_ftp_upload_files')
		,('usp_ftp_download_files')
		,('usp_ftp_delete_files')
		,('usp_ftp_create_dir')
		,('usp_run_sql_cmd')
		,('usp_get_scalar')
		,('usp_run_data_transfer')
		,('isp_log_info')
		,('usp_zip_files')
		,('ufn_does_file_exist')
		,('usp_unzip_files')
		,('usp_run_process_task')
		,('usp_run_web_request')
		,('usp_run_soap_request')
		,('usp_sharepoint_list_read')
		,('usp_sharepoint_list_write')
		,('usp_sharepoint_list_purge')
		,('usp_sharepoint_list_get_metadata')
		,('usp_sharepoint_library_upload_files')
		,('usp_sharepoint_library_download_files')
		,('usp_sharepoint_library_get_file_list')
		,('usp_sharepoint_get_list_collection')
		,('usp_excel_get_sheet_list')
		,('usp_excel_rename_worksheet')
		,('usp_excel_clear_worksheet')
		,('usp_excel_add_worksheet')
		,('usp_excel_export_data')
		,('usp_excel_import_data')
		,('usp_bigquery_import_data')
		,('usp_bigquery_export_data')
		,('usp_bigquery_drop_tbl')
		,('usp_bigquery_crt_tbl_from_qry')
		,('usp_bigquery_append_data') 
		,('usp_bigquery_run_sql_cmd')
		,('usp_merge')
		,('isp_log_task')
		,('v_lkup_service_id')
		,('v_etl_audit')
		,('fn_check_perm')
		,('usp_run_powershell_script')
		,('ifn_validate_qry')
		,('usp_convert_varbinary_to_file')
		,('ufn_convert_file_to_varbinary')
		,('ufn_split_string')
		,('usp_send_email')
		,('ufn_get_files')
		,('usp_move_loc_file')
		,('ufn_read_file_line')
		,('usp_replace_file_content')
		,('usp_email_import_messages')
		,('usp_email_save_attachment_to_file')
		,('usp_flatfile_export_data')
		,('usp_email_create_folder')
		,('usp_email_delete_folder')
		,('usp_email_create_cal_appt')
		,('usp_email_move_messages')
		,('usp_email_delete_messages')
		,('ufn_concat_list')
	;

	-- -------------------------------------------------------------------
	-- Add Permissions

	-- Types
	GRANT EXECUTE ON TYPE::[EDIS].[web_request_headers] TO [EDIS_Role];

	-- Objects

	if object_id('tempdb..#perms') is not null drop table #perms;

	select distinct ob.name, OBJECT_SCHEMA_NAME(ob.object_id) as schema_nm, isnull(obs.type, ob.type) as type
	into #perms
	from #obs as tmp
		inner join sys.objects as ob
			on ob.name COLLATE SQL_Latin1_General_CP1_CI_AS = tmp.ob_nm
		left join sys.synonyms as sn
			on ob.object_id = sn.object_id
		left join sys.objects as obS
			on object_id(sn.base_object_name) = obs.object_id
	WHERE OBJECT_SCHEMA_NAME(ob.object_id) IN ('EDIS')
	
	declare csp cursor local fast_forward for select name, schema_nm, type
	from #perms

	declare @nm nvarchar(250), @schema_nm nvarchar(250), @type nvarchar(10)
	open csp
	fetch next from csp into @nm, @schema_nm, @type
	while @@FETCH_STATUS = 0
		BEGIN
			
			declare @perm_grant_sql nvarchar(max) = 
				N'GRANT '+case when @type in('FT', 'V') then 'SELECT' ELSE 'EXECUTE' END + ' ON ['+@schema_nm+'].['+@nm+'] TO [EDIS_Role]'
			;

			--print @perm_grant_sql
			exec sp_executesql @perm_grant_sql
				

			fetch next from csp into @nm, @schema_nm, @type
		END
	close csp
	deallocate csp

	

	GO

	-- Grant Insert/Delete/SELECT on params
	GRANT SELECT, INSERT, DELETE ON EDIS.util_task_params to [EDIS_Role];

	GO

	--{INSTALL_STEP}Set Package Exec permissions{/INSTALL_STEP}

    -- Data Transfer Folder/Project/Package

    -- folder
    declare @folder_id int = (select folder_id from catalog.folders where name = 'SQLETL.COM')
    declare @db_role_id int = (select principal_id from sys.database_principals where name = 'EDIS_Role')

    EXEC [SSISDB].[catalog].[grant_permission] @object_type=1, @object_id = @folder_id, @principal_id = @db_role_id, @permission_type=1
    EXEC [SSISDB].[catalog].[grant_permission] @object_type=1, @object_id = @folder_id, @principal_id = @db_role_id, @permission_type=103
    EXEC [SSISDB].[catalog].[grant_permission] @object_type=1, @object_id = @folder_id, @principal_id = @db_role_id, @permission_type=101
	
	---- project
    declare @project_id int = (select p.project_id 
	    from catalog.projects as p
		    inner join catalog.folders as f
			    on p.folder_id = f.folder_id
	    where p.folder_id = @folder_id and p.name = 'EDIS'
    )

	if @project_id is not null
		begin

			EXEC [SSISDB].[catalog].[grant_permission] @object_type=2, @object_id = @project_id, @principal_id = @db_role_id, @permission_type=1
			EXEC [SSISDB].[catalog].[grant_permission] @object_type=2, @object_id = @project_id, @principal_id = @db_role_id, @permission_type=3

		end

	GO

	-- ENABLE MS TRIGGER
	
	IF EXiSTS(select * from SSISDB.sys.triggers where name = 'ddl_cleanup_object_permissions')
		BEGIN
			IF EXISTS (SELECT is_disabled from SSISDB.sys.triggers where name = 'ddl_cleanup_object_permissions' and is_disabled = 1)
				BEGIN
					EXEC SSISDB..sp_executesql N'ENABLE TRIGGER ddl_cleanup_object_permissions ON DATABASE'
					--print 'trigger enabled'
				END
		END

	GO

	-- Add Server Trigger for db owner change on ssisdb

	IF EXISTS(select * from sys.server_triggers where name = 'EDIS_DB_OWNER_CHANGE_TRIG')
		BEGIN
			EXEC master..sp_executesql N'DROP TRIGGER EDIS_DB_OWNER_CHANGE_TRIG ON ALL SERVER'
		END

	GO
	declare @trig_def nvarchar(max) = 
		'
	CREATE TRIGGER EDIS_DB_OWNER_CHANGE_TRIG
	ON ALL SERVER
	with EXECUTE as '''+(SELECT NAME from sys.server_principals where sid = 0x01)+'''
	FOR ALTER_AUTHORIZATION_DATABASE
	AS

	BEGIN
		declare @data xml = eventdata();
		declare @db nvarchar(255) = @data.value(''(/EVENT_INSTANCE/DatabaseName)[1]'', ''nvarchar(255)'');
		declare @object_type nvarchar(255) = @data.value(''(/EVENT_INSTANCE/ObjectType)[1]'', ''nvarchar(255)'')
		declare @owner_nm nvarchar(255) = @data.value(''(/EVENT_INSTANCE/OwnerName)[1]'', ''nvarchar(255)'')

		declare @sa nvarchar(255) = (select name from sys.server_principals where sid = 0x01)

		if @db = ''SSISDB'' and @object_type = ''DATABASE'' and @owner_nm <> @sa
			BEGIN
				declare @err_msg nvarchar(max) = 
					''EDIS NOTIFICATION: Error changing database owner for database [SSISDB]. In order for EDIS to function correctly, the SSISDB database owner needs to be ''+@sa+''.''+char(13)+char(10)+
					''This change was prevented by server trigger [EDIS_DB_OWNER_CHANGE_TRIG]. If you disable this trigger and change the database owner for database [SSISDB], ''+
					''EDIS will not function correctly.''
				RAISERROR(@err_msg,16,16) with nowait;
				rollback transaction
			END

	END
	
		'
	EXEC master..sp_executesql @trig_def;
	GO
	exec master..sp_executesql N'ENABLE TRIGGER [EDIS_DB_OWNER_CHANGE_TRIG] ON ALL SERVER'
